// chrome/browser/media/history/media_history_store.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/media/history/media_history_store.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mediaHistory.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var media_session$ =
      mojo.internal.exposeNamespace('mediaSession.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/media_session/public/mojom/media_session.mojom', '../../../../services/media_session/public/mojom/media_session.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }



  function MediaHistoryStats(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStats.prototype.initDefaults_ = function() {
    this.tableRowCounts = null;
  };
  MediaHistoryStats.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStats.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryStats.tableRowCounts
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.String, codec.Int32, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStats.encodedSize = codec.kStructHeaderSize + 8;

  MediaHistoryStats.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStats();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tableRowCounts =
        decoder.decodeMapPointer(codec.String, codec.Int32);
    return val;
  };

  MediaHistoryStats.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStats.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.String, codec.Int32, val.tableRowCounts);
  };
  function MediaHistoryOriginRow(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryOriginRow.prototype.initDefaults_ = function() {
    this.origin = null;
    this.cachedAudioVideoWatchtime = null;
    this.actualAudioVideoWatchtime = null;
    this.lastUpdatedTime = 0;
  };
  MediaHistoryOriginRow.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryOriginRow.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryOriginRow.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryOriginRow.cachedAudioVideoWatchtime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryOriginRow.actualAudioVideoWatchtime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaHistoryOriginRow.encodedSize = codec.kStructHeaderSize + 32;

  MediaHistoryOriginRow.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryOriginRow();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    val.cachedAudioVideoWatchtime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.actualAudioVideoWatchtime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.lastUpdatedTime =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  MediaHistoryOriginRow.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryOriginRow.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeStructPointer(time$.TimeDelta, val.cachedAudioVideoWatchtime);
    encoder.encodeStructPointer(time$.TimeDelta, val.actualAudioVideoWatchtime);
    encoder.encodeStruct(codec.Double, val.lastUpdatedTime);
  };
  function MediaHistoryPlaybackRow(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryPlaybackRow.prototype.initDefaults_ = function() {
    this.url = null;
    this.hasAudio = false;
    this.hasVideo = false;
    this.watchtime = null;
    this.lastUpdatedTime = 0;
  };
  MediaHistoryPlaybackRow.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryPlaybackRow.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryPlaybackRow.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate MediaHistoryPlaybackRow.watchtime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaHistoryPlaybackRow.encodedSize = codec.kStructHeaderSize + 32;

  MediaHistoryPlaybackRow.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryPlaybackRow();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    packed = decoder.readUint8();
    val.hasAudio = (packed >> 0) & 1 ? true : false;
    val.hasVideo = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.watchtime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.lastUpdatedTime =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  MediaHistoryPlaybackRow.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryPlaybackRow.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    packed = 0;
    packed |= (val.hasAudio & 1) << 0
    packed |= (val.hasVideo & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.TimeDelta, val.watchtime);
    encoder.encodeStruct(codec.Double, val.lastUpdatedTime);
  };
  function MediaHistoryPlaybackSessionRow(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryPlaybackSessionRow.prototype.initDefaults_ = function() {
    this.id = 0;
    this.url = null;
    this.duration = null;
    this.position = null;
    this.metadata = null;
    this.artwork = null;
    this.lastUpdatedTime = 0;
  };
  MediaHistoryPlaybackSessionRow.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryPlaybackSessionRow.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MediaHistoryPlaybackSessionRow.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryPlaybackSessionRow.duration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryPlaybackSessionRow.position
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryPlaybackSessionRow.metadata
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, media_session$.MediaMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryPlaybackSessionRow.artwork
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 8, new codec.PointerTo(media_session$.MediaImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaHistoryPlaybackSessionRow.encodedSize = codec.kStructHeaderSize + 56;

  MediaHistoryPlaybackSessionRow.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryPlaybackSessionRow();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.duration =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.position =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.metadata =
        decoder.decodeStructPointer(media_session$.MediaMetadata);
    val.artwork =
        decoder.decodeArrayPointer(new codec.PointerTo(media_session$.MediaImage));
    val.lastUpdatedTime =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  MediaHistoryPlaybackSessionRow.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryPlaybackSessionRow.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.TimeDelta, val.duration);
    encoder.encodeStructPointer(time$.TimeDelta, val.position);
    encoder.encodeStructPointer(media_session$.MediaMetadata, val.metadata);
    encoder.encodeArrayPointer(new codec.PointerTo(media_session$.MediaImage), val.artwork);
    encoder.encodeStruct(codec.Double, val.lastUpdatedTime);
  };
  function MediaHistoryStore_GetMediaHistoryStats_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryStats_Params.prototype.initDefaults_ = function() {
  };
  MediaHistoryStore_GetMediaHistoryStats_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryStats_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryStats_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaHistoryStore_GetMediaHistoryStats_Params.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryStats_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaHistoryStore_GetMediaHistoryStats_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryStats_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaHistoryStore_GetMediaHistoryStats_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryStats_ResponseParams.prototype.initDefaults_ = function() {
    this.stats = null;
  };
  MediaHistoryStore_GetMediaHistoryStats_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryStats_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryStore_GetMediaHistoryStats_ResponseParams.stats
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MediaHistoryStats, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryStats_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaHistoryStore_GetMediaHistoryStats_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryStats_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stats =
        decoder.decodeStructPointer(MediaHistoryStats);
    return val;
  };

  MediaHistoryStore_GetMediaHistoryStats_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryStats_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MediaHistoryStats, val.stats);
  };
  function MediaHistoryStore_GetMediaHistoryOriginRows_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryOriginRows_Params.prototype.initDefaults_ = function() {
  };
  MediaHistoryStore_GetMediaHistoryOriginRows_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryOriginRows_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryOriginRows_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaHistoryStore_GetMediaHistoryOriginRows_Params.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryOriginRows_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaHistoryStore_GetMediaHistoryOriginRows_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryOriginRows_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.prototype.initDefaults_ = function() {
    this.rows = null;
  };
  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.rows
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(MediaHistoryOriginRow), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rows =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaHistoryOriginRow));
    return val;
  };

  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaHistoryOriginRow), val.rows);
  };
  function MediaHistoryStore_GetMediaHistoryPlaybackRows_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.prototype.initDefaults_ = function() {
  };
  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryPlaybackRows_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.prototype.initDefaults_ = function() {
    this.rows = null;
  };
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.rows
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(MediaHistoryPlaybackRow), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rows =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaHistoryPlaybackRow));
    return val;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaHistoryPlaybackRow), val.rows);
  };
  function MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.prototype.initDefaults_ = function() {
  };
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.prototype.initDefaults_ = function() {
    this.rows = null;
  };
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.rows
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(MediaHistoryPlaybackSessionRow), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rows =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaHistoryPlaybackSessionRow));
    return val;
  };

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaHistoryPlaybackSessionRow), val.rows);
  };
  var kMediaHistoryStore_GetMediaHistoryStats_Name = 71093678;
  var kMediaHistoryStore_GetMediaHistoryOriginRows_Name = 1430395797;
  var kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name = 196449392;
  var kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name = 1141177676;

  function MediaHistoryStorePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaHistoryStore,
                                                   handleOrPtrInfo);
  }

  function MediaHistoryStoreAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaHistoryStore, associatedInterfacePtrInfo);
  }

  MediaHistoryStoreAssociatedPtr.prototype =
      Object.create(MediaHistoryStorePtr.prototype);
  MediaHistoryStoreAssociatedPtr.prototype.constructor =
      MediaHistoryStoreAssociatedPtr;

  function MediaHistoryStoreProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaHistoryStorePtr.prototype.getMediaHistoryStats = function() {
    return MediaHistoryStoreProxy.prototype.getMediaHistoryStats
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaHistoryStoreProxy.prototype.getMediaHistoryStats = function() {
    var params_ = new MediaHistoryStore_GetMediaHistoryStats_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaHistoryStore_GetMediaHistoryStats_Name,
          codec.align(MediaHistoryStore_GetMediaHistoryStats_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaHistoryStore_GetMediaHistoryStats_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaHistoryStore_GetMediaHistoryStats_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaHistoryStorePtr.prototype.getMediaHistoryOriginRows = function() {
    return MediaHistoryStoreProxy.prototype.getMediaHistoryOriginRows
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaHistoryStoreProxy.prototype.getMediaHistoryOriginRows = function() {
    var params_ = new MediaHistoryStore_GetMediaHistoryOriginRows_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaHistoryStore_GetMediaHistoryOriginRows_Name,
          codec.align(MediaHistoryStore_GetMediaHistoryOriginRows_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaHistoryStore_GetMediaHistoryOriginRows_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaHistoryStorePtr.prototype.getMediaHistoryPlaybackRows = function() {
    return MediaHistoryStoreProxy.prototype.getMediaHistoryPlaybackRows
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaHistoryStoreProxy.prototype.getMediaHistoryPlaybackRows = function() {
    var params_ = new MediaHistoryStore_GetMediaHistoryPlaybackRows_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name,
          codec.align(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaHistoryStorePtr.prototype.getMediaHistoryPlaybackSessionRows = function() {
    return MediaHistoryStoreProxy.prototype.getMediaHistoryPlaybackSessionRows
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaHistoryStoreProxy.prototype.getMediaHistoryPlaybackSessionRows = function() {
    var params_ = new MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name,
          codec.align(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function MediaHistoryStoreStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaHistoryStoreStub.prototype.getMediaHistoryStats = function() {
    return this.delegate_ && this.delegate_.getMediaHistoryStats && this.delegate_.getMediaHistoryStats();
  }
  MediaHistoryStoreStub.prototype.getMediaHistoryOriginRows = function() {
    return this.delegate_ && this.delegate_.getMediaHistoryOriginRows && this.delegate_.getMediaHistoryOriginRows();
  }
  MediaHistoryStoreStub.prototype.getMediaHistoryPlaybackRows = function() {
    return this.delegate_ && this.delegate_.getMediaHistoryPlaybackRows && this.delegate_.getMediaHistoryPlaybackRows();
  }
  MediaHistoryStoreStub.prototype.getMediaHistoryPlaybackSessionRows = function() {
    return this.delegate_ && this.delegate_.getMediaHistoryPlaybackSessionRows && this.delegate_.getMediaHistoryPlaybackSessionRows();
  }

  MediaHistoryStoreStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  MediaHistoryStoreStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaHistoryStore_GetMediaHistoryStats_Name:
      var params = reader.decodeStruct(MediaHistoryStore_GetMediaHistoryStats_Params);
      this.getMediaHistoryStats().then(function(response) {
        var responseParams =
            new MediaHistoryStore_GetMediaHistoryStats_ResponseParams();
        responseParams.stats = response.stats;
        var builder = new codec.MessageV1Builder(
            kMediaHistoryStore_GetMediaHistoryStats_Name,
            codec.align(MediaHistoryStore_GetMediaHistoryStats_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaHistoryStore_GetMediaHistoryStats_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaHistoryStore_GetMediaHistoryOriginRows_Name:
      var params = reader.decodeStruct(MediaHistoryStore_GetMediaHistoryOriginRows_Params);
      this.getMediaHistoryOriginRows().then(function(response) {
        var responseParams =
            new MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams();
        responseParams.rows = response.rows;
        var builder = new codec.MessageV1Builder(
            kMediaHistoryStore_GetMediaHistoryOriginRows_Name,
            codec.align(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name:
      var params = reader.decodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params);
      this.getMediaHistoryPlaybackRows().then(function(response) {
        var responseParams =
            new MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams();
        responseParams.rows = response.rows;
        var builder = new codec.MessageV1Builder(
            kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name,
            codec.align(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name:
      var params = reader.decodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params);
      this.getMediaHistoryPlaybackSessionRows().then(function(response) {
        var responseParams =
            new MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams();
        responseParams.rows = response.rows;
        var builder = new codec.MessageV1Builder(
            kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name,
            codec.align(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateMediaHistoryStoreRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaHistoryStore_GetMediaHistoryStats_Name:
        if (message.expectsResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryStats_Params;
      break;
      case kMediaHistoryStore_GetMediaHistoryOriginRows_Name:
        if (message.expectsResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryOriginRows_Params;
      break;
      case kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name:
        if (message.expectsResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryPlaybackRows_Params;
      break;
      case kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name:
        if (message.expectsResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaHistoryStoreResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kMediaHistoryStore_GetMediaHistoryStats_Name:
        if (message.isResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryStats_ResponseParams;
        break;
      case kMediaHistoryStore_GetMediaHistoryOriginRows_Name:
        if (message.isResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams;
        break;
      case kMediaHistoryStore_GetMediaHistoryPlaybackRows_Name:
        if (message.isResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams;
        break;
      case kMediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Name:
        if (message.isResponse())
          paramsClass = MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var MediaHistoryStore = {
    name: 'media_history.mojom.MediaHistoryStore',
    kVersion: 0,
    ptrClass: MediaHistoryStorePtr,
    proxyClass: MediaHistoryStoreProxy,
    stubClass: MediaHistoryStoreStub,
    validateRequest: validateMediaHistoryStoreRequest,
    validateResponse: validateMediaHistoryStoreResponse,
  };
  MediaHistoryStoreStub.prototype.validator = validateMediaHistoryStoreRequest;
  MediaHistoryStoreProxy.prototype.validator = validateMediaHistoryStoreResponse;
  exports.MediaHistoryStats = MediaHistoryStats;
  exports.MediaHistoryOriginRow = MediaHistoryOriginRow;
  exports.MediaHistoryPlaybackRow = MediaHistoryPlaybackRow;
  exports.MediaHistoryPlaybackSessionRow = MediaHistoryPlaybackSessionRow;
  exports.MediaHistoryStore = MediaHistoryStore;
  exports.MediaHistoryStorePtr = MediaHistoryStorePtr;
  exports.MediaHistoryStoreAssociatedPtr = MediaHistoryStoreAssociatedPtr;
})();