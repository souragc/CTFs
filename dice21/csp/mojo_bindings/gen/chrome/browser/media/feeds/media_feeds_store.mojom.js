// chrome/browser/media/feeds/media_feeds_store.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/media/feeds/media_feeds_store.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mediaFeeds.mojom');
  var media_session$ =
      mojo.internal.exposeNamespace('mediaSession.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/media_session/public/mojom/media_session.mojom', '../../../../services/media_session/public/mojom/media_session.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../url/mojom/origin.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }


  var FetchResult = {};
  FetchResult.kNone = 0;
  FetchResult.kSuccess = 1;
  FetchResult.kFailedBackendError = 2;
  FetchResult.kFailedNetworkError = 3;
  FetchResult.kInvalidFeed = 4;
  FetchResult.kFailedDueToResetWhileInflight = 5;
  FetchResult.MIN_VALUE = 0,
  FetchResult.MAX_VALUE = 5,

  FetchResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  FetchResult.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ResetReason = {};
  ResetReason.kNone = 0;
  ResetReason.kCookies = 1;
  ResetReason.kVisit = 2;
  ResetReason.kCache = 3;
  ResetReason.MIN_VALUE = 0,
  ResetReason.MAX_VALUE = 3,

  ResetReason.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ResetReason.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var FeedUserStatus = {};
  FeedUserStatus.kAuto = 0;
  FeedUserStatus.kDisabled = 1;
  FeedUserStatus.kEnabled = 2;
  FeedUserStatus.MIN_VALUE = 0,
  FeedUserStatus.MAX_VALUE = 2,

  FeedUserStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  FeedUserStatus.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var MediaFeedItemType = {};
  MediaFeedItemType.kVideo = 1;
  MediaFeedItemType.kTVSeries = 2;
  MediaFeedItemType.kMovie = 4;
  MediaFeedItemType.MIN_VALUE = 1,
  MediaFeedItemType.MAX_VALUE = 4,

  MediaFeedItemType.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    }
    return false;
  };

  MediaFeedItemType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var MediaFeedItemActionStatus = {};
  MediaFeedItemActionStatus.kUnknown = 0;
  MediaFeedItemActionStatus.kActive = 1;
  MediaFeedItemActionStatus.kPotential = 2;
  MediaFeedItemActionStatus.kCompleted = 3;
  MediaFeedItemActionStatus.MIN_VALUE = 0,
  MediaFeedItemActionStatus.MAX_VALUE = 3,

  MediaFeedItemActionStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  MediaFeedItemActionStatus.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var InteractionCounterType = {};
  InteractionCounterType.kWatch = 0;
  InteractionCounterType.kLike = 1;
  InteractionCounterType.kDislike = 2;
  InteractionCounterType.MIN_VALUE = 0,
  InteractionCounterType.MAX_VALUE = 2,

  InteractionCounterType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  InteractionCounterType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SafeSearchResult = {};
  SafeSearchResult.kUnknown = 0;
  SafeSearchResult.kSafe = 1;
  SafeSearchResult.kUnsafe = 2;
  SafeSearchResult.MIN_VALUE = 0,
  SafeSearchResult.MAX_VALUE = 2,

  SafeSearchResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  SafeSearchResult.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ContentAttribute = {};
  ContentAttribute.kUnknown = 0;
  ContentAttribute.kIconic = 1;
  ContentAttribute.kSceneStill = 2;
  ContentAttribute.kPoster = 3;
  ContentAttribute.kBackground = 4;
  ContentAttribute.kForDarkBackground = 5;
  ContentAttribute.kForLightBackground = 6;
  ContentAttribute.kCentered = 7;
  ContentAttribute.kRightCentered = 8;
  ContentAttribute.kLeftCentered = 9;
  ContentAttribute.kHasTransparentBackground = 10;
  ContentAttribute.kHasTitle = 11;
  ContentAttribute.kNoTitle = 12;
  ContentAttribute.MIN_VALUE = 0,
  ContentAttribute.MAX_VALUE = 12,

  ContentAttribute.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    }
    return false;
  };

  ContentAttribute.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var IsFamilyFriendly = {};
  IsFamilyFriendly.kUnknown = 0;
  IsFamilyFriendly.kYes = 1;
  IsFamilyFriendly.kNo = 2;
  IsFamilyFriendly.MIN_VALUE = 0,
  IsFamilyFriendly.MAX_VALUE = 2,

  IsFamilyFriendly.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  IsFamilyFriendly.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function MediaFeed(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeed.prototype.initDefaults_ = function() {
    this.id = 0;
    this.url = null;
    this.lastDiscoveryTime = null;
    this.lastFetchTime = null;
    this.userStatus = 0;
    this.lastFetchResult = 0;
    this.fetchFailedCount = 0;
    this.lastFetchTimeNotCacheHit = null;
    this.lastFetchItemCount = 0;
    this.lastFetchPlayNextCount = 0;
    this.lastFetchContentTypes = 0;
    this.logos = null;
    this.displayName = null;
    this.originAudioVideoWatchtimePercentile = 0;
    this.lastDisplayTime = null;
    this.lastFetchSafeItemCount = 0;
    this.resetReason = 0;
    this.safeSearchResult = 0;
    this.resetToken = null;
    this.userIdentifier = null;
    this.cookieNameFilter = null;
    this.aggregateWatchtime = null;
    this.favicon = null;
  };
  MediaFeed.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeed.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 176}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MediaFeed.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.lastDiscoveryTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.lastFetchTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.Time, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.userStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 32, FeedUserStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.lastFetchResult
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, FetchResult);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MediaFeed.lastFetchTimeNotCacheHit
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, time$.Time, true);
    if (err !== validator.validationError.NONE)
        return err;





    // validate MediaFeed.logos
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 80, 8, new codec.PointerTo(MediaImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.displayName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 88, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate MediaFeed.lastDisplayTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, time$.Time, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MediaFeed.resetReason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 120, ResetReason);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.resetToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 128, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.userIdentifier
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 136, UserIdentifier, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.cookieNameFilter
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 144, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.safeSearchResult
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 124, SafeSearchResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.aggregateWatchtime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 152, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeed.favicon
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 160, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeed.encodedSize = codec.kStructHeaderSize + 168;

  MediaFeed.decode = function(decoder) {
    var packed;
    var val = new MediaFeed();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.lastDiscoveryTime =
        decoder.decodeStructPointer(time$.Time);
    val.lastFetchTime =
        decoder.decodeStructPointer(time$.Time);
    val.userStatus =
        decoder.decodeStruct(codec.Int32);
    val.lastFetchResult =
        decoder.decodeStruct(codec.Int32);
    val.fetchFailedCount =
        decoder.decodeStruct(codec.Int64);
    val.lastFetchTimeNotCacheHit =
        decoder.decodeStructPointer(time$.Time);
    val.lastFetchItemCount =
        decoder.decodeStruct(codec.Int64);
    val.lastFetchPlayNextCount =
        decoder.decodeStruct(codec.Int64);
    val.lastFetchContentTypes =
        decoder.decodeStruct(codec.Int64);
    val.logos =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaImage));
    val.displayName =
        decoder.decodeStruct(codec.String);
    val.originAudioVideoWatchtimePercentile =
        decoder.decodeStruct(codec.Double);
    val.lastDisplayTime =
        decoder.decodeStructPointer(time$.Time);
    val.lastFetchSafeItemCount =
        decoder.decodeStruct(codec.Int64);
    val.resetReason =
        decoder.decodeStruct(codec.Int32);
    val.safeSearchResult =
        decoder.decodeStruct(codec.Int32);
    val.resetToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.userIdentifier =
        decoder.decodeStructPointer(UserIdentifier);
    val.cookieNameFilter =
        decoder.decodeStruct(codec.String);
    val.aggregateWatchtime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.favicon =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  MediaFeed.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeed.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.Time, val.lastDiscoveryTime);
    encoder.encodeStructPointer(time$.Time, val.lastFetchTime);
    encoder.encodeStruct(codec.Int32, val.userStatus);
    encoder.encodeStruct(codec.Int32, val.lastFetchResult);
    encoder.encodeStruct(codec.Int64, val.fetchFailedCount);
    encoder.encodeStructPointer(time$.Time, val.lastFetchTimeNotCacheHit);
    encoder.encodeStruct(codec.Int64, val.lastFetchItemCount);
    encoder.encodeStruct(codec.Int64, val.lastFetchPlayNextCount);
    encoder.encodeStruct(codec.Int64, val.lastFetchContentTypes);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaImage), val.logos);
    encoder.encodeStruct(codec.String, val.displayName);
    encoder.encodeStruct(codec.Double, val.originAudioVideoWatchtimePercentile);
    encoder.encodeStructPointer(time$.Time, val.lastDisplayTime);
    encoder.encodeStruct(codec.Int64, val.lastFetchSafeItemCount);
    encoder.encodeStruct(codec.Int32, val.resetReason);
    encoder.encodeStruct(codec.Int32, val.safeSearchResult);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.resetToken);
    encoder.encodeStructPointer(UserIdentifier, val.userIdentifier);
    encoder.encodeStruct(codec.String, val.cookieNameFilter);
    encoder.encodeStructPointer(time$.TimeDelta, val.aggregateWatchtime);
    encoder.encodeStructPointer(url$.Url, val.favicon);
  };
  function UserIdentifier(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UserIdentifier.prototype.initDefaults_ = function() {
    this.name = null;
    this.email = null;
    this.image = null;
  };
  UserIdentifier.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UserIdentifier.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UserIdentifier.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate UserIdentifier.email
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate UserIdentifier.image
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, MediaImage, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UserIdentifier.encodedSize = codec.kStructHeaderSize + 24;

  UserIdentifier.decode = function(decoder) {
    var packed;
    var val = new UserIdentifier();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.email =
        decoder.decodeStruct(codec.NullableString);
    val.image =
        decoder.decodeStructPointer(MediaImage);
    return val;
  };

  UserIdentifier.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UserIdentifier.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.NullableString, val.email);
    encoder.encodeStructPointer(MediaImage, val.image);
  };
  function ContentRating(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentRating.prototype.initDefaults_ = function() {
    this.agency = null;
    this.value = null;
  };
  ContentRating.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentRating.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentRating.agency
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentRating.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentRating.encodedSize = codec.kStructHeaderSize + 16;

  ContentRating.decode = function(decoder) {
    var packed;
    var val = new ContentRating();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.agency =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ContentRating.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentRating.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.agency);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Author(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Author.prototype.initDefaults_ = function() {
    this.name = null;
    this.url = null;
  };
  Author.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Author.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Author.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Author.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Author.encodedSize = codec.kStructHeaderSize + 16;

  Author.decode = function(decoder) {
    var packed;
    var val = new Author();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  Author.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Author.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function Identifier(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  Identifier.Type = {};
  Identifier.Type.kTMSRootId = 0;
  Identifier.Type.kTMSId = 1;
  Identifier.Type.kPartnerId = 2;
  Identifier.Type.MIN_VALUE = 0,
  Identifier.Type.MAX_VALUE = 2,

  Identifier.Type.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  Identifier.Type.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  Identifier.prototype.initDefaults_ = function() {
    this.type = 0;
    this.value = null;
  };
  Identifier.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Identifier.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Identifier.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Identifier.Type);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Identifier.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Identifier.encodedSize = codec.kStructHeaderSize + 16;

  Identifier.decode = function(decoder) {
    var packed;
    var val = new Identifier();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Identifier.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Identifier.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.value);
  };
  function Action(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Action.prototype.initDefaults_ = function() {
    this.url = null;
    this.startTime = null;
  };
  Action.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Action.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Action.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Action.startTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Action.encodedSize = codec.kStructHeaderSize + 16;

  Action.decode = function(decoder) {
    var packed;
    var val = new Action();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.startTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  Action.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Action.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.TimeDelta, val.startTime);
  };
  function PlayNextCandidate(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PlayNextCandidate.prototype.initDefaults_ = function() {
    this.name = null;
    this.seasonNumber = 0;
    this.episodeNumber = 0;
    this.action = null;
    this.duration = null;
    this.identifiers = null;
    this.images = null;
  };
  PlayNextCandidate.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PlayNextCandidate.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PlayNextCandidate.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate PlayNextCandidate.action
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, Action, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PlayNextCandidate.duration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PlayNextCandidate.identifiers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 8, new codec.PointerTo(Identifier), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PlayNextCandidate.images
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(MediaImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PlayNextCandidate.encodedSize = codec.kStructHeaderSize + 56;

  PlayNextCandidate.decode = function(decoder) {
    var packed;
    var val = new PlayNextCandidate();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.seasonNumber =
        decoder.decodeStruct(codec.Int64);
    val.episodeNumber =
        decoder.decodeStruct(codec.Int64);
    val.action =
        decoder.decodeStructPointer(Action);
    val.duration =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.identifiers =
        decoder.decodeArrayPointer(new codec.PointerTo(Identifier));
    val.images =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaImage));
    return val;
  };

  PlayNextCandidate.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PlayNextCandidate.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Int64, val.seasonNumber);
    encoder.encodeStruct(codec.Int64, val.episodeNumber);
    encoder.encodeStructPointer(Action, val.action);
    encoder.encodeStructPointer(time$.TimeDelta, val.duration);
    encoder.encodeArrayPointer(new codec.PointerTo(Identifier), val.identifiers);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaImage), val.images);
  };
  function TVEpisode(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TVEpisode.prototype.initDefaults_ = function() {
    this.name = null;
    this.episodeNumber = 0;
    this.seasonNumber = 0;
    this.duration = null;
    this.identifiers = null;
    this.live = null;
    this.images = null;
  };
  TVEpisode.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TVEpisode.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TVEpisode.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate TVEpisode.duration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TVEpisode.identifiers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(Identifier), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TVEpisode.live
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, LiveDetails, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TVEpisode.images
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(MediaImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TVEpisode.encodedSize = codec.kStructHeaderSize + 56;

  TVEpisode.decode = function(decoder) {
    var packed;
    var val = new TVEpisode();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.episodeNumber =
        decoder.decodeStruct(codec.Int64);
    val.seasonNumber =
        decoder.decodeStruct(codec.Int64);
    val.duration =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.identifiers =
        decoder.decodeArrayPointer(new codec.PointerTo(Identifier));
    val.live =
        decoder.decodeStructPointer(LiveDetails);
    val.images =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaImage));
    return val;
  };

  TVEpisode.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TVEpisode.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Int64, val.episodeNumber);
    encoder.encodeStruct(codec.Int64, val.seasonNumber);
    encoder.encodeStructPointer(time$.TimeDelta, val.duration);
    encoder.encodeArrayPointer(new codec.PointerTo(Identifier), val.identifiers);
    encoder.encodeStructPointer(LiveDetails, val.live);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaImage), val.images);
  };
  function LiveDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LiveDetails.prototype.initDefaults_ = function() {
    this.startTime = null;
    this.endTime = null;
  };
  LiveDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LiveDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LiveDetails.startTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LiveDetails.endTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.Time, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LiveDetails.encodedSize = codec.kStructHeaderSize + 16;

  LiveDetails.decode = function(decoder) {
    var packed;
    var val = new LiveDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.startTime =
        decoder.decodeStructPointer(time$.Time);
    val.endTime =
        decoder.decodeStructPointer(time$.Time);
    return val;
  };

  LiveDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LiveDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.Time, val.startTime);
    encoder.encodeStructPointer(time$.Time, val.endTime);
  };
  function MediaImage(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaImage.prototype.initDefaults_ = function() {
    this.src = null;
    this.size = null;
    this.contentAttributes = null;
  };
  MediaImage.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaImage.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaImage.src
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaImage.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaImage.contentAttributes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, new codec.Enum(ContentAttribute), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaImage.encodedSize = codec.kStructHeaderSize + 24;

  MediaImage.decode = function(decoder) {
    var packed;
    var val = new MediaImage();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.src =
        decoder.decodeStructPointer(url$.Url);
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    val.contentAttributes =
        decoder.decodeArrayPointer(new codec.Enum(ContentAttribute));
    return val;
  };

  MediaImage.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaImage.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.src);
    encoder.encodeStructPointer(geometry$.Size, val.size);
    encoder.encodeArrayPointer(new codec.Enum(ContentAttribute), val.contentAttributes);
  };
  function MediaFeedItem(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedItem.prototype.initDefaults_ = function() {
    this.id = 0;
    this.type = 0;
    this.isFamilyFriendly = 0;
    this.name = null;
    this.author = null;
    this.datePublished = null;
    this.actionStatus = 0;
    this.clicked = false;
    this.action = null;
    this.interactionCounters = null;
    this.contentRatings = null;
    this.genre = null;
    this.duration = null;
    this.live = null;
    this.tvEpisode = null;
    this.playNextCandidate = null;
    this.identifiers = null;
    this.shownCount = 0;
    this.images = null;
    this.safeSearchResult = 0;
  };
  MediaFeedItem.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedItem.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 152}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MediaFeedItem.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, MediaFeedItemType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.name
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.author
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, Author, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.datePublished
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.isFamilyFriendly
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, IsFamilyFriendly);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.actionStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 40, MediaFeedItemActionStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.action
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, Action, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.interactionCounters
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 56, false, new codec.Enum(InteractionCounterType), codec.Uint64, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.contentRatings
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 64, 8, new codec.PointerTo(ContentRating), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.genre
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 72, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.duration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.live
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, LiveDetails, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.tvEpisode
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, TVEpisode, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.playNextCandidate
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, PlayNextCandidate, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.identifiers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 112, 8, new codec.PointerTo(Identifier), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;




    // validate MediaFeedItem.images
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 128, 8, new codec.PointerTo(MediaImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedItem.safeSearchResult
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 136, SafeSearchResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedItem.encodedSize = codec.kStructHeaderSize + 144;

  MediaFeedItem.decode = function(decoder) {
    var packed;
    var val = new MediaFeedItem();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.type =
        decoder.decodeStruct(codec.Int32);
    val.isFamilyFriendly =
        decoder.decodeStruct(codec.Int32);
    val.name =
        decoder.decodeStructPointer(string16$.String16);
    val.author =
        decoder.decodeStructPointer(Author);
    val.datePublished =
        decoder.decodeStructPointer(time$.Time);
    val.actionStatus =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.clicked = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.action =
        decoder.decodeStructPointer(Action);
    val.interactionCounters =
        decoder.decodeMapPointer(new codec.Enum(InteractionCounterType), codec.Uint64);
    val.contentRatings =
        decoder.decodeArrayPointer(new codec.PointerTo(ContentRating));
    val.genre =
        decoder.decodeArrayPointer(codec.String);
    val.duration =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.live =
        decoder.decodeStructPointer(LiveDetails);
    val.tvEpisode =
        decoder.decodeStructPointer(TVEpisode);
    val.playNextCandidate =
        decoder.decodeStructPointer(PlayNextCandidate);
    val.identifiers =
        decoder.decodeArrayPointer(new codec.PointerTo(Identifier));
    val.shownCount =
        decoder.decodeStruct(codec.Uint64);
    val.images =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaImage));
    val.safeSearchResult =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaFeedItem.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedItem.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.encodeStruct(codec.Int32, val.isFamilyFriendly);
    encoder.encodeStructPointer(string16$.String16, val.name);
    encoder.encodeStructPointer(Author, val.author);
    encoder.encodeStructPointer(time$.Time, val.datePublished);
    encoder.encodeStruct(codec.Int32, val.actionStatus);
    packed = 0;
    packed |= (val.clicked & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(Action, val.action);
    encoder.encodeMapPointer(new codec.Enum(InteractionCounterType), codec.Uint64, val.interactionCounters);
    encoder.encodeArrayPointer(new codec.PointerTo(ContentRating), val.contentRatings);
    encoder.encodeArrayPointer(codec.String, val.genre);
    encoder.encodeStructPointer(time$.TimeDelta, val.duration);
    encoder.encodeStructPointer(LiveDetails, val.live);
    encoder.encodeStructPointer(TVEpisode, val.tvEpisode);
    encoder.encodeStructPointer(PlayNextCandidate, val.playNextCandidate);
    encoder.encodeArrayPointer(new codec.PointerTo(Identifier), val.identifiers);
    encoder.encodeStruct(codec.Uint64, val.shownCount);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaImage), val.images);
    encoder.encodeStruct(codec.Int32, val.safeSearchResult);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DebugInformation(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DebugInformation.prototype.initDefaults_ = function() {
    this.safeSearchFeatureEnabled = false;
    this.safeSearchPrefValue = false;
    this.backgroundFetchingFeatureEnabled = false;
    this.backgroundFetchingPrefValue = false;
  };
  DebugInformation.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DebugInformation.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  DebugInformation.encodedSize = codec.kStructHeaderSize + 8;

  DebugInformation.decode = function(decoder) {
    var packed;
    var val = new DebugInformation();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.safeSearchFeatureEnabled = (packed >> 0) & 1 ? true : false;
    val.safeSearchPrefValue = (packed >> 1) & 1 ? true : false;
    val.backgroundFetchingFeatureEnabled = (packed >> 2) & 1 ? true : false;
    val.backgroundFetchingPrefValue = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DebugInformation.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DebugInformation.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.safeSearchFeatureEnabled & 1) << 0
    packed |= (val.safeSearchPrefValue & 1) << 1
    packed |= (val.backgroundFetchingFeatureEnabled & 1) << 2
    packed |= (val.backgroundFetchingPrefValue & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaFeedsStore_GetDebugInformation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_GetDebugInformation_Params.prototype.initDefaults_ = function() {
  };
  MediaFeedsStore_GetDebugInformation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_GetDebugInformation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_GetDebugInformation_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaFeedsStore_GetDebugInformation_Params.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_GetDebugInformation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaFeedsStore_GetDebugInformation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_GetDebugInformation_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaFeedsStore_GetDebugInformation_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_GetDebugInformation_ResponseParams.prototype.initDefaults_ = function() {
    this.info = null;
  };
  MediaFeedsStore_GetDebugInformation_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_GetDebugInformation_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedsStore_GetDebugInformation_ResponseParams.info
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DebugInformation, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_GetDebugInformation_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_GetDebugInformation_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_GetDebugInformation_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.info =
        decoder.decodeStructPointer(DebugInformation);
    return val;
  };

  MediaFeedsStore_GetDebugInformation_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_GetDebugInformation_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DebugInformation, val.info);
  };
  function MediaFeedsStore_SetSafeSearchEnabledPref_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_SetSafeSearchEnabledPref_Params.prototype.initDefaults_ = function() {
    this.value = false;
  };
  MediaFeedsStore_SetSafeSearchEnabledPref_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_SetSafeSearchEnabledPref_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaFeedsStore_SetSafeSearchEnabledPref_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_SetSafeSearchEnabledPref_Params.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_SetSafeSearchEnabledPref_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaFeedsStore_SetSafeSearchEnabledPref_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_SetSafeSearchEnabledPref_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.prototype.initDefaults_ = function() {
  };
  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaFeedsStore_SetBackgroundFetchingPref_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_SetBackgroundFetchingPref_Params.prototype.initDefaults_ = function() {
    this.value = false;
  };
  MediaFeedsStore_SetBackgroundFetchingPref_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_SetBackgroundFetchingPref_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaFeedsStore_SetBackgroundFetchingPref_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_SetBackgroundFetchingPref_Params.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_SetBackgroundFetchingPref_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaFeedsStore_SetBackgroundFetchingPref_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_SetBackgroundFetchingPref_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.prototype.initDefaults_ = function() {
  };
  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaFeedsStore_GetMediaFeeds_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_GetMediaFeeds_Params.prototype.initDefaults_ = function() {
  };
  MediaFeedsStore_GetMediaFeeds_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_GetMediaFeeds_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_GetMediaFeeds_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaFeedsStore_GetMediaFeeds_Params.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_GetMediaFeeds_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaFeedsStore_GetMediaFeeds_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_GetMediaFeeds_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaFeedsStore_GetMediaFeeds_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_GetMediaFeeds_ResponseParams.prototype.initDefaults_ = function() {
    this.feeds = null;
  };
  MediaFeedsStore_GetMediaFeeds_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_GetMediaFeeds_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedsStore_GetMediaFeeds_ResponseParams.feeds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(MediaFeed), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_GetMediaFeeds_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_GetMediaFeeds_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_GetMediaFeeds_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.feeds =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaFeed));
    return val;
  };

  MediaFeedsStore_GetMediaFeeds_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_GetMediaFeeds_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaFeed), val.feeds);
  };
  function MediaFeedsStore_GetItemsForMediaFeed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_GetItemsForMediaFeed_Params.prototype.initDefaults_ = function() {
    this.feedId = 0;
  };
  MediaFeedsStore_GetItemsForMediaFeed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_GetItemsForMediaFeed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaFeedsStore_GetItemsForMediaFeed_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_GetItemsForMediaFeed_Params.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_GetItemsForMediaFeed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.feedId =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  MediaFeedsStore_GetItemsForMediaFeed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_GetItemsForMediaFeed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.feedId);
  };
  function MediaFeedsStore_GetItemsForMediaFeed_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.prototype.initDefaults_ = function() {
    this.items = null;
  };
  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.items
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(MediaFeedItem), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_GetItemsForMediaFeed_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.items =
        decoder.decodeArrayPointer(new codec.PointerTo(MediaFeedItem));
    return val;
  };

  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(MediaFeedItem), val.items);
  };
  function MediaFeedsStore_FetchMediaFeed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_FetchMediaFeed_Params.prototype.initDefaults_ = function() {
    this.feedId = 0;
  };
  MediaFeedsStore_FetchMediaFeed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_FetchMediaFeed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaFeedsStore_FetchMediaFeed_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_FetchMediaFeed_Params.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_FetchMediaFeed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.feedId =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  MediaFeedsStore_FetchMediaFeed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_FetchMediaFeed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.feedId);
  };
  function MediaFeedsStore_FetchMediaFeed_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaFeedsStore_FetchMediaFeed_ResponseParams.prototype.initDefaults_ = function() {
    this.logs = null;
  };
  MediaFeedsStore_FetchMediaFeed_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaFeedsStore_FetchMediaFeed_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaFeedsStore_FetchMediaFeed_ResponseParams.logs
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaFeedsStore_FetchMediaFeed_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MediaFeedsStore_FetchMediaFeed_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MediaFeedsStore_FetchMediaFeed_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.logs =
        decoder.decodeStruct(codec.String);
    return val;
  };

  MediaFeedsStore_FetchMediaFeed_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaFeedsStore_FetchMediaFeed_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.logs);
  };
  var kMediaFeedsStore_GetDebugInformation_Name = 675479748;
  var kMediaFeedsStore_SetSafeSearchEnabledPref_Name = 623422130;
  var kMediaFeedsStore_SetBackgroundFetchingPref_Name = 226664697;
  var kMediaFeedsStore_GetMediaFeeds_Name = 581257176;
  var kMediaFeedsStore_GetItemsForMediaFeed_Name = 1686296125;
  var kMediaFeedsStore_FetchMediaFeed_Name = 1518842486;

  function MediaFeedsStorePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaFeedsStore,
                                                   handleOrPtrInfo);
  }

  function MediaFeedsStoreAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaFeedsStore, associatedInterfacePtrInfo);
  }

  MediaFeedsStoreAssociatedPtr.prototype =
      Object.create(MediaFeedsStorePtr.prototype);
  MediaFeedsStoreAssociatedPtr.prototype.constructor =
      MediaFeedsStoreAssociatedPtr;

  function MediaFeedsStoreProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaFeedsStorePtr.prototype.getDebugInformation = function() {
    return MediaFeedsStoreProxy.prototype.getDebugInformation
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaFeedsStoreProxy.prototype.getDebugInformation = function() {
    var params_ = new MediaFeedsStore_GetDebugInformation_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaFeedsStore_GetDebugInformation_Name,
          codec.align(MediaFeedsStore_GetDebugInformation_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaFeedsStore_GetDebugInformation_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaFeedsStore_GetDebugInformation_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaFeedsStorePtr.prototype.setSafeSearchEnabledPref = function() {
    return MediaFeedsStoreProxy.prototype.setSafeSearchEnabledPref
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaFeedsStoreProxy.prototype.setSafeSearchEnabledPref = function(value) {
    var params_ = new MediaFeedsStore_SetSafeSearchEnabledPref_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaFeedsStore_SetSafeSearchEnabledPref_Name,
          codec.align(MediaFeedsStore_SetSafeSearchEnabledPref_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaFeedsStore_SetSafeSearchEnabledPref_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaFeedsStorePtr.prototype.setBackgroundFetchingPref = function() {
    return MediaFeedsStoreProxy.prototype.setBackgroundFetchingPref
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaFeedsStoreProxy.prototype.setBackgroundFetchingPref = function(value) {
    var params_ = new MediaFeedsStore_SetBackgroundFetchingPref_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaFeedsStore_SetBackgroundFetchingPref_Name,
          codec.align(MediaFeedsStore_SetBackgroundFetchingPref_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaFeedsStore_SetBackgroundFetchingPref_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaFeedsStorePtr.prototype.getMediaFeeds = function() {
    return MediaFeedsStoreProxy.prototype.getMediaFeeds
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaFeedsStoreProxy.prototype.getMediaFeeds = function() {
    var params_ = new MediaFeedsStore_GetMediaFeeds_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaFeedsStore_GetMediaFeeds_Name,
          codec.align(MediaFeedsStore_GetMediaFeeds_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaFeedsStore_GetMediaFeeds_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaFeedsStore_GetMediaFeeds_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaFeedsStorePtr.prototype.getItemsForMediaFeed = function() {
    return MediaFeedsStoreProxy.prototype.getItemsForMediaFeed
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaFeedsStoreProxy.prototype.getItemsForMediaFeed = function(feedId) {
    var params_ = new MediaFeedsStore_GetItemsForMediaFeed_Params();
    params_.feedId = feedId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaFeedsStore_GetItemsForMediaFeed_Name,
          codec.align(MediaFeedsStore_GetItemsForMediaFeed_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaFeedsStore_GetItemsForMediaFeed_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  MediaFeedsStorePtr.prototype.fetchMediaFeed = function() {
    return MediaFeedsStoreProxy.prototype.fetchMediaFeed
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaFeedsStoreProxy.prototype.fetchMediaFeed = function(feedId) {
    var params_ = new MediaFeedsStore_FetchMediaFeed_Params();
    params_.feedId = feedId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMediaFeedsStore_FetchMediaFeed_Name,
          codec.align(MediaFeedsStore_FetchMediaFeed_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MediaFeedsStore_FetchMediaFeed_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MediaFeedsStore_FetchMediaFeed_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function MediaFeedsStoreStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaFeedsStoreStub.prototype.getDebugInformation = function() {
    return this.delegate_ && this.delegate_.getDebugInformation && this.delegate_.getDebugInformation();
  }
  MediaFeedsStoreStub.prototype.setSafeSearchEnabledPref = function(value) {
    return this.delegate_ && this.delegate_.setSafeSearchEnabledPref && this.delegate_.setSafeSearchEnabledPref(value);
  }
  MediaFeedsStoreStub.prototype.setBackgroundFetchingPref = function(value) {
    return this.delegate_ && this.delegate_.setBackgroundFetchingPref && this.delegate_.setBackgroundFetchingPref(value);
  }
  MediaFeedsStoreStub.prototype.getMediaFeeds = function() {
    return this.delegate_ && this.delegate_.getMediaFeeds && this.delegate_.getMediaFeeds();
  }
  MediaFeedsStoreStub.prototype.getItemsForMediaFeed = function(feedId) {
    return this.delegate_ && this.delegate_.getItemsForMediaFeed && this.delegate_.getItemsForMediaFeed(feedId);
  }
  MediaFeedsStoreStub.prototype.fetchMediaFeed = function(feedId) {
    return this.delegate_ && this.delegate_.fetchMediaFeed && this.delegate_.fetchMediaFeed(feedId);
  }

  MediaFeedsStoreStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  MediaFeedsStoreStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaFeedsStore_GetDebugInformation_Name:
      var params = reader.decodeStruct(MediaFeedsStore_GetDebugInformation_Params);
      this.getDebugInformation().then(function(response) {
        var responseParams =
            new MediaFeedsStore_GetDebugInformation_ResponseParams();
        responseParams.info = response.info;
        var builder = new codec.MessageV1Builder(
            kMediaFeedsStore_GetDebugInformation_Name,
            codec.align(MediaFeedsStore_GetDebugInformation_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaFeedsStore_GetDebugInformation_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaFeedsStore_SetSafeSearchEnabledPref_Name:
      var params = reader.decodeStruct(MediaFeedsStore_SetSafeSearchEnabledPref_Params);
      this.setSafeSearchEnabledPref(params.value).then(function(response) {
        var responseParams =
            new MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kMediaFeedsStore_SetSafeSearchEnabledPref_Name,
            codec.align(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaFeedsStore_SetBackgroundFetchingPref_Name:
      var params = reader.decodeStruct(MediaFeedsStore_SetBackgroundFetchingPref_Params);
      this.setBackgroundFetchingPref(params.value).then(function(response) {
        var responseParams =
            new MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kMediaFeedsStore_SetBackgroundFetchingPref_Name,
            codec.align(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaFeedsStore_GetMediaFeeds_Name:
      var params = reader.decodeStruct(MediaFeedsStore_GetMediaFeeds_Params);
      this.getMediaFeeds().then(function(response) {
        var responseParams =
            new MediaFeedsStore_GetMediaFeeds_ResponseParams();
        responseParams.feeds = response.feeds;
        var builder = new codec.MessageV1Builder(
            kMediaFeedsStore_GetMediaFeeds_Name,
            codec.align(MediaFeedsStore_GetMediaFeeds_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaFeedsStore_GetMediaFeeds_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaFeedsStore_GetItemsForMediaFeed_Name:
      var params = reader.decodeStruct(MediaFeedsStore_GetItemsForMediaFeed_Params);
      this.getItemsForMediaFeed(params.feedId).then(function(response) {
        var responseParams =
            new MediaFeedsStore_GetItemsForMediaFeed_ResponseParams();
        responseParams.items = response.items;
        var builder = new codec.MessageV1Builder(
            kMediaFeedsStore_GetItemsForMediaFeed_Name,
            codec.align(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kMediaFeedsStore_FetchMediaFeed_Name:
      var params = reader.decodeStruct(MediaFeedsStore_FetchMediaFeed_Params);
      this.fetchMediaFeed(params.feedId).then(function(response) {
        var responseParams =
            new MediaFeedsStore_FetchMediaFeed_ResponseParams();
        responseParams.logs = response.logs;
        var builder = new codec.MessageV1Builder(
            kMediaFeedsStore_FetchMediaFeed_Name,
            codec.align(MediaFeedsStore_FetchMediaFeed_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MediaFeedsStore_FetchMediaFeed_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateMediaFeedsStoreRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaFeedsStore_GetDebugInformation_Name:
        if (message.expectsResponse())
          paramsClass = MediaFeedsStore_GetDebugInformation_Params;
      break;
      case kMediaFeedsStore_SetSafeSearchEnabledPref_Name:
        if (message.expectsResponse())
          paramsClass = MediaFeedsStore_SetSafeSearchEnabledPref_Params;
      break;
      case kMediaFeedsStore_SetBackgroundFetchingPref_Name:
        if (message.expectsResponse())
          paramsClass = MediaFeedsStore_SetBackgroundFetchingPref_Params;
      break;
      case kMediaFeedsStore_GetMediaFeeds_Name:
        if (message.expectsResponse())
          paramsClass = MediaFeedsStore_GetMediaFeeds_Params;
      break;
      case kMediaFeedsStore_GetItemsForMediaFeed_Name:
        if (message.expectsResponse())
          paramsClass = MediaFeedsStore_GetItemsForMediaFeed_Params;
      break;
      case kMediaFeedsStore_FetchMediaFeed_Name:
        if (message.expectsResponse())
          paramsClass = MediaFeedsStore_FetchMediaFeed_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaFeedsStoreResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kMediaFeedsStore_GetDebugInformation_Name:
        if (message.isResponse())
          paramsClass = MediaFeedsStore_GetDebugInformation_ResponseParams;
        break;
      case kMediaFeedsStore_SetSafeSearchEnabledPref_Name:
        if (message.isResponse())
          paramsClass = MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams;
        break;
      case kMediaFeedsStore_SetBackgroundFetchingPref_Name:
        if (message.isResponse())
          paramsClass = MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams;
        break;
      case kMediaFeedsStore_GetMediaFeeds_Name:
        if (message.isResponse())
          paramsClass = MediaFeedsStore_GetMediaFeeds_ResponseParams;
        break;
      case kMediaFeedsStore_GetItemsForMediaFeed_Name:
        if (message.isResponse())
          paramsClass = MediaFeedsStore_GetItemsForMediaFeed_ResponseParams;
        break;
      case kMediaFeedsStore_FetchMediaFeed_Name:
        if (message.isResponse())
          paramsClass = MediaFeedsStore_FetchMediaFeed_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var MediaFeedsStore = {
    name: 'media_feeds.mojom.MediaFeedsStore',
    kVersion: 0,
    ptrClass: MediaFeedsStorePtr,
    proxyClass: MediaFeedsStoreProxy,
    stubClass: MediaFeedsStoreStub,
    validateRequest: validateMediaFeedsStoreRequest,
    validateResponse: validateMediaFeedsStoreResponse,
  };
  MediaFeedsStoreStub.prototype.validator = validateMediaFeedsStoreRequest;
  MediaFeedsStoreProxy.prototype.validator = validateMediaFeedsStoreResponse;
  exports.FetchResult = FetchResult;
  exports.ResetReason = ResetReason;
  exports.FeedUserStatus = FeedUserStatus;
  exports.MediaFeedItemType = MediaFeedItemType;
  exports.MediaFeedItemActionStatus = MediaFeedItemActionStatus;
  exports.InteractionCounterType = InteractionCounterType;
  exports.SafeSearchResult = SafeSearchResult;
  exports.ContentAttribute = ContentAttribute;
  exports.IsFamilyFriendly = IsFamilyFriendly;
  exports.MediaFeed = MediaFeed;
  exports.UserIdentifier = UserIdentifier;
  exports.ContentRating = ContentRating;
  exports.Author = Author;
  exports.Identifier = Identifier;
  exports.Action = Action;
  exports.PlayNextCandidate = PlayNextCandidate;
  exports.TVEpisode = TVEpisode;
  exports.LiveDetails = LiveDetails;
  exports.MediaImage = MediaImage;
  exports.MediaFeedItem = MediaFeedItem;
  exports.DebugInformation = DebugInformation;
  exports.MediaFeedsStore = MediaFeedsStore;
  exports.MediaFeedsStorePtr = MediaFeedsStorePtr;
  exports.MediaFeedsStoreAssociatedPtr = MediaFeedsStoreAssociatedPtr;
})();