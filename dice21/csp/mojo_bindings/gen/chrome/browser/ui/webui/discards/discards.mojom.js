// chrome/browser/ui/webui/discards/discards.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/discards/discards.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('discards.mojom');
  var lifecycle_unit_state$ =
      mojo.internal.exposeNamespace('mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'chrome/browser/resource_coordinator/lifecycle_unit_state.mojom', '../../../resource_coordinator/lifecycle_unit_state.mojom.js');
  }
  var process_id$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/process_id.mojom', '../../../../../mojo/public/mojom/base/process_id.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var LifecycleUnitVisibility = {};
  LifecycleUnitVisibility.HIDDEN = 0;
  LifecycleUnitVisibility.OCCLUDED = 1;
  LifecycleUnitVisibility.VISIBLE = 2;
  LifecycleUnitVisibility.MIN_VALUE = 0,
  LifecycleUnitVisibility.MAX_VALUE = 2,

  LifecycleUnitVisibility.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  LifecycleUnitVisibility.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TabDiscardsInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TabDiscardsInfo.prototype.initDefaults_ = function() {
    this.tabUrl = null;
    this.title = null;
    this.visibility = 0;
    this.loadingState = 0;
    this.state = 0;
    this.canDiscard = false;
    this.isAutoDiscardable = false;
    this.hasReactivationScore = false;
    this.hasFocus = false;
    this.cannotDiscardReasons = null;
    this.discardCount = 0;
    this.discardReason = 0;
    this.utilityRank = 0;
    this.lastActiveSeconds = 0;
    this.id = 0;
    this.reactivationScore = 0;
    this.siteEngagementScore = 0;
    this.stateChangeTime = null;
  };
  TabDiscardsInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TabDiscardsInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 96}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabDiscardsInfo.tabUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabDiscardsInfo.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabDiscardsInfo.visibility
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, LifecycleUnitVisibility);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabDiscardsInfo.loadingState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, lifecycle_unit_state$.LifecycleUnitLoadingState);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TabDiscardsInfo.state
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, lifecycle_unit_state$.LifecycleUnitState);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TabDiscardsInfo.cannotDiscardReasons
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TabDiscardsInfo.discardReason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 44, lifecycle_unit_state$.LifecycleUnitDiscardReason);
    if (err !== validator.validationError.NONE)
        return err;










    // validate TabDiscardsInfo.stateChangeTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TabDiscardsInfo.encodedSize = codec.kStructHeaderSize + 88;

  TabDiscardsInfo.decode = function(decoder) {
    var packed;
    var val = new TabDiscardsInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabUrl =
        decoder.decodeStruct(codec.String);
    val.title =
        decoder.decodeStruct(codec.String);
    val.visibility =
        decoder.decodeStruct(codec.Int32);
    val.loadingState =
        decoder.decodeStruct(codec.Int32);
    val.state =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.canDiscard = (packed >> 0) & 1 ? true : false;
    val.isAutoDiscardable = (packed >> 1) & 1 ? true : false;
    val.hasReactivationScore = (packed >> 2) & 1 ? true : false;
    val.hasFocus = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.cannotDiscardReasons =
        decoder.decodeArrayPointer(codec.String);
    val.discardCount =
        decoder.decodeStruct(codec.Int32);
    val.discardReason =
        decoder.decodeStruct(codec.Int32);
    val.utilityRank =
        decoder.decodeStruct(codec.Int32);
    val.lastActiveSeconds =
        decoder.decodeStruct(codec.Int32);
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.reactivationScore =
        decoder.decodeStruct(codec.Double);
    val.siteEngagementScore =
        decoder.decodeStruct(codec.Double);
    val.stateChangeTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  TabDiscardsInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TabDiscardsInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.tabUrl);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStruct(codec.Int32, val.visibility);
    encoder.encodeStruct(codec.Int32, val.loadingState);
    encoder.encodeStruct(codec.Int32, val.state);
    packed = 0;
    packed |= (val.canDiscard & 1) << 0
    packed |= (val.isAutoDiscardable & 1) << 1
    packed |= (val.hasReactivationScore & 1) << 2
    packed |= (val.hasFocus & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.String, val.cannotDiscardReasons);
    encoder.encodeStruct(codec.Int32, val.discardCount);
    encoder.encodeStruct(codec.Int32, val.discardReason);
    encoder.encodeStruct(codec.Int32, val.utilityRank);
    encoder.encodeStruct(codec.Int32, val.lastActiveSeconds);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.reactivationScore);
    encoder.encodeStruct(codec.Double, val.siteEngagementScore);
    encoder.encodeStructPointer(time$.TimeDelta, val.stateChangeTime);
  };
  function PageInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageInfo.prototype.initDefaults_ = function() {
    this.id = 0;
    this.mainFrameUrl = null;
    this.openerFrameId = 0;
    this.descriptionJson = null;
  };
  PageInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageInfo.mainFrameUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageInfo.descriptionJson
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageInfo.encodedSize = codec.kStructHeaderSize + 32;

  PageInfo.decode = function(decoder) {
    var packed;
    var val = new PageInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.mainFrameUrl =
        decoder.decodeStructPointer(url$.Url);
    val.openerFrameId =
        decoder.decodeStruct(codec.Int64);
    val.descriptionJson =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStructPointer(url$.Url, val.mainFrameUrl);
    encoder.encodeStruct(codec.Int64, val.openerFrameId);
    encoder.encodeStruct(codec.String, val.descriptionJson);
  };
  function FrameInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameInfo.prototype.initDefaults_ = function() {
    this.id = 0;
    this.url = null;
    this.pageId = 0;
    this.parentFrameId = 0;
    this.processId = 0;
    this.descriptionJson = null;
  };
  FrameInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate FrameInfo.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;





    // validate FrameInfo.descriptionJson
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameInfo.encodedSize = codec.kStructHeaderSize + 48;

  FrameInfo.decode = function(decoder) {
    var packed;
    var val = new FrameInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.pageId =
        decoder.decodeStruct(codec.Int64);
    val.parentFrameId =
        decoder.decodeStruct(codec.Int64);
    val.processId =
        decoder.decodeStruct(codec.Int64);
    val.descriptionJson =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FrameInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Int64, val.pageId);
    encoder.encodeStruct(codec.Int64, val.parentFrameId);
    encoder.encodeStruct(codec.Int64, val.processId);
    encoder.encodeStruct(codec.String, val.descriptionJson);
  };
  function ProcessInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProcessInfo.prototype.initDefaults_ = function() {
    this.id = 0;
    this.pid = null;
    this.privateFootprintKb = 0;
    this.descriptionJson = null;
  };
  ProcessInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProcessInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ProcessInfo.pid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, process_id$.ProcessId, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ProcessInfo.descriptionJson
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProcessInfo.encodedSize = codec.kStructHeaderSize + 32;

  ProcessInfo.decode = function(decoder) {
    var packed;
    var val = new ProcessInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.pid =
        decoder.decodeStructPointer(process_id$.ProcessId);
    val.privateFootprintKb =
        decoder.decodeStruct(codec.Uint64);
    val.descriptionJson =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ProcessInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProcessInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStructPointer(process_id$.ProcessId, val.pid);
    encoder.encodeStruct(codec.Uint64, val.privateFootprintKb);
    encoder.encodeStruct(codec.String, val.descriptionJson);
  };
  function WorkerInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WorkerInfo.prototype.initDefaults_ = function() {
    this.id = 0;
    this.url = null;
    this.processId = 0;
    this.clientFrameIds = null;
    this.clientWorkerIds = null;
    this.childWorkerIds = null;
    this.descriptionJson = null;
  };
  WorkerInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WorkerInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WorkerInfo.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WorkerInfo.clientFrameIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, codec.Int64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WorkerInfo.clientWorkerIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, codec.Int64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WorkerInfo.childWorkerIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 8, codec.Int64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WorkerInfo.descriptionJson
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WorkerInfo.encodedSize = codec.kStructHeaderSize + 56;

  WorkerInfo.decode = function(decoder) {
    var packed;
    var val = new WorkerInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int64);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.processId =
        decoder.decodeStruct(codec.Int64);
    val.clientFrameIds =
        decoder.decodeArrayPointer(codec.Int64);
    val.clientWorkerIds =
        decoder.decodeArrayPointer(codec.Int64);
    val.childWorkerIds =
        decoder.decodeArrayPointer(codec.Int64);
    val.descriptionJson =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WorkerInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WorkerInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.id);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Int64, val.processId);
    encoder.encodeArrayPointer(codec.Int64, val.clientFrameIds);
    encoder.encodeArrayPointer(codec.Int64, val.clientWorkerIds);
    encoder.encodeArrayPointer(codec.Int64, val.childWorkerIds);
    encoder.encodeStruct(codec.String, val.descriptionJson);
  };
  function FavIconInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FavIconInfo.prototype.initDefaults_ = function() {
    this.nodeId = 0;
    this.iconData = null;
  };
  FavIconInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FavIconInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate FavIconInfo.iconData
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FavIconInfo.encodedSize = codec.kStructHeaderSize + 16;

  FavIconInfo.decode = function(decoder) {
    var packed;
    var val = new FavIconInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodeId =
        decoder.decodeStruct(codec.Int64);
    val.iconData =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FavIconInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FavIconInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.nodeId);
    encoder.encodeStruct(codec.String, val.iconData);
  };
  function DetailsProvider_GetTabDiscardsInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_GetTabDiscardsInfo_Params.prototype.initDefaults_ = function() {
  };
  DetailsProvider_GetTabDiscardsInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_GetTabDiscardsInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DetailsProvider_GetTabDiscardsInfo_Params.encodedSize = codec.kStructHeaderSize + 0;

  DetailsProvider_GetTabDiscardsInfo_Params.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_GetTabDiscardsInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DetailsProvider_GetTabDiscardsInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_GetTabDiscardsInfo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DetailsProvider_GetTabDiscardsInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_GetTabDiscardsInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.infos = null;
  };
  DetailsProvider_GetTabDiscardsInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_GetTabDiscardsInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DetailsProvider_GetTabDiscardsInfo_ResponseParams.infos
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(TabDiscardsInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DetailsProvider_GetTabDiscardsInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  DetailsProvider_GetTabDiscardsInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_GetTabDiscardsInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.infos =
        decoder.decodeArrayPointer(new codec.PointerTo(TabDiscardsInfo));
    return val;
  };

  DetailsProvider_GetTabDiscardsInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_GetTabDiscardsInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(TabDiscardsInfo), val.infos);
  };
  function DetailsProvider_SetAutoDiscardable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_SetAutoDiscardable_Params.prototype.initDefaults_ = function() {
    this.tabId = 0;
    this.isAutoDiscardable = false;
  };
  DetailsProvider_SetAutoDiscardable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_SetAutoDiscardable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  DetailsProvider_SetAutoDiscardable_Params.encodedSize = codec.kStructHeaderSize + 8;

  DetailsProvider_SetAutoDiscardable_Params.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_SetAutoDiscardable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isAutoDiscardable = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DetailsProvider_SetAutoDiscardable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_SetAutoDiscardable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.tabId);
    packed = 0;
    packed |= (val.isAutoDiscardable & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DetailsProvider_SetAutoDiscardable_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_SetAutoDiscardable_ResponseParams.prototype.initDefaults_ = function() {
  };
  DetailsProvider_SetAutoDiscardable_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_SetAutoDiscardable_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DetailsProvider_SetAutoDiscardable_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  DetailsProvider_SetAutoDiscardable_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_SetAutoDiscardable_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DetailsProvider_SetAutoDiscardable_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_SetAutoDiscardable_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function DetailsProvider_DiscardById_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_DiscardById_Params.prototype.initDefaults_ = function() {
    this.tabId = 0;
  };
  DetailsProvider_DiscardById_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_DiscardById_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DetailsProvider_DiscardById_Params.encodedSize = codec.kStructHeaderSize + 8;

  DetailsProvider_DiscardById_Params.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_DiscardById_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DetailsProvider_DiscardById_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_DiscardById_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.tabId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DetailsProvider_DiscardById_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_DiscardById_ResponseParams.prototype.initDefaults_ = function() {
  };
  DetailsProvider_DiscardById_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_DiscardById_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DetailsProvider_DiscardById_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  DetailsProvider_DiscardById_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_DiscardById_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DetailsProvider_DiscardById_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_DiscardById_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function DetailsProvider_LoadById_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_LoadById_Params.prototype.initDefaults_ = function() {
    this.tabId = 0;
  };
  DetailsProvider_LoadById_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_LoadById_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DetailsProvider_LoadById_Params.encodedSize = codec.kStructHeaderSize + 8;

  DetailsProvider_LoadById_Params.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_LoadById_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tabId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DetailsProvider_LoadById_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_LoadById_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.tabId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DetailsProvider_Discard_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_Discard_Params.prototype.initDefaults_ = function() {
  };
  DetailsProvider_Discard_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_Discard_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DetailsProvider_Discard_Params.encodedSize = codec.kStructHeaderSize + 0;

  DetailsProvider_Discard_Params.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_Discard_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DetailsProvider_Discard_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_Discard_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DetailsProvider_Discard_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DetailsProvider_Discard_ResponseParams.prototype.initDefaults_ = function() {
  };
  DetailsProvider_Discard_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DetailsProvider_Discard_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DetailsProvider_Discard_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  DetailsProvider_Discard_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DetailsProvider_Discard_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DetailsProvider_Discard_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DetailsProvider_Discard_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function GraphChangeStream_FrameCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_FrameCreated_Params.prototype.initDefaults_ = function() {
    this.frame = null;
  };
  GraphChangeStream_FrameCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_FrameCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_FrameCreated_Params.frame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FrameInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_FrameCreated_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_FrameCreated_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_FrameCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frame =
        decoder.decodeStructPointer(FrameInfo);
    return val;
  };

  GraphChangeStream_FrameCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_FrameCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FrameInfo, val.frame);
  };
  function GraphChangeStream_PageCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_PageCreated_Params.prototype.initDefaults_ = function() {
    this.pages = null;
  };
  GraphChangeStream_PageCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_PageCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_PageCreated_Params.pages
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PageInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_PageCreated_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_PageCreated_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_PageCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pages =
        decoder.decodeStructPointer(PageInfo);
    return val;
  };

  GraphChangeStream_PageCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_PageCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PageInfo, val.pages);
  };
  function GraphChangeStream_ProcessCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_ProcessCreated_Params.prototype.initDefaults_ = function() {
    this.process = null;
  };
  GraphChangeStream_ProcessCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_ProcessCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_ProcessCreated_Params.process
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ProcessInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_ProcessCreated_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_ProcessCreated_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_ProcessCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.process =
        decoder.decodeStructPointer(ProcessInfo);
    return val;
  };

  GraphChangeStream_ProcessCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_ProcessCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ProcessInfo, val.process);
  };
  function GraphChangeStream_WorkerCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_WorkerCreated_Params.prototype.initDefaults_ = function() {
    this.worker = null;
  };
  GraphChangeStream_WorkerCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_WorkerCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_WorkerCreated_Params.worker
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WorkerInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_WorkerCreated_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_WorkerCreated_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_WorkerCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.worker =
        decoder.decodeStructPointer(WorkerInfo);
    return val;
  };

  GraphChangeStream_WorkerCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_WorkerCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WorkerInfo, val.worker);
  };
  function GraphChangeStream_FrameChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_FrameChanged_Params.prototype.initDefaults_ = function() {
    this.frame = null;
  };
  GraphChangeStream_FrameChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_FrameChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_FrameChanged_Params.frame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FrameInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_FrameChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_FrameChanged_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_FrameChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frame =
        decoder.decodeStructPointer(FrameInfo);
    return val;
  };

  GraphChangeStream_FrameChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_FrameChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FrameInfo, val.frame);
  };
  function GraphChangeStream_PageChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_PageChanged_Params.prototype.initDefaults_ = function() {
    this.page = null;
  };
  GraphChangeStream_PageChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_PageChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_PageChanged_Params.page
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PageInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_PageChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_PageChanged_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_PageChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStructPointer(PageInfo);
    return val;
  };

  GraphChangeStream_PageChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_PageChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PageInfo, val.page);
  };
  function GraphChangeStream_ProcessChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_ProcessChanged_Params.prototype.initDefaults_ = function() {
    this.process = null;
  };
  GraphChangeStream_ProcessChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_ProcessChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_ProcessChanged_Params.process
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ProcessInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_ProcessChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_ProcessChanged_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_ProcessChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.process =
        decoder.decodeStructPointer(ProcessInfo);
    return val;
  };

  GraphChangeStream_ProcessChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_ProcessChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ProcessInfo, val.process);
  };
  function GraphChangeStream_WorkerChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_WorkerChanged_Params.prototype.initDefaults_ = function() {
    this.worker = null;
  };
  GraphChangeStream_WorkerChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_WorkerChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_WorkerChanged_Params.worker
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WorkerInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_WorkerChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_WorkerChanged_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_WorkerChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.worker =
        decoder.decodeStructPointer(WorkerInfo);
    return val;
  };

  GraphChangeStream_WorkerChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_WorkerChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WorkerInfo, val.worker);
  };
  function GraphChangeStream_FavIconDataAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_FavIconDataAvailable_Params.prototype.initDefaults_ = function() {
    this.favicon = null;
  };
  GraphChangeStream_FavIconDataAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_FavIconDataAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphChangeStream_FavIconDataAvailable_Params.favicon
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FavIconInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphChangeStream_FavIconDataAvailable_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_FavIconDataAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_FavIconDataAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.favicon =
        decoder.decodeStructPointer(FavIconInfo);
    return val;
  };

  GraphChangeStream_FavIconDataAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_FavIconDataAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FavIconInfo, val.favicon);
  };
  function GraphChangeStream_NodeDeleted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphChangeStream_NodeDeleted_Params.prototype.initDefaults_ = function() {
    this.nodeId = 0;
  };
  GraphChangeStream_NodeDeleted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphChangeStream_NodeDeleted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GraphChangeStream_NodeDeleted_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphChangeStream_NodeDeleted_Params.decode = function(decoder) {
    var packed;
    var val = new GraphChangeStream_NodeDeleted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodeId =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  GraphChangeStream_NodeDeleted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphChangeStream_NodeDeleted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.nodeId);
  };
  function GraphDump_SubscribeToChanges_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphDump_SubscribeToChanges_Params.prototype.initDefaults_ = function() {
    this.changeSubscriber = new GraphChangeStreamPtr();
  };
  GraphDump_SubscribeToChanges_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphDump_SubscribeToChanges_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphDump_SubscribeToChanges_Params.changeSubscriber
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphDump_SubscribeToChanges_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphDump_SubscribeToChanges_Params.decode = function(decoder) {
    var packed;
    var val = new GraphDump_SubscribeToChanges_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.changeSubscriber =
        decoder.decodeStruct(new codec.Interface(GraphChangeStreamPtr));
    return val;
  };

  GraphDump_SubscribeToChanges_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphDump_SubscribeToChanges_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(GraphChangeStreamPtr), val.changeSubscriber);
  };
  function GraphDump_RequestNodeDescriptions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphDump_RequestNodeDescriptions_Params.prototype.initDefaults_ = function() {
    this.nodeIds = null;
  };
  GraphDump_RequestNodeDescriptions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphDump_RequestNodeDescriptions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphDump_RequestNodeDescriptions_Params.nodeIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.Int64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphDump_RequestNodeDescriptions_Params.encodedSize = codec.kStructHeaderSize + 8;

  GraphDump_RequestNodeDescriptions_Params.decode = function(decoder) {
    var packed;
    var val = new GraphDump_RequestNodeDescriptions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodeIds =
        decoder.decodeArrayPointer(codec.Int64);
    return val;
  };

  GraphDump_RequestNodeDescriptions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphDump_RequestNodeDescriptions_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int64, val.nodeIds);
  };
  function GraphDump_RequestNodeDescriptions_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GraphDump_RequestNodeDescriptions_ResponseParams.prototype.initDefaults_ = function() {
    this.nodeDescriptionsJson = null;
  };
  GraphDump_RequestNodeDescriptions_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GraphDump_RequestNodeDescriptions_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GraphDump_RequestNodeDescriptions_ResponseParams.nodeDescriptionsJson
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.Int64, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GraphDump_RequestNodeDescriptions_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GraphDump_RequestNodeDescriptions_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GraphDump_RequestNodeDescriptions_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodeDescriptionsJson =
        decoder.decodeMapPointer(codec.Int64, codec.String);
    return val;
  };

  GraphDump_RequestNodeDescriptions_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GraphDump_RequestNodeDescriptions_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.Int64, codec.String, val.nodeDescriptionsJson);
  };
  var kDetailsProvider_GetTabDiscardsInfo_Name = 2067592840;
  var kDetailsProvider_SetAutoDiscardable_Name = 1238245250;
  var kDetailsProvider_DiscardById_Name = 298585746;
  var kDetailsProvider_LoadById_Name = 1320362872;
  var kDetailsProvider_Discard_Name = 411996561;

  function DetailsProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DetailsProvider,
                                                   handleOrPtrInfo);
  }

  function DetailsProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DetailsProvider, associatedInterfacePtrInfo);
  }

  DetailsProviderAssociatedPtr.prototype =
      Object.create(DetailsProviderPtr.prototype);
  DetailsProviderAssociatedPtr.prototype.constructor =
      DetailsProviderAssociatedPtr;

  function DetailsProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  DetailsProviderPtr.prototype.getTabDiscardsInfo = function() {
    return DetailsProviderProxy.prototype.getTabDiscardsInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  DetailsProviderProxy.prototype.getTabDiscardsInfo = function() {
    var params_ = new DetailsProvider_GetTabDiscardsInfo_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDetailsProvider_GetTabDiscardsInfo_Name,
          codec.align(DetailsProvider_GetTabDiscardsInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DetailsProvider_GetTabDiscardsInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DetailsProvider_GetTabDiscardsInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DetailsProviderPtr.prototype.setAutoDiscardable = function() {
    return DetailsProviderProxy.prototype.setAutoDiscardable
        .apply(this.ptr.getProxy(), arguments);
  };

  DetailsProviderProxy.prototype.setAutoDiscardable = function(tabId, isAutoDiscardable) {
    var params_ = new DetailsProvider_SetAutoDiscardable_Params();
    params_.tabId = tabId;
    params_.isAutoDiscardable = isAutoDiscardable;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDetailsProvider_SetAutoDiscardable_Name,
          codec.align(DetailsProvider_SetAutoDiscardable_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DetailsProvider_SetAutoDiscardable_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DetailsProvider_SetAutoDiscardable_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DetailsProviderPtr.prototype.discardById = function() {
    return DetailsProviderProxy.prototype.discardById
        .apply(this.ptr.getProxy(), arguments);
  };

  DetailsProviderProxy.prototype.discardById = function(tabId) {
    var params_ = new DetailsProvider_DiscardById_Params();
    params_.tabId = tabId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDetailsProvider_DiscardById_Name,
          codec.align(DetailsProvider_DiscardById_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DetailsProvider_DiscardById_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DetailsProvider_DiscardById_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DetailsProviderPtr.prototype.loadById = function() {
    return DetailsProviderProxy.prototype.loadById
        .apply(this.ptr.getProxy(), arguments);
  };

  DetailsProviderProxy.prototype.loadById = function(tabId) {
    var params_ = new DetailsProvider_LoadById_Params();
    params_.tabId = tabId;
    var builder = new codec.MessageV0Builder(
        kDetailsProvider_LoadById_Name,
        codec.align(DetailsProvider_LoadById_Params.encodedSize));
    builder.encodeStruct(DetailsProvider_LoadById_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DetailsProviderPtr.prototype.discard = function() {
    return DetailsProviderProxy.prototype.discard
        .apply(this.ptr.getProxy(), arguments);
  };

  DetailsProviderProxy.prototype.discard = function() {
    var params_ = new DetailsProvider_Discard_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDetailsProvider_Discard_Name,
          codec.align(DetailsProvider_Discard_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(DetailsProvider_Discard_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DetailsProvider_Discard_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function DetailsProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  DetailsProviderStub.prototype.getTabDiscardsInfo = function() {
    return this.delegate_ && this.delegate_.getTabDiscardsInfo && this.delegate_.getTabDiscardsInfo();
  }
  DetailsProviderStub.prototype.setAutoDiscardable = function(tabId, isAutoDiscardable) {
    return this.delegate_ && this.delegate_.setAutoDiscardable && this.delegate_.setAutoDiscardable(tabId, isAutoDiscardable);
  }
  DetailsProviderStub.prototype.discardById = function(tabId) {
    return this.delegate_ && this.delegate_.discardById && this.delegate_.discardById(tabId);
  }
  DetailsProviderStub.prototype.loadById = function(tabId) {
    return this.delegate_ && this.delegate_.loadById && this.delegate_.loadById(tabId);
  }
  DetailsProviderStub.prototype.discard = function() {
    return this.delegate_ && this.delegate_.discard && this.delegate_.discard();
  }

  DetailsProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDetailsProvider_LoadById_Name:
      var params = reader.decodeStruct(DetailsProvider_LoadById_Params);
      this.loadById(params.tabId);
      return true;
    default:
      return false;
    }
  };

  DetailsProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDetailsProvider_GetTabDiscardsInfo_Name:
      var params = reader.decodeStruct(DetailsProvider_GetTabDiscardsInfo_Params);
      this.getTabDiscardsInfo().then(function(response) {
        var responseParams =
            new DetailsProvider_GetTabDiscardsInfo_ResponseParams();
        responseParams.infos = response.infos;
        var builder = new codec.MessageV1Builder(
            kDetailsProvider_GetTabDiscardsInfo_Name,
            codec.align(DetailsProvider_GetTabDiscardsInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DetailsProvider_GetTabDiscardsInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kDetailsProvider_SetAutoDiscardable_Name:
      var params = reader.decodeStruct(DetailsProvider_SetAutoDiscardable_Params);
      this.setAutoDiscardable(params.tabId, params.isAutoDiscardable).then(function(response) {
        var responseParams =
            new DetailsProvider_SetAutoDiscardable_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kDetailsProvider_SetAutoDiscardable_Name,
            codec.align(DetailsProvider_SetAutoDiscardable_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DetailsProvider_SetAutoDiscardable_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kDetailsProvider_DiscardById_Name:
      var params = reader.decodeStruct(DetailsProvider_DiscardById_Params);
      this.discardById(params.tabId).then(function(response) {
        var responseParams =
            new DetailsProvider_DiscardById_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kDetailsProvider_DiscardById_Name,
            codec.align(DetailsProvider_DiscardById_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DetailsProvider_DiscardById_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kDetailsProvider_Discard_Name:
      var params = reader.decodeStruct(DetailsProvider_Discard_Params);
      this.discard().then(function(response) {
        var responseParams =
            new DetailsProvider_Discard_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kDetailsProvider_Discard_Name,
            codec.align(DetailsProvider_Discard_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(DetailsProvider_Discard_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDetailsProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDetailsProvider_GetTabDiscardsInfo_Name:
        if (message.expectsResponse())
          paramsClass = DetailsProvider_GetTabDiscardsInfo_Params;
      break;
      case kDetailsProvider_SetAutoDiscardable_Name:
        if (message.expectsResponse())
          paramsClass = DetailsProvider_SetAutoDiscardable_Params;
      break;
      case kDetailsProvider_DiscardById_Name:
        if (message.expectsResponse())
          paramsClass = DetailsProvider_DiscardById_Params;
      break;
      case kDetailsProvider_LoadById_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DetailsProvider_LoadById_Params;
      break;
      case kDetailsProvider_Discard_Name:
        if (message.expectsResponse())
          paramsClass = DetailsProvider_Discard_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDetailsProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDetailsProvider_GetTabDiscardsInfo_Name:
        if (message.isResponse())
          paramsClass = DetailsProvider_GetTabDiscardsInfo_ResponseParams;
        break;
      case kDetailsProvider_SetAutoDiscardable_Name:
        if (message.isResponse())
          paramsClass = DetailsProvider_SetAutoDiscardable_ResponseParams;
        break;
      case kDetailsProvider_DiscardById_Name:
        if (message.isResponse())
          paramsClass = DetailsProvider_DiscardById_ResponseParams;
        break;
      case kDetailsProvider_Discard_Name:
        if (message.isResponse())
          paramsClass = DetailsProvider_Discard_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var DetailsProvider = {
    name: 'discards.mojom.DetailsProvider',
    kVersion: 0,
    ptrClass: DetailsProviderPtr,
    proxyClass: DetailsProviderProxy,
    stubClass: DetailsProviderStub,
    validateRequest: validateDetailsProviderRequest,
    validateResponse: validateDetailsProviderResponse,
  };
  DetailsProviderStub.prototype.validator = validateDetailsProviderRequest;
  DetailsProviderProxy.prototype.validator = validateDetailsProviderResponse;
  var kGraphChangeStream_FrameCreated_Name = 2069959777;
  var kGraphChangeStream_PageCreated_Name = 732767939;
  var kGraphChangeStream_ProcessCreated_Name = 348794702;
  var kGraphChangeStream_WorkerCreated_Name = 1328682808;
  var kGraphChangeStream_FrameChanged_Name = 835921714;
  var kGraphChangeStream_PageChanged_Name = 804034391;
  var kGraphChangeStream_ProcessChanged_Name = 221810509;
  var kGraphChangeStream_WorkerChanged_Name = 1512978784;
  var kGraphChangeStream_FavIconDataAvailable_Name = 1786649545;
  var kGraphChangeStream_NodeDeleted_Name = 249185881;

  function GraphChangeStreamPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GraphChangeStream,
                                                   handleOrPtrInfo);
  }

  function GraphChangeStreamAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GraphChangeStream, associatedInterfacePtrInfo);
  }

  GraphChangeStreamAssociatedPtr.prototype =
      Object.create(GraphChangeStreamPtr.prototype);
  GraphChangeStreamAssociatedPtr.prototype.constructor =
      GraphChangeStreamAssociatedPtr;

  function GraphChangeStreamProxy(receiver) {
    this.receiver_ = receiver;
  }
  GraphChangeStreamPtr.prototype.frameCreated = function() {
    return GraphChangeStreamProxy.prototype.frameCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.frameCreated = function(frame) {
    var params_ = new GraphChangeStream_FrameCreated_Params();
    params_.frame = frame;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_FrameCreated_Name,
        codec.align(GraphChangeStream_FrameCreated_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_FrameCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.pageCreated = function() {
    return GraphChangeStreamProxy.prototype.pageCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.pageCreated = function(pages) {
    var params_ = new GraphChangeStream_PageCreated_Params();
    params_.pages = pages;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_PageCreated_Name,
        codec.align(GraphChangeStream_PageCreated_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_PageCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.processCreated = function() {
    return GraphChangeStreamProxy.prototype.processCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.processCreated = function(process) {
    var params_ = new GraphChangeStream_ProcessCreated_Params();
    params_.process = process;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_ProcessCreated_Name,
        codec.align(GraphChangeStream_ProcessCreated_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_ProcessCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.workerCreated = function() {
    return GraphChangeStreamProxy.prototype.workerCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.workerCreated = function(worker) {
    var params_ = new GraphChangeStream_WorkerCreated_Params();
    params_.worker = worker;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_WorkerCreated_Name,
        codec.align(GraphChangeStream_WorkerCreated_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_WorkerCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.frameChanged = function() {
    return GraphChangeStreamProxy.prototype.frameChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.frameChanged = function(frame) {
    var params_ = new GraphChangeStream_FrameChanged_Params();
    params_.frame = frame;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_FrameChanged_Name,
        codec.align(GraphChangeStream_FrameChanged_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_FrameChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.pageChanged = function() {
    return GraphChangeStreamProxy.prototype.pageChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.pageChanged = function(page) {
    var params_ = new GraphChangeStream_PageChanged_Params();
    params_.page = page;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_PageChanged_Name,
        codec.align(GraphChangeStream_PageChanged_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_PageChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.processChanged = function() {
    return GraphChangeStreamProxy.prototype.processChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.processChanged = function(process) {
    var params_ = new GraphChangeStream_ProcessChanged_Params();
    params_.process = process;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_ProcessChanged_Name,
        codec.align(GraphChangeStream_ProcessChanged_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_ProcessChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.workerChanged = function() {
    return GraphChangeStreamProxy.prototype.workerChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.workerChanged = function(worker) {
    var params_ = new GraphChangeStream_WorkerChanged_Params();
    params_.worker = worker;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_WorkerChanged_Name,
        codec.align(GraphChangeStream_WorkerChanged_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_WorkerChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.favIconDataAvailable = function() {
    return GraphChangeStreamProxy.prototype.favIconDataAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.favIconDataAvailable = function(favicon) {
    var params_ = new GraphChangeStream_FavIconDataAvailable_Params();
    params_.favicon = favicon;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_FavIconDataAvailable_Name,
        codec.align(GraphChangeStream_FavIconDataAvailable_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_FavIconDataAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphChangeStreamPtr.prototype.nodeDeleted = function() {
    return GraphChangeStreamProxy.prototype.nodeDeleted
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphChangeStreamProxy.prototype.nodeDeleted = function(nodeId) {
    var params_ = new GraphChangeStream_NodeDeleted_Params();
    params_.nodeId = nodeId;
    var builder = new codec.MessageV0Builder(
        kGraphChangeStream_NodeDeleted_Name,
        codec.align(GraphChangeStream_NodeDeleted_Params.encodedSize));
    builder.encodeStruct(GraphChangeStream_NodeDeleted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function GraphChangeStreamStub(delegate) {
    this.delegate_ = delegate;
  }
  GraphChangeStreamStub.prototype.frameCreated = function(frame) {
    return this.delegate_ && this.delegate_.frameCreated && this.delegate_.frameCreated(frame);
  }
  GraphChangeStreamStub.prototype.pageCreated = function(pages) {
    return this.delegate_ && this.delegate_.pageCreated && this.delegate_.pageCreated(pages);
  }
  GraphChangeStreamStub.prototype.processCreated = function(process) {
    return this.delegate_ && this.delegate_.processCreated && this.delegate_.processCreated(process);
  }
  GraphChangeStreamStub.prototype.workerCreated = function(worker) {
    return this.delegate_ && this.delegate_.workerCreated && this.delegate_.workerCreated(worker);
  }
  GraphChangeStreamStub.prototype.frameChanged = function(frame) {
    return this.delegate_ && this.delegate_.frameChanged && this.delegate_.frameChanged(frame);
  }
  GraphChangeStreamStub.prototype.pageChanged = function(page) {
    return this.delegate_ && this.delegate_.pageChanged && this.delegate_.pageChanged(page);
  }
  GraphChangeStreamStub.prototype.processChanged = function(process) {
    return this.delegate_ && this.delegate_.processChanged && this.delegate_.processChanged(process);
  }
  GraphChangeStreamStub.prototype.workerChanged = function(worker) {
    return this.delegate_ && this.delegate_.workerChanged && this.delegate_.workerChanged(worker);
  }
  GraphChangeStreamStub.prototype.favIconDataAvailable = function(favicon) {
    return this.delegate_ && this.delegate_.favIconDataAvailable && this.delegate_.favIconDataAvailable(favicon);
  }
  GraphChangeStreamStub.prototype.nodeDeleted = function(nodeId) {
    return this.delegate_ && this.delegate_.nodeDeleted && this.delegate_.nodeDeleted(nodeId);
  }

  GraphChangeStreamStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGraphChangeStream_FrameCreated_Name:
      var params = reader.decodeStruct(GraphChangeStream_FrameCreated_Params);
      this.frameCreated(params.frame);
      return true;
    case kGraphChangeStream_PageCreated_Name:
      var params = reader.decodeStruct(GraphChangeStream_PageCreated_Params);
      this.pageCreated(params.pages);
      return true;
    case kGraphChangeStream_ProcessCreated_Name:
      var params = reader.decodeStruct(GraphChangeStream_ProcessCreated_Params);
      this.processCreated(params.process);
      return true;
    case kGraphChangeStream_WorkerCreated_Name:
      var params = reader.decodeStruct(GraphChangeStream_WorkerCreated_Params);
      this.workerCreated(params.worker);
      return true;
    case kGraphChangeStream_FrameChanged_Name:
      var params = reader.decodeStruct(GraphChangeStream_FrameChanged_Params);
      this.frameChanged(params.frame);
      return true;
    case kGraphChangeStream_PageChanged_Name:
      var params = reader.decodeStruct(GraphChangeStream_PageChanged_Params);
      this.pageChanged(params.page);
      return true;
    case kGraphChangeStream_ProcessChanged_Name:
      var params = reader.decodeStruct(GraphChangeStream_ProcessChanged_Params);
      this.processChanged(params.process);
      return true;
    case kGraphChangeStream_WorkerChanged_Name:
      var params = reader.decodeStruct(GraphChangeStream_WorkerChanged_Params);
      this.workerChanged(params.worker);
      return true;
    case kGraphChangeStream_FavIconDataAvailable_Name:
      var params = reader.decodeStruct(GraphChangeStream_FavIconDataAvailable_Params);
      this.favIconDataAvailable(params.favicon);
      return true;
    case kGraphChangeStream_NodeDeleted_Name:
      var params = reader.decodeStruct(GraphChangeStream_NodeDeleted_Params);
      this.nodeDeleted(params.nodeId);
      return true;
    default:
      return false;
    }
  };

  GraphChangeStreamStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateGraphChangeStreamRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGraphChangeStream_FrameCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_FrameCreated_Params;
      break;
      case kGraphChangeStream_PageCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_PageCreated_Params;
      break;
      case kGraphChangeStream_ProcessCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_ProcessCreated_Params;
      break;
      case kGraphChangeStream_WorkerCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_WorkerCreated_Params;
      break;
      case kGraphChangeStream_FrameChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_FrameChanged_Params;
      break;
      case kGraphChangeStream_PageChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_PageChanged_Params;
      break;
      case kGraphChangeStream_ProcessChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_ProcessChanged_Params;
      break;
      case kGraphChangeStream_WorkerChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_WorkerChanged_Params;
      break;
      case kGraphChangeStream_FavIconDataAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_FavIconDataAvailable_Params;
      break;
      case kGraphChangeStream_NodeDeleted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphChangeStream_NodeDeleted_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGraphChangeStreamResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var GraphChangeStream = {
    name: 'discards.mojom.GraphChangeStream',
    kVersion: 0,
    ptrClass: GraphChangeStreamPtr,
    proxyClass: GraphChangeStreamProxy,
    stubClass: GraphChangeStreamStub,
    validateRequest: validateGraphChangeStreamRequest,
    validateResponse: null,
  };
  GraphChangeStreamStub.prototype.validator = validateGraphChangeStreamRequest;
  GraphChangeStreamProxy.prototype.validator = null;
  var kGraphDump_SubscribeToChanges_Name = 1218152824;
  var kGraphDump_RequestNodeDescriptions_Name = 1840634462;

  function GraphDumpPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GraphDump,
                                                   handleOrPtrInfo);
  }

  function GraphDumpAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GraphDump, associatedInterfacePtrInfo);
  }

  GraphDumpAssociatedPtr.prototype =
      Object.create(GraphDumpPtr.prototype);
  GraphDumpAssociatedPtr.prototype.constructor =
      GraphDumpAssociatedPtr;

  function GraphDumpProxy(receiver) {
    this.receiver_ = receiver;
  }
  GraphDumpPtr.prototype.subscribeToChanges = function() {
    return GraphDumpProxy.prototype.subscribeToChanges
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphDumpProxy.prototype.subscribeToChanges = function(changeSubscriber) {
    var params_ = new GraphDump_SubscribeToChanges_Params();
    params_.changeSubscriber = changeSubscriber;
    var builder = new codec.MessageV0Builder(
        kGraphDump_SubscribeToChanges_Name,
        codec.align(GraphDump_SubscribeToChanges_Params.encodedSize));
    builder.encodeStruct(GraphDump_SubscribeToChanges_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GraphDumpPtr.prototype.requestNodeDescriptions = function() {
    return GraphDumpProxy.prototype.requestNodeDescriptions
        .apply(this.ptr.getProxy(), arguments);
  };

  GraphDumpProxy.prototype.requestNodeDescriptions = function(nodeIds) {
    var params_ = new GraphDump_RequestNodeDescriptions_Params();
    params_.nodeIds = nodeIds;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGraphDump_RequestNodeDescriptions_Name,
          codec.align(GraphDump_RequestNodeDescriptions_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GraphDump_RequestNodeDescriptions_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GraphDump_RequestNodeDescriptions_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function GraphDumpStub(delegate) {
    this.delegate_ = delegate;
  }
  GraphDumpStub.prototype.subscribeToChanges = function(changeSubscriber) {
    return this.delegate_ && this.delegate_.subscribeToChanges && this.delegate_.subscribeToChanges(changeSubscriber);
  }
  GraphDumpStub.prototype.requestNodeDescriptions = function(nodeIds) {
    return this.delegate_ && this.delegate_.requestNodeDescriptions && this.delegate_.requestNodeDescriptions(nodeIds);
  }

  GraphDumpStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGraphDump_SubscribeToChanges_Name:
      var params = reader.decodeStruct(GraphDump_SubscribeToChanges_Params);
      this.subscribeToChanges(params.changeSubscriber);
      return true;
    default:
      return false;
    }
  };

  GraphDumpStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGraphDump_RequestNodeDescriptions_Name:
      var params = reader.decodeStruct(GraphDump_RequestNodeDescriptions_Params);
      this.requestNodeDescriptions(params.nodeIds).then(function(response) {
        var responseParams =
            new GraphDump_RequestNodeDescriptions_ResponseParams();
        responseParams.nodeDescriptionsJson = response.nodeDescriptionsJson;
        var builder = new codec.MessageV1Builder(
            kGraphDump_RequestNodeDescriptions_Name,
            codec.align(GraphDump_RequestNodeDescriptions_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GraphDump_RequestNodeDescriptions_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateGraphDumpRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGraphDump_SubscribeToChanges_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GraphDump_SubscribeToChanges_Params;
      break;
      case kGraphDump_RequestNodeDescriptions_Name:
        if (message.expectsResponse())
          paramsClass = GraphDump_RequestNodeDescriptions_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGraphDumpResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kGraphDump_RequestNodeDescriptions_Name:
        if (message.isResponse())
          paramsClass = GraphDump_RequestNodeDescriptions_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var GraphDump = {
    name: 'discards.mojom.GraphDump',
    kVersion: 0,
    ptrClass: GraphDumpPtr,
    proxyClass: GraphDumpProxy,
    stubClass: GraphDumpStub,
    validateRequest: validateGraphDumpRequest,
    validateResponse: validateGraphDumpResponse,
  };
  GraphDumpStub.prototype.validator = validateGraphDumpRequest;
  GraphDumpProxy.prototype.validator = validateGraphDumpResponse;
  exports.LifecycleUnitVisibility = LifecycleUnitVisibility;
  exports.TabDiscardsInfo = TabDiscardsInfo;
  exports.PageInfo = PageInfo;
  exports.FrameInfo = FrameInfo;
  exports.ProcessInfo = ProcessInfo;
  exports.WorkerInfo = WorkerInfo;
  exports.FavIconInfo = FavIconInfo;
  exports.DetailsProvider = DetailsProvider;
  exports.DetailsProviderPtr = DetailsProviderPtr;
  exports.DetailsProviderAssociatedPtr = DetailsProviderAssociatedPtr;
  exports.GraphChangeStream = GraphChangeStream;
  exports.GraphChangeStreamPtr = GraphChangeStreamPtr;
  exports.GraphChangeStreamAssociatedPtr = GraphChangeStreamAssociatedPtr;
  exports.GraphDump = GraphDump;
  exports.GraphDumpPtr = GraphDumpPtr;
  exports.GraphDumpAssociatedPtr = GraphDumpAssociatedPtr;
})();