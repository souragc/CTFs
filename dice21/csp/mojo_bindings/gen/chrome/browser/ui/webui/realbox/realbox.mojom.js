// chrome/browser/ui/webui/realbox/realbox.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/realbox/realbox.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('realbox.mojom');
  var omnibox$ =
      mojo.internal.exposeNamespace('search.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'chrome/common/search/omnibox.mojom', '../../../../common/search/omnibox.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var skcolor$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor.mojom', '../../../../../skia/public/mojom/skcolor.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function SearchBoxTheme(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SearchBoxTheme.prototype.initDefaults_ = function() {
    this.bg = null;
    this.icon = null;
    this.iconSelected = null;
    this.placeholder = null;
    this.resultsBg = null;
    this.resultsBgHovered = null;
    this.resultsBgSelected = null;
    this.resultsDim = null;
    this.resultsDimSelected = null;
    this.resultsText = null;
    this.resultsTextSelected = null;
    this.resultsUrl = null;
    this.resultsUrlSelected = null;
    this.text = null;
  };
  SearchBoxTheme.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SearchBoxTheme.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 120}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.bg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.icon
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.iconSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.placeholder
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsBg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsBgHovered
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsBgSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsDim
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsDimSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsText
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsTextSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsUrlSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.text
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SearchBoxTheme.encodedSize = codec.kStructHeaderSize + 112;

  SearchBoxTheme.decode = function(decoder) {
    var packed;
    var val = new SearchBoxTheme();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bg =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.icon =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.iconSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.placeholder =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsBg =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsBgHovered =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsBgSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsDim =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsDimSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsText =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsTextSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsUrl =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsUrlSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.text =
        decoder.decodeStructPointer(skcolor$.SkColor);
    return val;
  };

  SearchBoxTheme.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SearchBoxTheme.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor$.SkColor, val.bg);
    encoder.encodeStructPointer(skcolor$.SkColor, val.icon);
    encoder.encodeStructPointer(skcolor$.SkColor, val.iconSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.placeholder);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsBg);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsBgHovered);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsBgSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsDim);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsDimSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsText);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsTextSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsUrl);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsUrlSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.text);
  };
  function PageHandler_SetPage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetPage_Params.prototype.initDefaults_ = function() {
    this.page = new PagePtr();
  };
  PageHandler_SetPage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetPage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetPage_Params.page
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SetPage_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetPage_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetPage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(new codec.Interface(PagePtr));
    return val;
  };

  PageHandler_SetPage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetPage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PagePtr), val.page);
  };
  function PageHandler_QueryAutocomplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_QueryAutocomplete_Params.prototype.initDefaults_ = function() {
    this.input = null;
    this.preventInlineAutocomplete = false;
  };
  PageHandler_QueryAutocomplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_QueryAutocomplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_QueryAutocomplete_Params.input
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_QueryAutocomplete_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_QueryAutocomplete_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_QueryAutocomplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.input =
        decoder.decodeStructPointer(string16$.String16);
    packed = decoder.readUint8();
    val.preventInlineAutocomplete = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_QueryAutocomplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_QueryAutocomplete_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.input);
    packed = 0;
    packed |= (val.preventInlineAutocomplete & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_StopAutocomplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_StopAutocomplete_Params.prototype.initDefaults_ = function() {
    this.clearResult = false;
  };
  PageHandler_StopAutocomplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_StopAutocomplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_StopAutocomplete_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_StopAutocomplete_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_StopAutocomplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.clearResult = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_StopAutocomplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_StopAutocomplete_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.clearResult & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_OpenAutocompleteMatch_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenAutocompleteMatch_Params.prototype.initDefaults_ = function() {
    this.line = 0;
    this.areMatchesShowing = false;
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
    this.mouseButton = 0;
    this.url = null;
    this.timeElapsedSinceLastFocus = null;
  };
  PageHandler_OpenAutocompleteMatch_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenAutocompleteMatch_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageHandler_OpenAutocompleteMatch_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageHandler_OpenAutocompleteMatch_Params.timeElapsedSinceLastFocus
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;






    return validator.validationError.NONE;
  };

  PageHandler_OpenAutocompleteMatch_Params.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_OpenAutocompleteMatch_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenAutocompleteMatch_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.line =
        decoder.decodeStruct(codec.Uint8);
    packed = decoder.readUint8();
    val.areMatchesShowing = (packed >> 0) & 1 ? true : false;
    val.altKey = (packed >> 1) & 1 ? true : false;
    val.ctrlKey = (packed >> 2) & 1 ? true : false;
    val.metaKey = (packed >> 3) & 1 ? true : false;
    val.shiftKey = (packed >> 4) & 1 ? true : false;
    val.mouseButton =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.timeElapsedSinceLastFocus =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  PageHandler_OpenAutocompleteMatch_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenAutocompleteMatch_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.line);
    packed = 0;
    packed |= (val.areMatchesShowing & 1) << 0
    packed |= (val.altKey & 1) << 1
    packed |= (val.ctrlKey & 1) << 2
    packed |= (val.metaKey & 1) << 3
    packed |= (val.shiftKey & 1) << 4
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.mouseButton);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeElapsedSinceLastFocus);
  };
  function PageHandler_DeleteAutocompleteMatch_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DeleteAutocompleteMatch_Params.prototype.initDefaults_ = function() {
    this.line = 0;
  };
  PageHandler_DeleteAutocompleteMatch_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DeleteAutocompleteMatch_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_DeleteAutocompleteMatch_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_DeleteAutocompleteMatch_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DeleteAutocompleteMatch_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.line =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_DeleteAutocompleteMatch_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DeleteAutocompleteMatch_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.line);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_ToggleSuggestionGroupIdVisibility_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ToggleSuggestionGroupIdVisibility_Params.prototype.initDefaults_ = function() {
    this.suggestionGroupId = 0;
  };
  PageHandler_ToggleSuggestionGroupIdVisibility_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ToggleSuggestionGroupIdVisibility_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.suggestionGroupId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ToggleSuggestionGroupIdVisibility_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.suggestionGroupId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_LogCharTypedToRepaintLatency_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_LogCharTypedToRepaintLatency_Params.prototype.initDefaults_ = function() {
    this.latency = null;
  };
  PageHandler_LogCharTypedToRepaintLatency_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_LogCharTypedToRepaintLatency_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_LogCharTypedToRepaintLatency_Params.latency
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_LogCharTypedToRepaintLatency_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_LogCharTypedToRepaintLatency_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_LogCharTypedToRepaintLatency_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.latency =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  PageHandler_LogCharTypedToRepaintLatency_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_LogCharTypedToRepaintLatency_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.latency);
  };
  function Page_AutocompleteResultChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_AutocompleteResultChanged_Params.prototype.initDefaults_ = function() {
    this.result = null;
  };
  Page_AutocompleteResultChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_AutocompleteResultChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_AutocompleteResultChanged_Params.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, omnibox$.AutocompleteResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_AutocompleteResultChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_AutocompleteResultChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Page_AutocompleteResultChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(omnibox$.AutocompleteResult);
    return val;
  };

  Page_AutocompleteResultChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_AutocompleteResultChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(omnibox$.AutocompleteResult, val.result);
  };
  function Page_AutocompleteMatchImageAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_AutocompleteMatchImageAvailable_Params.prototype.initDefaults_ = function() {
    this.matchIndex = 0;
    this.url = null;
    this.dataUrl = null;
  };
  Page_AutocompleteMatchImageAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_AutocompleteMatchImageAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Page_AutocompleteMatchImageAvailable_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_AutocompleteMatchImageAvailable_Params.dataUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_AutocompleteMatchImageAvailable_Params.encodedSize = codec.kStructHeaderSize + 24;

  Page_AutocompleteMatchImageAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new Page_AutocompleteMatchImageAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.matchIndex =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.dataUrl =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Page_AutocompleteMatchImageAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_AutocompleteMatchImageAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.matchIndex);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.dataUrl);
  };
  var kPageHandler_SetPage_Name = 312560942;
  var kPageHandler_QueryAutocomplete_Name = 478220731;
  var kPageHandler_StopAutocomplete_Name = 1485419925;
  var kPageHandler_OpenAutocompleteMatch_Name = 529112159;
  var kPageHandler_DeleteAutocompleteMatch_Name = 1734526482;
  var kPageHandler_ToggleSuggestionGroupIdVisibility_Name = 1940229657;
  var kPageHandler_LogCharTypedToRepaintLatency_Name = 1106793084;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.setPage = function() {
    return PageHandlerProxy.prototype.setPage
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setPage = function(page) {
    var params_ = new PageHandler_SetPage_Params();
    params_.page = page;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetPage_Name,
        codec.align(PageHandler_SetPage_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetPage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.queryAutocomplete = function() {
    return PageHandlerProxy.prototype.queryAutocomplete
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.queryAutocomplete = function(input, preventInlineAutocomplete) {
    var params_ = new PageHandler_QueryAutocomplete_Params();
    params_.input = input;
    params_.preventInlineAutocomplete = preventInlineAutocomplete;
    var builder = new codec.MessageV0Builder(
        kPageHandler_QueryAutocomplete_Name,
        codec.align(PageHandler_QueryAutocomplete_Params.encodedSize));
    builder.encodeStruct(PageHandler_QueryAutocomplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.stopAutocomplete = function() {
    return PageHandlerProxy.prototype.stopAutocomplete
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.stopAutocomplete = function(clearResult) {
    var params_ = new PageHandler_StopAutocomplete_Params();
    params_.clearResult = clearResult;
    var builder = new codec.MessageV0Builder(
        kPageHandler_StopAutocomplete_Name,
        codec.align(PageHandler_StopAutocomplete_Params.encodedSize));
    builder.encodeStruct(PageHandler_StopAutocomplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openAutocompleteMatch = function() {
    return PageHandlerProxy.prototype.openAutocompleteMatch
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openAutocompleteMatch = function(line, url, areMatchesShowing, timeElapsedSinceLastFocus, mouseButton, altKey, ctrlKey, metaKey, shiftKey) {
    var params_ = new PageHandler_OpenAutocompleteMatch_Params();
    params_.line = line;
    params_.url = url;
    params_.areMatchesShowing = areMatchesShowing;
    params_.timeElapsedSinceLastFocus = timeElapsedSinceLastFocus;
    params_.mouseButton = mouseButton;
    params_.altKey = altKey;
    params_.ctrlKey = ctrlKey;
    params_.metaKey = metaKey;
    params_.shiftKey = shiftKey;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenAutocompleteMatch_Name,
        codec.align(PageHandler_OpenAutocompleteMatch_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenAutocompleteMatch_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.deleteAutocompleteMatch = function() {
    return PageHandlerProxy.prototype.deleteAutocompleteMatch
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.deleteAutocompleteMatch = function(line) {
    var params_ = new PageHandler_DeleteAutocompleteMatch_Params();
    params_.line = line;
    var builder = new codec.MessageV0Builder(
        kPageHandler_DeleteAutocompleteMatch_Name,
        codec.align(PageHandler_DeleteAutocompleteMatch_Params.encodedSize));
    builder.encodeStruct(PageHandler_DeleteAutocompleteMatch_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.toggleSuggestionGroupIdVisibility = function() {
    return PageHandlerProxy.prototype.toggleSuggestionGroupIdVisibility
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.toggleSuggestionGroupIdVisibility = function(suggestionGroupId) {
    var params_ = new PageHandler_ToggleSuggestionGroupIdVisibility_Params();
    params_.suggestionGroupId = suggestionGroupId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_ToggleSuggestionGroupIdVisibility_Name,
        codec.align(PageHandler_ToggleSuggestionGroupIdVisibility_Params.encodedSize));
    builder.encodeStruct(PageHandler_ToggleSuggestionGroupIdVisibility_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.logCharTypedToRepaintLatency = function() {
    return PageHandlerProxy.prototype.logCharTypedToRepaintLatency
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.logCharTypedToRepaintLatency = function(latency) {
    var params_ = new PageHandler_LogCharTypedToRepaintLatency_Params();
    params_.latency = latency;
    var builder = new codec.MessageV0Builder(
        kPageHandler_LogCharTypedToRepaintLatency_Name,
        codec.align(PageHandler_LogCharTypedToRepaintLatency_Params.encodedSize));
    builder.encodeStruct(PageHandler_LogCharTypedToRepaintLatency_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.setPage = function(page) {
    return this.delegate_ && this.delegate_.setPage && this.delegate_.setPage(page);
  }
  PageHandlerStub.prototype.queryAutocomplete = function(input, preventInlineAutocomplete) {
    return this.delegate_ && this.delegate_.queryAutocomplete && this.delegate_.queryAutocomplete(input, preventInlineAutocomplete);
  }
  PageHandlerStub.prototype.stopAutocomplete = function(clearResult) {
    return this.delegate_ && this.delegate_.stopAutocomplete && this.delegate_.stopAutocomplete(clearResult);
  }
  PageHandlerStub.prototype.openAutocompleteMatch = function(line, url, areMatchesShowing, timeElapsedSinceLastFocus, mouseButton, altKey, ctrlKey, metaKey, shiftKey) {
    return this.delegate_ && this.delegate_.openAutocompleteMatch && this.delegate_.openAutocompleteMatch(line, url, areMatchesShowing, timeElapsedSinceLastFocus, mouseButton, altKey, ctrlKey, metaKey, shiftKey);
  }
  PageHandlerStub.prototype.deleteAutocompleteMatch = function(line) {
    return this.delegate_ && this.delegate_.deleteAutocompleteMatch && this.delegate_.deleteAutocompleteMatch(line);
  }
  PageHandlerStub.prototype.toggleSuggestionGroupIdVisibility = function(suggestionGroupId) {
    return this.delegate_ && this.delegate_.toggleSuggestionGroupIdVisibility && this.delegate_.toggleSuggestionGroupIdVisibility(suggestionGroupId);
  }
  PageHandlerStub.prototype.logCharTypedToRepaintLatency = function(latency) {
    return this.delegate_ && this.delegate_.logCharTypedToRepaintLatency && this.delegate_.logCharTypedToRepaintLatency(latency);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_SetPage_Name:
      var params = reader.decodeStruct(PageHandler_SetPage_Params);
      this.setPage(params.page);
      return true;
    case kPageHandler_QueryAutocomplete_Name:
      var params = reader.decodeStruct(PageHandler_QueryAutocomplete_Params);
      this.queryAutocomplete(params.input, params.preventInlineAutocomplete);
      return true;
    case kPageHandler_StopAutocomplete_Name:
      var params = reader.decodeStruct(PageHandler_StopAutocomplete_Params);
      this.stopAutocomplete(params.clearResult);
      return true;
    case kPageHandler_OpenAutocompleteMatch_Name:
      var params = reader.decodeStruct(PageHandler_OpenAutocompleteMatch_Params);
      this.openAutocompleteMatch(params.line, params.url, params.areMatchesShowing, params.timeElapsedSinceLastFocus, params.mouseButton, params.altKey, params.ctrlKey, params.metaKey, params.shiftKey);
      return true;
    case kPageHandler_DeleteAutocompleteMatch_Name:
      var params = reader.decodeStruct(PageHandler_DeleteAutocompleteMatch_Params);
      this.deleteAutocompleteMatch(params.line);
      return true;
    case kPageHandler_ToggleSuggestionGroupIdVisibility_Name:
      var params = reader.decodeStruct(PageHandler_ToggleSuggestionGroupIdVisibility_Params);
      this.toggleSuggestionGroupIdVisibility(params.suggestionGroupId);
      return true;
    case kPageHandler_LogCharTypedToRepaintLatency_Name:
      var params = reader.decodeStruct(PageHandler_LogCharTypedToRepaintLatency_Params);
      this.logCharTypedToRepaintLatency(params.latency);
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_SetPage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetPage_Params;
      break;
      case kPageHandler_QueryAutocomplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_QueryAutocomplete_Params;
      break;
      case kPageHandler_StopAutocomplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_StopAutocomplete_Params;
      break;
      case kPageHandler_OpenAutocompleteMatch_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenAutocompleteMatch_Params;
      break;
      case kPageHandler_DeleteAutocompleteMatch_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DeleteAutocompleteMatch_Params;
      break;
      case kPageHandler_ToggleSuggestionGroupIdVisibility_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ToggleSuggestionGroupIdVisibility_Params;
      break;
      case kPageHandler_LogCharTypedToRepaintLatency_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_LogCharTypedToRepaintLatency_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PageHandler = {
    name: 'realbox.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: null,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = null;
  var kPage_AutocompleteResultChanged_Name = 1917401232;
  var kPage_AutocompleteMatchImageAvailable_Name = 1954513154;

  function PagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Page,
                                                   handleOrPtrInfo);
  }

  function PageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Page, associatedInterfacePtrInfo);
  }

  PageAssociatedPtr.prototype =
      Object.create(PagePtr.prototype);
  PageAssociatedPtr.prototype.constructor =
      PageAssociatedPtr;

  function PageProxy(receiver) {
    this.receiver_ = receiver;
  }
  PagePtr.prototype.autocompleteResultChanged = function() {
    return PageProxy.prototype.autocompleteResultChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.autocompleteResultChanged = function(result) {
    var params_ = new Page_AutocompleteResultChanged_Params();
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kPage_AutocompleteResultChanged_Name,
        codec.align(Page_AutocompleteResultChanged_Params.encodedSize));
    builder.encodeStruct(Page_AutocompleteResultChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.autocompleteMatchImageAvailable = function() {
    return PageProxy.prototype.autocompleteMatchImageAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.autocompleteMatchImageAvailable = function(matchIndex, url, dataUrl) {
    var params_ = new Page_AutocompleteMatchImageAvailable_Params();
    params_.matchIndex = matchIndex;
    params_.url = url;
    params_.dataUrl = dataUrl;
    var builder = new codec.MessageV0Builder(
        kPage_AutocompleteMatchImageAvailable_Name,
        codec.align(Page_AutocompleteMatchImageAvailable_Params.encodedSize));
    builder.encodeStruct(Page_AutocompleteMatchImageAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageStub(delegate) {
    this.delegate_ = delegate;
  }
  PageStub.prototype.autocompleteResultChanged = function(result) {
    return this.delegate_ && this.delegate_.autocompleteResultChanged && this.delegate_.autocompleteResultChanged(result);
  }
  PageStub.prototype.autocompleteMatchImageAvailable = function(matchIndex, url, dataUrl) {
    return this.delegate_ && this.delegate_.autocompleteMatchImageAvailable && this.delegate_.autocompleteMatchImageAvailable(matchIndex, url, dataUrl);
  }

  PageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPage_AutocompleteResultChanged_Name:
      var params = reader.decodeStruct(Page_AutocompleteResultChanged_Params);
      this.autocompleteResultChanged(params.result);
      return true;
    case kPage_AutocompleteMatchImageAvailable_Name:
      var params = reader.decodeStruct(Page_AutocompleteMatchImageAvailable_Params);
      this.autocompleteMatchImageAvailable(params.matchIndex, params.url, params.dataUrl);
      return true;
    default:
      return false;
    }
  };

  PageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPage_AutocompleteResultChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_AutocompleteResultChanged_Params;
      break;
      case kPage_AutocompleteMatchImageAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_AutocompleteMatchImageAvailable_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Page = {
    name: 'realbox.mojom.Page',
    kVersion: 0,
    ptrClass: PagePtr,
    proxyClass: PageProxy,
    stubClass: PageStub,
    validateRequest: validatePageRequest,
    validateResponse: null,
  };
  PageStub.prototype.validator = validatePageRequest;
  PageProxy.prototype.validator = null;
  exports.SearchBoxTheme = SearchBoxTheme;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
  exports.Page = Page;
  exports.PagePtr = PagePtr;
  exports.PageAssociatedPtr = PageAssociatedPtr;
})();