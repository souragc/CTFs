// chrome/browser/ui/webui/downloads/downloads.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/downloads/downloads.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('downloads.mojom');



  function Data(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Data.prototype.initDefaults_ = function() {
    this.fileExternallyRemoved = false;
    this.isDangerous = false;
    this.isMixedContent = false;
    this.otr = false;
    this.resume = false;
    this.retry = false;
    this.percent = 0;
    this.started = 0;
    this.total = 0;
    this.byExtId = null;
    this.byExtName = null;
    this.dangerType = null;
    this.dateString = null;
    this.fileName = null;
    this.filePath = null;
    this.fileUrl = null;
    this.id = null;
    this.lastReasonText = null;
    this.progressStatusText = null;
    this.sinceString = null;
    this.state = null;
    this.url = null;
  };
  Data.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Data.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 128}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;











    // validate Data.byExtId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.byExtName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.dangerType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.dateString
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.fileName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.filePath
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.fileUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 64, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 72, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.lastReasonText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 80, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.progressStatusText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 88, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.sinceString
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 96, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.state
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 104, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Data.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 112, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Data.encodedSize = codec.kStructHeaderSize + 120;

  Data.decode = function(decoder) {
    var packed;
    var val = new Data();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.fileExternallyRemoved = (packed >> 0) & 1 ? true : false;
    val.isDangerous = (packed >> 1) & 1 ? true : false;
    val.isMixedContent = (packed >> 2) & 1 ? true : false;
    val.otr = (packed >> 3) & 1 ? true : false;
    val.resume = (packed >> 4) & 1 ? true : false;
    val.retry = (packed >> 5) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.percent =
        decoder.decodeStruct(codec.Int32);
    val.started =
        decoder.decodeStruct(codec.Int32);
    val.total =
        decoder.decodeStruct(codec.Int32);
    val.byExtId =
        decoder.decodeStruct(codec.String);
    val.byExtName =
        decoder.decodeStruct(codec.String);
    val.dangerType =
        decoder.decodeStruct(codec.String);
    val.dateString =
        decoder.decodeStruct(codec.String);
    val.fileName =
        decoder.decodeStruct(codec.String);
    val.filePath =
        decoder.decodeStruct(codec.String);
    val.fileUrl =
        decoder.decodeStruct(codec.String);
    val.id =
        decoder.decodeStruct(codec.String);
    val.lastReasonText =
        decoder.decodeStruct(codec.String);
    val.progressStatusText =
        decoder.decodeStruct(codec.String);
    val.sinceString =
        decoder.decodeStruct(codec.String);
    val.state =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Data.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Data.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.fileExternallyRemoved & 1) << 0
    packed |= (val.isDangerous & 1) << 1
    packed |= (val.isMixedContent & 1) << 2
    packed |= (val.otr & 1) << 3
    packed |= (val.resume & 1) << 4
    packed |= (val.retry & 1) << 5
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.percent);
    encoder.encodeStruct(codec.Int32, val.started);
    encoder.encodeStruct(codec.Int32, val.total);
    encoder.encodeStruct(codec.String, val.byExtId);
    encoder.encodeStruct(codec.String, val.byExtName);
    encoder.encodeStruct(codec.String, val.dangerType);
    encoder.encodeStruct(codec.String, val.dateString);
    encoder.encodeStruct(codec.String, val.fileName);
    encoder.encodeStruct(codec.String, val.filePath);
    encoder.encodeStruct(codec.String, val.fileUrl);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.lastReasonText);
    encoder.encodeStruct(codec.String, val.progressStatusText);
    encoder.encodeStruct(codec.String, val.sinceString);
    encoder.encodeStruct(codec.String, val.state);
    encoder.encodeStruct(codec.String, val.url);
  };
  function PageHandlerFactory_CreatePageHandler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandlerFactory_CreatePageHandler_Params.prototype.initDefaults_ = function() {
    this.page = new PagePtr();
    this.handler = new bindings.InterfaceRequest();
  };
  PageHandlerFactory_CreatePageHandler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandlerFactory_CreatePageHandler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.page
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.handler
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandlerFactory_CreatePageHandler_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandlerFactory_CreatePageHandler_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandlerFactory_CreatePageHandler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(new codec.Interface(PagePtr));
    val.handler =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandlerFactory_CreatePageHandler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandlerFactory_CreatePageHandler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PagePtr), val.page);
    encoder.encodeStruct(codec.InterfaceRequest, val.handler);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_GetDownloads_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetDownloads_Params.prototype.initDefaults_ = function() {
    this.searchTerms = null;
  };
  PageHandler_GetDownloads_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetDownloads_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetDownloads_Params.searchTerms
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetDownloads_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetDownloads_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetDownloads_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.searchTerms =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  PageHandler_GetDownloads_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetDownloads_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.searchTerms);
  };
  function PageHandler_OpenFileRequiringGesture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenFileRequiringGesture_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_OpenFileRequiringGesture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenFileRequiringGesture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OpenFileRequiringGesture_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OpenFileRequiringGesture_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OpenFileRequiringGesture_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenFileRequiringGesture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_OpenFileRequiringGesture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenFileRequiringGesture_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_Drag_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Drag_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_Drag_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Drag_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_Drag_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Drag_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_Drag_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Drag_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_Drag_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Drag_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_SaveDangerousRequiringGesture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SaveDangerousRequiringGesture_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_SaveDangerousRequiringGesture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SaveDangerousRequiringGesture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SaveDangerousRequiringGesture_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SaveDangerousRequiringGesture_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SaveDangerousRequiringGesture_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SaveDangerousRequiringGesture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_SaveDangerousRequiringGesture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SaveDangerousRequiringGesture_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_DiscardDangerous_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DiscardDangerous_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_DiscardDangerous_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DiscardDangerous_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_DiscardDangerous_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_DiscardDangerous_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_DiscardDangerous_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DiscardDangerous_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_DiscardDangerous_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DiscardDangerous_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_RetryDownload_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_RetryDownload_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_RetryDownload_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_RetryDownload_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_RetryDownload_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_RetryDownload_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_RetryDownload_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_RetryDownload_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_RetryDownload_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_RetryDownload_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_Show_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Show_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_Show_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Show_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_Show_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Show_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_Show_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Show_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_Show_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Show_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_Pause_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Pause_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_Pause_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Pause_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_Pause_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Pause_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_Pause_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Pause_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_Pause_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Pause_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_Resume_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Resume_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_Resume_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Resume_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_Resume_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Resume_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_Resume_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Resume_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_Resume_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Resume_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_Remove_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Remove_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_Remove_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Remove_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_Remove_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Remove_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_Remove_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Remove_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_Remove_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Remove_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_Undo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Undo_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_Undo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Undo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Undo_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_Undo_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Undo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_Undo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Undo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_Cancel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_Cancel_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_Cancel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_Cancel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_Cancel_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_Cancel_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_Cancel_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_Cancel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_Cancel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_Cancel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function PageHandler_ClearAll_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ClearAll_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_ClearAll_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ClearAll_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ClearAll_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_ClearAll_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ClearAll_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_ClearAll_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ClearAll_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_OpenDownloadsFolderRequiringGesture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenDownloadsFolderRequiringGesture_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_OpenDownloadsFolderRequiringGesture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenDownloadsFolderRequiringGesture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OpenDownloadsFolderRequiringGesture_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_OpenDownloadsFolderRequiringGesture_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenDownloadsFolderRequiringGesture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_OpenDownloadsFolderRequiringGesture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenDownloadsFolderRequiringGesture_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_OpenDuringScanningRequiringGesture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenDuringScanningRequiringGesture_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  PageHandler_OpenDuringScanningRequiringGesture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenDuringScanningRequiringGesture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OpenDuringScanningRequiringGesture_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OpenDuringScanningRequiringGesture_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OpenDuringScanningRequiringGesture_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenDuringScanningRequiringGesture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_OpenDuringScanningRequiringGesture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenDuringScanningRequiringGesture_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function Page_RemoveItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_RemoveItem_Params.prototype.initDefaults_ = function() {
    this.index = 0;
  };
  Page_RemoveItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_RemoveItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Page_RemoveItem_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_RemoveItem_Params.decode = function(decoder) {
    var packed;
    var val = new Page_RemoveItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.index =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Page_RemoveItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_RemoveItem_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.index);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Page_UpdateItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_UpdateItem_Params.prototype.initDefaults_ = function() {
    this.index = 0;
    this.data = null;
  };
  Page_UpdateItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_UpdateItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Page_UpdateItem_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, Data, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_UpdateItem_Params.encodedSize = codec.kStructHeaderSize + 16;

  Page_UpdateItem_Params.decode = function(decoder) {
    var packed;
    var val = new Page_UpdateItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.index =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.data =
        decoder.decodeStructPointer(Data);
    return val;
  };

  Page_UpdateItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_UpdateItem_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.index);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(Data, val.data);
  };
  function Page_InsertItems_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_InsertItems_Params.prototype.initDefaults_ = function() {
    this.index = 0;
    this.items = null;
  };
  Page_InsertItems_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_InsertItems_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Page_InsertItems_Params.items
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(Data), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_InsertItems_Params.encodedSize = codec.kStructHeaderSize + 16;

  Page_InsertItems_Params.decode = function(decoder) {
    var packed;
    var val = new Page_InsertItems_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.index =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.items =
        decoder.decodeArrayPointer(new codec.PointerTo(Data));
    return val;
  };

  Page_InsertItems_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_InsertItems_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.index);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(Data), val.items);
  };
  function Page_ClearAll_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_ClearAll_Params.prototype.initDefaults_ = function() {
  };
  Page_ClearAll_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_ClearAll_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_ClearAll_Params.encodedSize = codec.kStructHeaderSize + 0;

  Page_ClearAll_Params.decode = function(decoder) {
    var packed;
    var val = new Page_ClearAll_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Page_ClearAll_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_ClearAll_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kPageHandlerFactory_CreatePageHandler_Name = 1132002582;

  function PageHandlerFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandlerFactory,
                                                   handleOrPtrInfo);
  }

  function PageHandlerFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandlerFactory, associatedInterfacePtrInfo);
  }

  PageHandlerFactoryAssociatedPtr.prototype =
      Object.create(PageHandlerFactoryPtr.prototype);
  PageHandlerFactoryAssociatedPtr.prototype.constructor =
      PageHandlerFactoryAssociatedPtr;

  function PageHandlerFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerFactoryPtr.prototype.createPageHandler = function() {
    return PageHandlerFactoryProxy.prototype.createPageHandler
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerFactoryProxy.prototype.createPageHandler = function(page, handler) {
    var params_ = new PageHandlerFactory_CreatePageHandler_Params();
    params_.page = page;
    params_.handler = handler;
    var builder = new codec.MessageV0Builder(
        kPageHandlerFactory_CreatePageHandler_Name,
        codec.align(PageHandlerFactory_CreatePageHandler_Params.encodedSize));
    builder.encodeStruct(PageHandlerFactory_CreatePageHandler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerFactoryStub.prototype.createPageHandler = function(page, handler) {
    return this.delegate_ && this.delegate_.createPageHandler && this.delegate_.createPageHandler(page, handler);
  }

  PageHandlerFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandlerFactory_CreatePageHandler_Name:
      var params = reader.decodeStruct(PageHandlerFactory_CreatePageHandler_Params);
      this.createPageHandler(params.page, params.handler);
      return true;
    default:
      return false;
    }
  };

  PageHandlerFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageHandlerFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandlerFactory_CreatePageHandler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandlerFactory_CreatePageHandler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PageHandlerFactory = {
    name: 'downloads.mojom.PageHandlerFactory',
    kVersion: 0,
    ptrClass: PageHandlerFactoryPtr,
    proxyClass: PageHandlerFactoryProxy,
    stubClass: PageHandlerFactoryStub,
    validateRequest: validatePageHandlerFactoryRequest,
    validateResponse: null,
  };
  PageHandlerFactoryStub.prototype.validator = validatePageHandlerFactoryRequest;
  PageHandlerFactoryProxy.prototype.validator = null;
  var kPageHandler_GetDownloads_Name = 312560942;
  var kPageHandler_OpenFileRequiringGesture_Name = 478220731;
  var kPageHandler_Drag_Name = 1485419925;
  var kPageHandler_SaveDangerousRequiringGesture_Name = 529112159;
  var kPageHandler_DiscardDangerous_Name = 1734526482;
  var kPageHandler_RetryDownload_Name = 1940229657;
  var kPageHandler_Show_Name = 1106793084;
  var kPageHandler_Pause_Name = 636867045;
  var kPageHandler_Resume_Name = 1722519447;
  var kPageHandler_Remove_Name = 1953067478;
  var kPageHandler_Undo_Name = 1164212660;
  var kPageHandler_Cancel_Name = 1840845054;
  var kPageHandler_ClearAll_Name = 806552915;
  var kPageHandler_OpenDownloadsFolderRequiringGesture_Name = 777218212;
  var kPageHandler_OpenDuringScanningRequiringGesture_Name = 956051196;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.getDownloads = function() {
    return PageHandlerProxy.prototype.getDownloads
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getDownloads = function(searchTerms) {
    var params_ = new PageHandler_GetDownloads_Params();
    params_.searchTerms = searchTerms;
    var builder = new codec.MessageV0Builder(
        kPageHandler_GetDownloads_Name,
        codec.align(PageHandler_GetDownloads_Params.encodedSize));
    builder.encodeStruct(PageHandler_GetDownloads_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openFileRequiringGesture = function() {
    return PageHandlerProxy.prototype.openFileRequiringGesture
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openFileRequiringGesture = function(id) {
    var params_ = new PageHandler_OpenFileRequiringGesture_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenFileRequiringGesture_Name,
        codec.align(PageHandler_OpenFileRequiringGesture_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenFileRequiringGesture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.drag = function() {
    return PageHandlerProxy.prototype.drag
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.drag = function(id) {
    var params_ = new PageHandler_Drag_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_Drag_Name,
        codec.align(PageHandler_Drag_Params.encodedSize));
    builder.encodeStruct(PageHandler_Drag_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.saveDangerousRequiringGesture = function() {
    return PageHandlerProxy.prototype.saveDangerousRequiringGesture
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.saveDangerousRequiringGesture = function(id) {
    var params_ = new PageHandler_SaveDangerousRequiringGesture_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SaveDangerousRequiringGesture_Name,
        codec.align(PageHandler_SaveDangerousRequiringGesture_Params.encodedSize));
    builder.encodeStruct(PageHandler_SaveDangerousRequiringGesture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.discardDangerous = function() {
    return PageHandlerProxy.prototype.discardDangerous
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.discardDangerous = function(id) {
    var params_ = new PageHandler_DiscardDangerous_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_DiscardDangerous_Name,
        codec.align(PageHandler_DiscardDangerous_Params.encodedSize));
    builder.encodeStruct(PageHandler_DiscardDangerous_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.retryDownload = function() {
    return PageHandlerProxy.prototype.retryDownload
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.retryDownload = function(id) {
    var params_ = new PageHandler_RetryDownload_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_RetryDownload_Name,
        codec.align(PageHandler_RetryDownload_Params.encodedSize));
    builder.encodeStruct(PageHandler_RetryDownload_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.show = function() {
    return PageHandlerProxy.prototype.show
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.show = function(id) {
    var params_ = new PageHandler_Show_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_Show_Name,
        codec.align(PageHandler_Show_Params.encodedSize));
    builder.encodeStruct(PageHandler_Show_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.pause = function() {
    return PageHandlerProxy.prototype.pause
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.pause = function(id) {
    var params_ = new PageHandler_Pause_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_Pause_Name,
        codec.align(PageHandler_Pause_Params.encodedSize));
    builder.encodeStruct(PageHandler_Pause_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.resume = function() {
    return PageHandlerProxy.prototype.resume
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.resume = function(id) {
    var params_ = new PageHandler_Resume_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_Resume_Name,
        codec.align(PageHandler_Resume_Params.encodedSize));
    builder.encodeStruct(PageHandler_Resume_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.remove = function() {
    return PageHandlerProxy.prototype.remove
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.remove = function(id) {
    var params_ = new PageHandler_Remove_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_Remove_Name,
        codec.align(PageHandler_Remove_Params.encodedSize));
    builder.encodeStruct(PageHandler_Remove_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.undo = function() {
    return PageHandlerProxy.prototype.undo
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.undo = function() {
    var params_ = new PageHandler_Undo_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_Undo_Name,
        codec.align(PageHandler_Undo_Params.encodedSize));
    builder.encodeStruct(PageHandler_Undo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.cancel = function() {
    return PageHandlerProxy.prototype.cancel
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.cancel = function(id) {
    var params_ = new PageHandler_Cancel_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_Cancel_Name,
        codec.align(PageHandler_Cancel_Params.encodedSize));
    builder.encodeStruct(PageHandler_Cancel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.clearAll = function() {
    return PageHandlerProxy.prototype.clearAll
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.clearAll = function() {
    var params_ = new PageHandler_ClearAll_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_ClearAll_Name,
        codec.align(PageHandler_ClearAll_Params.encodedSize));
    builder.encodeStruct(PageHandler_ClearAll_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openDownloadsFolderRequiringGesture = function() {
    return PageHandlerProxy.prototype.openDownloadsFolderRequiringGesture
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openDownloadsFolderRequiringGesture = function() {
    var params_ = new PageHandler_OpenDownloadsFolderRequiringGesture_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenDownloadsFolderRequiringGesture_Name,
        codec.align(PageHandler_OpenDownloadsFolderRequiringGesture_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenDownloadsFolderRequiringGesture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openDuringScanningRequiringGesture = function() {
    return PageHandlerProxy.prototype.openDuringScanningRequiringGesture
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openDuringScanningRequiringGesture = function(id) {
    var params_ = new PageHandler_OpenDuringScanningRequiringGesture_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenDuringScanningRequiringGesture_Name,
        codec.align(PageHandler_OpenDuringScanningRequiringGesture_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenDuringScanningRequiringGesture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.getDownloads = function(searchTerms) {
    return this.delegate_ && this.delegate_.getDownloads && this.delegate_.getDownloads(searchTerms);
  }
  PageHandlerStub.prototype.openFileRequiringGesture = function(id) {
    return this.delegate_ && this.delegate_.openFileRequiringGesture && this.delegate_.openFileRequiringGesture(id);
  }
  PageHandlerStub.prototype.drag = function(id) {
    return this.delegate_ && this.delegate_.drag && this.delegate_.drag(id);
  }
  PageHandlerStub.prototype.saveDangerousRequiringGesture = function(id) {
    return this.delegate_ && this.delegate_.saveDangerousRequiringGesture && this.delegate_.saveDangerousRequiringGesture(id);
  }
  PageHandlerStub.prototype.discardDangerous = function(id) {
    return this.delegate_ && this.delegate_.discardDangerous && this.delegate_.discardDangerous(id);
  }
  PageHandlerStub.prototype.retryDownload = function(id) {
    return this.delegate_ && this.delegate_.retryDownload && this.delegate_.retryDownload(id);
  }
  PageHandlerStub.prototype.show = function(id) {
    return this.delegate_ && this.delegate_.show && this.delegate_.show(id);
  }
  PageHandlerStub.prototype.pause = function(id) {
    return this.delegate_ && this.delegate_.pause && this.delegate_.pause(id);
  }
  PageHandlerStub.prototype.resume = function(id) {
    return this.delegate_ && this.delegate_.resume && this.delegate_.resume(id);
  }
  PageHandlerStub.prototype.remove = function(id) {
    return this.delegate_ && this.delegate_.remove && this.delegate_.remove(id);
  }
  PageHandlerStub.prototype.undo = function() {
    return this.delegate_ && this.delegate_.undo && this.delegate_.undo();
  }
  PageHandlerStub.prototype.cancel = function(id) {
    return this.delegate_ && this.delegate_.cancel && this.delegate_.cancel(id);
  }
  PageHandlerStub.prototype.clearAll = function() {
    return this.delegate_ && this.delegate_.clearAll && this.delegate_.clearAll();
  }
  PageHandlerStub.prototype.openDownloadsFolderRequiringGesture = function() {
    return this.delegate_ && this.delegate_.openDownloadsFolderRequiringGesture && this.delegate_.openDownloadsFolderRequiringGesture();
  }
  PageHandlerStub.prototype.openDuringScanningRequiringGesture = function(id) {
    return this.delegate_ && this.delegate_.openDuringScanningRequiringGesture && this.delegate_.openDuringScanningRequiringGesture(id);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_GetDownloads_Name:
      var params = reader.decodeStruct(PageHandler_GetDownloads_Params);
      this.getDownloads(params.searchTerms);
      return true;
    case kPageHandler_OpenFileRequiringGesture_Name:
      var params = reader.decodeStruct(PageHandler_OpenFileRequiringGesture_Params);
      this.openFileRequiringGesture(params.id);
      return true;
    case kPageHandler_Drag_Name:
      var params = reader.decodeStruct(PageHandler_Drag_Params);
      this.drag(params.id);
      return true;
    case kPageHandler_SaveDangerousRequiringGesture_Name:
      var params = reader.decodeStruct(PageHandler_SaveDangerousRequiringGesture_Params);
      this.saveDangerousRequiringGesture(params.id);
      return true;
    case kPageHandler_DiscardDangerous_Name:
      var params = reader.decodeStruct(PageHandler_DiscardDangerous_Params);
      this.discardDangerous(params.id);
      return true;
    case kPageHandler_RetryDownload_Name:
      var params = reader.decodeStruct(PageHandler_RetryDownload_Params);
      this.retryDownload(params.id);
      return true;
    case kPageHandler_Show_Name:
      var params = reader.decodeStruct(PageHandler_Show_Params);
      this.show(params.id);
      return true;
    case kPageHandler_Pause_Name:
      var params = reader.decodeStruct(PageHandler_Pause_Params);
      this.pause(params.id);
      return true;
    case kPageHandler_Resume_Name:
      var params = reader.decodeStruct(PageHandler_Resume_Params);
      this.resume(params.id);
      return true;
    case kPageHandler_Remove_Name:
      var params = reader.decodeStruct(PageHandler_Remove_Params);
      this.remove(params.id);
      return true;
    case kPageHandler_Undo_Name:
      var params = reader.decodeStruct(PageHandler_Undo_Params);
      this.undo();
      return true;
    case kPageHandler_Cancel_Name:
      var params = reader.decodeStruct(PageHandler_Cancel_Params);
      this.cancel(params.id);
      return true;
    case kPageHandler_ClearAll_Name:
      var params = reader.decodeStruct(PageHandler_ClearAll_Params);
      this.clearAll();
      return true;
    case kPageHandler_OpenDownloadsFolderRequiringGesture_Name:
      var params = reader.decodeStruct(PageHandler_OpenDownloadsFolderRequiringGesture_Params);
      this.openDownloadsFolderRequiringGesture();
      return true;
    case kPageHandler_OpenDuringScanningRequiringGesture_Name:
      var params = reader.decodeStruct(PageHandler_OpenDuringScanningRequiringGesture_Params);
      this.openDuringScanningRequiringGesture(params.id);
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_GetDownloads_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_GetDownloads_Params;
      break;
      case kPageHandler_OpenFileRequiringGesture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenFileRequiringGesture_Params;
      break;
      case kPageHandler_Drag_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Drag_Params;
      break;
      case kPageHandler_SaveDangerousRequiringGesture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SaveDangerousRequiringGesture_Params;
      break;
      case kPageHandler_DiscardDangerous_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DiscardDangerous_Params;
      break;
      case kPageHandler_RetryDownload_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_RetryDownload_Params;
      break;
      case kPageHandler_Show_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Show_Params;
      break;
      case kPageHandler_Pause_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Pause_Params;
      break;
      case kPageHandler_Resume_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Resume_Params;
      break;
      case kPageHandler_Remove_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Remove_Params;
      break;
      case kPageHandler_Undo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Undo_Params;
      break;
      case kPageHandler_Cancel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_Cancel_Params;
      break;
      case kPageHandler_ClearAll_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ClearAll_Params;
      break;
      case kPageHandler_OpenDownloadsFolderRequiringGesture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenDownloadsFolderRequiringGesture_Params;
      break;
      case kPageHandler_OpenDuringScanningRequiringGesture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenDuringScanningRequiringGesture_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PageHandler = {
    name: 'downloads.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: null,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = null;
  var kPage_RemoveItem_Name = 1917401232;
  var kPage_UpdateItem_Name = 1954513154;
  var kPage_InsertItems_Name = 205701981;
  var kPage_ClearAll_Name = 830153472;

  function PagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Page,
                                                   handleOrPtrInfo);
  }

  function PageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Page, associatedInterfacePtrInfo);
  }

  PageAssociatedPtr.prototype =
      Object.create(PagePtr.prototype);
  PageAssociatedPtr.prototype.constructor =
      PageAssociatedPtr;

  function PageProxy(receiver) {
    this.receiver_ = receiver;
  }
  PagePtr.prototype.removeItem = function() {
    return PageProxy.prototype.removeItem
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.removeItem = function(index) {
    var params_ = new Page_RemoveItem_Params();
    params_.index = index;
    var builder = new codec.MessageV0Builder(
        kPage_RemoveItem_Name,
        codec.align(Page_RemoveItem_Params.encodedSize));
    builder.encodeStruct(Page_RemoveItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.updateItem = function() {
    return PageProxy.prototype.updateItem
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.updateItem = function(index, data) {
    var params_ = new Page_UpdateItem_Params();
    params_.index = index;
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kPage_UpdateItem_Name,
        codec.align(Page_UpdateItem_Params.encodedSize));
    builder.encodeStruct(Page_UpdateItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.insertItems = function() {
    return PageProxy.prototype.insertItems
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.insertItems = function(index, items) {
    var params_ = new Page_InsertItems_Params();
    params_.index = index;
    params_.items = items;
    var builder = new codec.MessageV0Builder(
        kPage_InsertItems_Name,
        codec.align(Page_InsertItems_Params.encodedSize));
    builder.encodeStruct(Page_InsertItems_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.clearAll = function() {
    return PageProxy.prototype.clearAll
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.clearAll = function() {
    var params_ = new Page_ClearAll_Params();
    var builder = new codec.MessageV0Builder(
        kPage_ClearAll_Name,
        codec.align(Page_ClearAll_Params.encodedSize));
    builder.encodeStruct(Page_ClearAll_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageStub(delegate) {
    this.delegate_ = delegate;
  }
  PageStub.prototype.removeItem = function(index) {
    return this.delegate_ && this.delegate_.removeItem && this.delegate_.removeItem(index);
  }
  PageStub.prototype.updateItem = function(index, data) {
    return this.delegate_ && this.delegate_.updateItem && this.delegate_.updateItem(index, data);
  }
  PageStub.prototype.insertItems = function(index, items) {
    return this.delegate_ && this.delegate_.insertItems && this.delegate_.insertItems(index, items);
  }
  PageStub.prototype.clearAll = function() {
    return this.delegate_ && this.delegate_.clearAll && this.delegate_.clearAll();
  }

  PageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPage_RemoveItem_Name:
      var params = reader.decodeStruct(Page_RemoveItem_Params);
      this.removeItem(params.index);
      return true;
    case kPage_UpdateItem_Name:
      var params = reader.decodeStruct(Page_UpdateItem_Params);
      this.updateItem(params.index, params.data);
      return true;
    case kPage_InsertItems_Name:
      var params = reader.decodeStruct(Page_InsertItems_Params);
      this.insertItems(params.index, params.items);
      return true;
    case kPage_ClearAll_Name:
      var params = reader.decodeStruct(Page_ClearAll_Params);
      this.clearAll();
      return true;
    default:
      return false;
    }
  };

  PageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPage_RemoveItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_RemoveItem_Params;
      break;
      case kPage_UpdateItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_UpdateItem_Params;
      break;
      case kPage_InsertItems_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_InsertItems_Params;
      break;
      case kPage_ClearAll_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_ClearAll_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Page = {
    name: 'downloads.mojom.Page',
    kVersion: 0,
    ptrClass: PagePtr,
    proxyClass: PageProxy,
    stubClass: PageStub,
    validateRequest: validatePageRequest,
    validateResponse: null,
  };
  PageStub.prototype.validator = validatePageRequest;
  PageProxy.prototype.validator = null;
  exports.Data = Data;
  exports.PageHandlerFactory = PageHandlerFactory;
  exports.PageHandlerFactoryPtr = PageHandlerFactoryPtr;
  exports.PageHandlerFactoryAssociatedPtr = PageHandlerFactoryAssociatedPtr;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
  exports.Page = Page;
  exports.PagePtr = PagePtr;
  exports.PageAssociatedPtr = PageAssociatedPtr;
})();