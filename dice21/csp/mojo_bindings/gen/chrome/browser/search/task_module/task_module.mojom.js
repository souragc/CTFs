// chrome/browser/search/task_module/task_module.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/search/task_module/task_module.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('taskModule.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }


  var TaskModuleType = {};
  TaskModuleType.kRecipe = 0;
  TaskModuleType.kShopping = 1;
  TaskModuleType.MIN_VALUE = 0,
  TaskModuleType.MAX_VALUE = 1,

  TaskModuleType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TaskModuleType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TaskItem(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskItem.prototype.initDefaults_ = function() {
    this.name = null;
    this.imageUrl = null;
    this.price = null;
    this.info = null;
    this.siteName = null;
    this.targetUrl = null;
  };
  TaskItem.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskItem.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskItem.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskItem.imageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskItem.price
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskItem.info
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskItem.siteName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskItem.targetUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TaskItem.encodedSize = codec.kStructHeaderSize + 48;

  TaskItem.decode = function(decoder) {
    var packed;
    var val = new TaskItem();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.imageUrl =
        decoder.decodeStructPointer(url$.Url);
    val.price =
        decoder.decodeStruct(codec.NullableString);
    val.info =
        decoder.decodeStruct(codec.String);
    val.siteName =
        decoder.decodeStruct(codec.NullableString);
    val.targetUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  TaskItem.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskItem.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStructPointer(url$.Url, val.imageUrl);
    encoder.encodeStruct(codec.NullableString, val.price);
    encoder.encodeStruct(codec.String, val.info);
    encoder.encodeStruct(codec.NullableString, val.siteName);
    encoder.encodeStructPointer(url$.Url, val.targetUrl);
  };
  function RelatedSearch(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RelatedSearch.prototype.initDefaults_ = function() {
    this.text = null;
    this.targetUrl = null;
  };
  RelatedSearch.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RelatedSearch.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RelatedSearch.text
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate RelatedSearch.targetUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RelatedSearch.encodedSize = codec.kStructHeaderSize + 16;

  RelatedSearch.decode = function(decoder) {
    var packed;
    var val = new RelatedSearch();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.text =
        decoder.decodeStruct(codec.String);
    val.targetUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  RelatedSearch.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RelatedSearch.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.text);
    encoder.encodeStructPointer(url$.Url, val.targetUrl);
  };
  function Task(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Task.prototype.initDefaults_ = function() {
    this.title = null;
    this.name = null;
    this.taskItems = null;
    this.relatedSearches = null;
  };
  Task.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Task.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Task.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Task.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Task.taskItems
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(TaskItem), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Task.relatedSearches
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(RelatedSearch), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Task.encodedSize = codec.kStructHeaderSize + 32;

  Task.decode = function(decoder) {
    var packed;
    var val = new Task();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.title =
        decoder.decodeStruct(codec.String);
    val.name =
        decoder.decodeStruct(codec.String);
    val.taskItems =
        decoder.decodeArrayPointer(new codec.PointerTo(TaskItem));
    val.relatedSearches =
        decoder.decodeArrayPointer(new codec.PointerTo(RelatedSearch));
    return val;
  };

  Task.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Task.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeArrayPointer(new codec.PointerTo(TaskItem), val.taskItems);
    encoder.encodeArrayPointer(new codec.PointerTo(RelatedSearch), val.relatedSearches);
  };
  function TaskModuleHandler_GetPrimaryTask_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskModuleHandler_GetPrimaryTask_Params.prototype.initDefaults_ = function() {
    this.taskModuleType = 0;
  };
  TaskModuleHandler_GetPrimaryTask_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskModuleHandler_GetPrimaryTask_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_GetPrimaryTask_Params.taskModuleType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TaskModuleType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TaskModuleHandler_GetPrimaryTask_Params.encodedSize = codec.kStructHeaderSize + 8;

  TaskModuleHandler_GetPrimaryTask_Params.decode = function(decoder) {
    var packed;
    var val = new TaskModuleHandler_GetPrimaryTask_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.taskModuleType =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TaskModuleHandler_GetPrimaryTask_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskModuleHandler_GetPrimaryTask_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.taskModuleType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TaskModuleHandler_GetPrimaryTask_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskModuleHandler_GetPrimaryTask_ResponseParams.prototype.initDefaults_ = function() {
    this.task = null;
  };
  TaskModuleHandler_GetPrimaryTask_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskModuleHandler_GetPrimaryTask_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_GetPrimaryTask_ResponseParams.task
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Task, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TaskModuleHandler_GetPrimaryTask_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TaskModuleHandler_GetPrimaryTask_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TaskModuleHandler_GetPrimaryTask_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.task =
        decoder.decodeStructPointer(Task);
    return val;
  };

  TaskModuleHandler_GetPrimaryTask_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskModuleHandler_GetPrimaryTask_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Task, val.task);
  };
  function TaskModuleHandler_DismissTask_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskModuleHandler_DismissTask_Params.prototype.initDefaults_ = function() {
    this.taskModuleType = 0;
    this.taskName = null;
  };
  TaskModuleHandler_DismissTask_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskModuleHandler_DismissTask_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_DismissTask_Params.taskModuleType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TaskModuleType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_DismissTask_Params.taskName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TaskModuleHandler_DismissTask_Params.encodedSize = codec.kStructHeaderSize + 16;

  TaskModuleHandler_DismissTask_Params.decode = function(decoder) {
    var packed;
    var val = new TaskModuleHandler_DismissTask_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.taskModuleType =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.taskName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TaskModuleHandler_DismissTask_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskModuleHandler_DismissTask_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.taskModuleType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.taskName);
  };
  function TaskModuleHandler_RestoreTask_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskModuleHandler_RestoreTask_Params.prototype.initDefaults_ = function() {
    this.taskModuleType = 0;
    this.taskName = null;
  };
  TaskModuleHandler_RestoreTask_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskModuleHandler_RestoreTask_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_RestoreTask_Params.taskModuleType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TaskModuleType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_RestoreTask_Params.taskName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TaskModuleHandler_RestoreTask_Params.encodedSize = codec.kStructHeaderSize + 16;

  TaskModuleHandler_RestoreTask_Params.decode = function(decoder) {
    var packed;
    var val = new TaskModuleHandler_RestoreTask_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.taskModuleType =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.taskName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TaskModuleHandler_RestoreTask_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskModuleHandler_RestoreTask_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.taskModuleType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.taskName);
  };
  function TaskModuleHandler_OnTaskItemClicked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskModuleHandler_OnTaskItemClicked_Params.prototype.initDefaults_ = function() {
    this.taskModuleType = 0;
    this.index = 0;
  };
  TaskModuleHandler_OnTaskItemClicked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskModuleHandler_OnTaskItemClicked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_OnTaskItemClicked_Params.taskModuleType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TaskModuleType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TaskModuleHandler_OnTaskItemClicked_Params.encodedSize = codec.kStructHeaderSize + 8;

  TaskModuleHandler_OnTaskItemClicked_Params.decode = function(decoder) {
    var packed;
    var val = new TaskModuleHandler_OnTaskItemClicked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.taskModuleType =
        decoder.decodeStruct(codec.Int32);
    val.index =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  TaskModuleHandler_OnTaskItemClicked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskModuleHandler_OnTaskItemClicked_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.taskModuleType);
    encoder.encodeStruct(codec.Uint32, val.index);
  };
  function TaskModuleHandler_OnRelatedSearchClicked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TaskModuleHandler_OnRelatedSearchClicked_Params.prototype.initDefaults_ = function() {
    this.taskModuleType = 0;
    this.index = 0;
  };
  TaskModuleHandler_OnRelatedSearchClicked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TaskModuleHandler_OnRelatedSearchClicked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TaskModuleHandler_OnRelatedSearchClicked_Params.taskModuleType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TaskModuleType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TaskModuleHandler_OnRelatedSearchClicked_Params.encodedSize = codec.kStructHeaderSize + 8;

  TaskModuleHandler_OnRelatedSearchClicked_Params.decode = function(decoder) {
    var packed;
    var val = new TaskModuleHandler_OnRelatedSearchClicked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.taskModuleType =
        decoder.decodeStruct(codec.Int32);
    val.index =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  TaskModuleHandler_OnRelatedSearchClicked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TaskModuleHandler_OnRelatedSearchClicked_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.taskModuleType);
    encoder.encodeStruct(codec.Uint32, val.index);
  };
  var kTaskModuleHandler_GetPrimaryTask_Name = 1554760356;
  var kTaskModuleHandler_DismissTask_Name = 104671766;
  var kTaskModuleHandler_RestoreTask_Name = 314150466;
  var kTaskModuleHandler_OnTaskItemClicked_Name = 146906266;
  var kTaskModuleHandler_OnRelatedSearchClicked_Name = 804027406;

  function TaskModuleHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TaskModuleHandler,
                                                   handleOrPtrInfo);
  }

  function TaskModuleHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TaskModuleHandler, associatedInterfacePtrInfo);
  }

  TaskModuleHandlerAssociatedPtr.prototype =
      Object.create(TaskModuleHandlerPtr.prototype);
  TaskModuleHandlerAssociatedPtr.prototype.constructor =
      TaskModuleHandlerAssociatedPtr;

  function TaskModuleHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  TaskModuleHandlerPtr.prototype.getPrimaryTask = function() {
    return TaskModuleHandlerProxy.prototype.getPrimaryTask
        .apply(this.ptr.getProxy(), arguments);
  };

  TaskModuleHandlerProxy.prototype.getPrimaryTask = function(taskModuleType) {
    var params_ = new TaskModuleHandler_GetPrimaryTask_Params();
    params_.taskModuleType = taskModuleType;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTaskModuleHandler_GetPrimaryTask_Name,
          codec.align(TaskModuleHandler_GetPrimaryTask_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TaskModuleHandler_GetPrimaryTask_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TaskModuleHandler_GetPrimaryTask_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TaskModuleHandlerPtr.prototype.dismissTask = function() {
    return TaskModuleHandlerProxy.prototype.dismissTask
        .apply(this.ptr.getProxy(), arguments);
  };

  TaskModuleHandlerProxy.prototype.dismissTask = function(taskModuleType, taskName) {
    var params_ = new TaskModuleHandler_DismissTask_Params();
    params_.taskModuleType = taskModuleType;
    params_.taskName = taskName;
    var builder = new codec.MessageV0Builder(
        kTaskModuleHandler_DismissTask_Name,
        codec.align(TaskModuleHandler_DismissTask_Params.encodedSize));
    builder.encodeStruct(TaskModuleHandler_DismissTask_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TaskModuleHandlerPtr.prototype.restoreTask = function() {
    return TaskModuleHandlerProxy.prototype.restoreTask
        .apply(this.ptr.getProxy(), arguments);
  };

  TaskModuleHandlerProxy.prototype.restoreTask = function(taskModuleType, taskName) {
    var params_ = new TaskModuleHandler_RestoreTask_Params();
    params_.taskModuleType = taskModuleType;
    params_.taskName = taskName;
    var builder = new codec.MessageV0Builder(
        kTaskModuleHandler_RestoreTask_Name,
        codec.align(TaskModuleHandler_RestoreTask_Params.encodedSize));
    builder.encodeStruct(TaskModuleHandler_RestoreTask_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TaskModuleHandlerPtr.prototype.onTaskItemClicked = function() {
    return TaskModuleHandlerProxy.prototype.onTaskItemClicked
        .apply(this.ptr.getProxy(), arguments);
  };

  TaskModuleHandlerProxy.prototype.onTaskItemClicked = function(taskModuleType, index) {
    var params_ = new TaskModuleHandler_OnTaskItemClicked_Params();
    params_.taskModuleType = taskModuleType;
    params_.index = index;
    var builder = new codec.MessageV0Builder(
        kTaskModuleHandler_OnTaskItemClicked_Name,
        codec.align(TaskModuleHandler_OnTaskItemClicked_Params.encodedSize));
    builder.encodeStruct(TaskModuleHandler_OnTaskItemClicked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TaskModuleHandlerPtr.prototype.onRelatedSearchClicked = function() {
    return TaskModuleHandlerProxy.prototype.onRelatedSearchClicked
        .apply(this.ptr.getProxy(), arguments);
  };

  TaskModuleHandlerProxy.prototype.onRelatedSearchClicked = function(taskModuleType, index) {
    var params_ = new TaskModuleHandler_OnRelatedSearchClicked_Params();
    params_.taskModuleType = taskModuleType;
    params_.index = index;
    var builder = new codec.MessageV0Builder(
        kTaskModuleHandler_OnRelatedSearchClicked_Name,
        codec.align(TaskModuleHandler_OnRelatedSearchClicked_Params.encodedSize));
    builder.encodeStruct(TaskModuleHandler_OnRelatedSearchClicked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TaskModuleHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  TaskModuleHandlerStub.prototype.getPrimaryTask = function(taskModuleType) {
    return this.delegate_ && this.delegate_.getPrimaryTask && this.delegate_.getPrimaryTask(taskModuleType);
  }
  TaskModuleHandlerStub.prototype.dismissTask = function(taskModuleType, taskName) {
    return this.delegate_ && this.delegate_.dismissTask && this.delegate_.dismissTask(taskModuleType, taskName);
  }
  TaskModuleHandlerStub.prototype.restoreTask = function(taskModuleType, taskName) {
    return this.delegate_ && this.delegate_.restoreTask && this.delegate_.restoreTask(taskModuleType, taskName);
  }
  TaskModuleHandlerStub.prototype.onTaskItemClicked = function(taskModuleType, index) {
    return this.delegate_ && this.delegate_.onTaskItemClicked && this.delegate_.onTaskItemClicked(taskModuleType, index);
  }
  TaskModuleHandlerStub.prototype.onRelatedSearchClicked = function(taskModuleType, index) {
    return this.delegate_ && this.delegate_.onRelatedSearchClicked && this.delegate_.onRelatedSearchClicked(taskModuleType, index);
  }

  TaskModuleHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTaskModuleHandler_DismissTask_Name:
      var params = reader.decodeStruct(TaskModuleHandler_DismissTask_Params);
      this.dismissTask(params.taskModuleType, params.taskName);
      return true;
    case kTaskModuleHandler_RestoreTask_Name:
      var params = reader.decodeStruct(TaskModuleHandler_RestoreTask_Params);
      this.restoreTask(params.taskModuleType, params.taskName);
      return true;
    case kTaskModuleHandler_OnTaskItemClicked_Name:
      var params = reader.decodeStruct(TaskModuleHandler_OnTaskItemClicked_Params);
      this.onTaskItemClicked(params.taskModuleType, params.index);
      return true;
    case kTaskModuleHandler_OnRelatedSearchClicked_Name:
      var params = reader.decodeStruct(TaskModuleHandler_OnRelatedSearchClicked_Params);
      this.onRelatedSearchClicked(params.taskModuleType, params.index);
      return true;
    default:
      return false;
    }
  };

  TaskModuleHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTaskModuleHandler_GetPrimaryTask_Name:
      var params = reader.decodeStruct(TaskModuleHandler_GetPrimaryTask_Params);
      this.getPrimaryTask(params.taskModuleType).then(function(response) {
        var responseParams =
            new TaskModuleHandler_GetPrimaryTask_ResponseParams();
        responseParams.task = response.task;
        var builder = new codec.MessageV1Builder(
            kTaskModuleHandler_GetPrimaryTask_Name,
            codec.align(TaskModuleHandler_GetPrimaryTask_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TaskModuleHandler_GetPrimaryTask_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTaskModuleHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTaskModuleHandler_GetPrimaryTask_Name:
        if (message.expectsResponse())
          paramsClass = TaskModuleHandler_GetPrimaryTask_Params;
      break;
      case kTaskModuleHandler_DismissTask_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TaskModuleHandler_DismissTask_Params;
      break;
      case kTaskModuleHandler_RestoreTask_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TaskModuleHandler_RestoreTask_Params;
      break;
      case kTaskModuleHandler_OnTaskItemClicked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TaskModuleHandler_OnTaskItemClicked_Params;
      break;
      case kTaskModuleHandler_OnRelatedSearchClicked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TaskModuleHandler_OnRelatedSearchClicked_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTaskModuleHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTaskModuleHandler_GetPrimaryTask_Name:
        if (message.isResponse())
          paramsClass = TaskModuleHandler_GetPrimaryTask_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TaskModuleHandler = {
    name: 'task_module.mojom.TaskModuleHandler',
    kVersion: 0,
    ptrClass: TaskModuleHandlerPtr,
    proxyClass: TaskModuleHandlerProxy,
    stubClass: TaskModuleHandlerStub,
    validateRequest: validateTaskModuleHandlerRequest,
    validateResponse: validateTaskModuleHandlerResponse,
  };
  TaskModuleHandlerStub.prototype.validator = validateTaskModuleHandlerRequest;
  TaskModuleHandlerProxy.prototype.validator = validateTaskModuleHandlerResponse;
  exports.TaskModuleType = TaskModuleType;
  exports.TaskItem = TaskItem;
  exports.RelatedSearch = RelatedSearch;
  exports.Task = Task;
  exports.TaskModuleHandler = TaskModuleHandler;
  exports.TaskModuleHandlerPtr = TaskModuleHandlerPtr;
  exports.TaskModuleHandlerAssociatedPtr = TaskModuleHandlerAssociatedPtr;
})();