// chrome/browser/promo_browser_command/promo_browser_command.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/promo_browser_command/promo_browser_command.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('promoBrowserCommand.mojom');


  var Command = {};
  Command.kUnknownCommand = 0;
  Command.kOpenSafetyCheck = 1;
  Command.kOpenSafeBrowsingEnhancedProtectionSettings = 2;
  Command.MIN_VALUE = 0,
  Command.MAX_VALUE = 2,

  Command.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  Command.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ClickInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClickInfo.prototype.initDefaults_ = function() {
    this.middleButton = false;
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
  };
  ClickInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClickInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;






    return validator.validationError.NONE;
  };

  ClickInfo.encodedSize = codec.kStructHeaderSize + 8;

  ClickInfo.decode = function(decoder) {
    var packed;
    var val = new ClickInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.middleButton = (packed >> 0) & 1 ? true : false;
    val.altKey = (packed >> 1) & 1 ? true : false;
    val.ctrlKey = (packed >> 2) & 1 ? true : false;
    val.metaKey = (packed >> 3) & 1 ? true : false;
    val.shiftKey = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ClickInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClickInfo.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.middleButton & 1) << 0
    packed |= (val.altKey & 1) << 1
    packed |= (val.ctrlKey & 1) << 2
    packed |= (val.metaKey & 1) << 3
    packed |= (val.shiftKey & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CommandHandler_CanShowPromoWithCommand_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CommandHandler_CanShowPromoWithCommand_Params.prototype.initDefaults_ = function() {
    this.commandId = 0;
  };
  CommandHandler_CanShowPromoWithCommand_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CommandHandler_CanShowPromoWithCommand_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CommandHandler_CanShowPromoWithCommand_Params.commandId
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Command);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CommandHandler_CanShowPromoWithCommand_Params.encodedSize = codec.kStructHeaderSize + 8;

  CommandHandler_CanShowPromoWithCommand_Params.decode = function(decoder) {
    var packed;
    var val = new CommandHandler_CanShowPromoWithCommand_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commandId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CommandHandler_CanShowPromoWithCommand_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CommandHandler_CanShowPromoWithCommand_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.commandId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CommandHandler_CanShowPromoWithCommand_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CommandHandler_CanShowPromoWithCommand_ResponseParams.prototype.initDefaults_ = function() {
    this.canShow = false;
  };
  CommandHandler_CanShowPromoWithCommand_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CommandHandler_CanShowPromoWithCommand_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CommandHandler_CanShowPromoWithCommand_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CommandHandler_CanShowPromoWithCommand_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CommandHandler_CanShowPromoWithCommand_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.canShow = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CommandHandler_CanShowPromoWithCommand_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CommandHandler_CanShowPromoWithCommand_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.canShow & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CommandHandler_ExecuteCommand_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CommandHandler_ExecuteCommand_Params.prototype.initDefaults_ = function() {
    this.commandId = 0;
    this.clickInfo = null;
  };
  CommandHandler_ExecuteCommand_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CommandHandler_ExecuteCommand_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CommandHandler_ExecuteCommand_Params.commandId
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Command);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CommandHandler_ExecuteCommand_Params.clickInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ClickInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CommandHandler_ExecuteCommand_Params.encodedSize = codec.kStructHeaderSize + 16;

  CommandHandler_ExecuteCommand_Params.decode = function(decoder) {
    var packed;
    var val = new CommandHandler_ExecuteCommand_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commandId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clickInfo =
        decoder.decodeStructPointer(ClickInfo);
    return val;
  };

  CommandHandler_ExecuteCommand_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CommandHandler_ExecuteCommand_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.commandId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(ClickInfo, val.clickInfo);
  };
  function CommandHandler_ExecuteCommand_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CommandHandler_ExecuteCommand_ResponseParams.prototype.initDefaults_ = function() {
    this.commandExecuted = false;
  };
  CommandHandler_ExecuteCommand_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CommandHandler_ExecuteCommand_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CommandHandler_ExecuteCommand_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CommandHandler_ExecuteCommand_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CommandHandler_ExecuteCommand_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.commandExecuted = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CommandHandler_ExecuteCommand_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CommandHandler_ExecuteCommand_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.commandExecuted & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kCommandHandler_CanShowPromoWithCommand_Name = 1322281266;
  var kCommandHandler_ExecuteCommand_Name = 653564078;

  function CommandHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CommandHandler,
                                                   handleOrPtrInfo);
  }

  function CommandHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CommandHandler, associatedInterfacePtrInfo);
  }

  CommandHandlerAssociatedPtr.prototype =
      Object.create(CommandHandlerPtr.prototype);
  CommandHandlerAssociatedPtr.prototype.constructor =
      CommandHandlerAssociatedPtr;

  function CommandHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  CommandHandlerPtr.prototype.canShowPromoWithCommand = function() {
    return CommandHandlerProxy.prototype.canShowPromoWithCommand
        .apply(this.ptr.getProxy(), arguments);
  };

  CommandHandlerProxy.prototype.canShowPromoWithCommand = function(commandId) {
    var params_ = new CommandHandler_CanShowPromoWithCommand_Params();
    params_.commandId = commandId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCommandHandler_CanShowPromoWithCommand_Name,
          codec.align(CommandHandler_CanShowPromoWithCommand_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CommandHandler_CanShowPromoWithCommand_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CommandHandler_CanShowPromoWithCommand_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CommandHandlerPtr.prototype.executeCommand = function() {
    return CommandHandlerProxy.prototype.executeCommand
        .apply(this.ptr.getProxy(), arguments);
  };

  CommandHandlerProxy.prototype.executeCommand = function(commandId, clickInfo) {
    var params_ = new CommandHandler_ExecuteCommand_Params();
    params_.commandId = commandId;
    params_.clickInfo = clickInfo;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCommandHandler_ExecuteCommand_Name,
          codec.align(CommandHandler_ExecuteCommand_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CommandHandler_ExecuteCommand_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CommandHandler_ExecuteCommand_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CommandHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  CommandHandlerStub.prototype.canShowPromoWithCommand = function(commandId) {
    return this.delegate_ && this.delegate_.canShowPromoWithCommand && this.delegate_.canShowPromoWithCommand(commandId);
  }
  CommandHandlerStub.prototype.executeCommand = function(commandId, clickInfo) {
    return this.delegate_ && this.delegate_.executeCommand && this.delegate_.executeCommand(commandId, clickInfo);
  }

  CommandHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  CommandHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCommandHandler_CanShowPromoWithCommand_Name:
      var params = reader.decodeStruct(CommandHandler_CanShowPromoWithCommand_Params);
      this.canShowPromoWithCommand(params.commandId).then(function(response) {
        var responseParams =
            new CommandHandler_CanShowPromoWithCommand_ResponseParams();
        responseParams.canShow = response.canShow;
        var builder = new codec.MessageV1Builder(
            kCommandHandler_CanShowPromoWithCommand_Name,
            codec.align(CommandHandler_CanShowPromoWithCommand_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CommandHandler_CanShowPromoWithCommand_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCommandHandler_ExecuteCommand_Name:
      var params = reader.decodeStruct(CommandHandler_ExecuteCommand_Params);
      this.executeCommand(params.commandId, params.clickInfo).then(function(response) {
        var responseParams =
            new CommandHandler_ExecuteCommand_ResponseParams();
        responseParams.commandExecuted = response.commandExecuted;
        var builder = new codec.MessageV1Builder(
            kCommandHandler_ExecuteCommand_Name,
            codec.align(CommandHandler_ExecuteCommand_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CommandHandler_ExecuteCommand_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCommandHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCommandHandler_CanShowPromoWithCommand_Name:
        if (message.expectsResponse())
          paramsClass = CommandHandler_CanShowPromoWithCommand_Params;
      break;
      case kCommandHandler_ExecuteCommand_Name:
        if (message.expectsResponse())
          paramsClass = CommandHandler_ExecuteCommand_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCommandHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCommandHandler_CanShowPromoWithCommand_Name:
        if (message.isResponse())
          paramsClass = CommandHandler_CanShowPromoWithCommand_ResponseParams;
        break;
      case kCommandHandler_ExecuteCommand_Name:
        if (message.isResponse())
          paramsClass = CommandHandler_ExecuteCommand_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CommandHandler = {
    name: 'promo_browser_command.mojom.CommandHandler',
    kVersion: 0,
    ptrClass: CommandHandlerPtr,
    proxyClass: CommandHandlerProxy,
    stubClass: CommandHandlerStub,
    validateRequest: validateCommandHandlerRequest,
    validateResponse: validateCommandHandlerResponse,
  };
  CommandHandlerStub.prototype.validator = validateCommandHandlerRequest;
  CommandHandlerProxy.prototype.validator = validateCommandHandlerResponse;
  exports.Command = Command;
  exports.ClickInfo = ClickInfo;
  exports.CommandHandler = CommandHandler;
  exports.CommandHandlerPtr = CommandHandlerPtr;
  exports.CommandHandlerAssociatedPtr = CommandHandlerAssociatedPtr;
})();