// services/viz/public/mojom/compositing/frame_timing_details.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/public/mojom/compositing/frame_timing_details.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var presentation_feedback$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/presentation_feedback.mojom', '../../../../../ui/gfx/mojom/presentation_feedback.mojom.js');
  }
  var swap_timings$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/swap_timings.mojom', '../../../../../ui/gfx/mojom/swap_timings.mojom.js');
  }



  function FrameTimingDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameTimingDetails.prototype.initDefaults_ = function() {
    this.receivedCompositorFrameTimestamp = null;
    this.drawStartTimestamp = null;
    this.swapTimings = null;
    this.presentationFeedback = null;
  };
  FrameTimingDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameTimingDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameTimingDetails.receivedCompositorFrameTimestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameTimingDetails.drawStartTimestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameTimingDetails.swapTimings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, swap_timings$.SwapTimings, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameTimingDetails.presentationFeedback
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, presentation_feedback$.PresentationFeedback, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameTimingDetails.encodedSize = codec.kStructHeaderSize + 32;

  FrameTimingDetails.decode = function(decoder) {
    var packed;
    var val = new FrameTimingDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receivedCompositorFrameTimestamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.drawStartTimestamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.swapTimings =
        decoder.decodeStructPointer(swap_timings$.SwapTimings);
    val.presentationFeedback =
        decoder.decodeStructPointer(presentation_feedback$.PresentationFeedback);
    return val;
  };

  FrameTimingDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameTimingDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeTicks, val.receivedCompositorFrameTimestamp);
    encoder.encodeStructPointer(time$.TimeTicks, val.drawStartTimestamp);
    encoder.encodeStructPointer(swap_timings$.SwapTimings, val.swapTimings);
    encoder.encodeStructPointer(presentation_feedback$.PresentationFeedback, val.presentationFeedback);
  };
  exports.FrameTimingDetails = FrameTimingDetails;
})();