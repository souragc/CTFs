// services/network/public/mojom/parsed_headers.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/network/public/mojom/parsed_headers.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('network.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var content_security_policy$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/content_security_policy.mojom', 'content_security_policy.mojom.js');
  }
  var cross_origin_embedder_policy$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cross_origin_embedder_policy.mojom', 'cross_origin_embedder_policy.mojom.js');
  }
  var cross_origin_opener_policy$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cross_origin_opener_policy.mojom', 'cross_origin_opener_policy.mojom.js');
  }
  var web_client_hints_types$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/web_client_hints_types.mojom', 'web_client_hints_types.mojom.js');
  }
  var x_frame_options$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/x_frame_options.mojom', 'x_frame_options.mojom.js');
  }



  function ParsedHeaders(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ParsedHeaders.prototype.initDefaults_ = function() {
    this.contentSecurityPolicy = null;
    this.allowCspFrom = null;
    this.crossOriginEmbedderPolicy = null;
    this.crossOriginOpenerPolicy = null;
    this.originAgentCluster = false;
    this.xfo = x_frame_options$.XFrameOptionsValue.kNone;
    this.acceptCh = null;
    this.acceptChLifetime = null;
    this.criticalCh = null;
  };
  ParsedHeaders.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ParsedHeaders.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 80}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.contentSecurityPolicy
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(content_security_policy$.ContentSecurityPolicy), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.allowCspFrom
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, content_security_policy$.AllowCSPFromHeaderValue, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.crossOriginEmbedderPolicy
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, cross_origin_embedder_policy$.CrossOriginEmbedderPolicy, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.crossOriginOpenerPolicy
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, cross_origin_opener_policy$.CrossOriginOpenerPolicy, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ParsedHeaders.acceptCh
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 4, new codec.Enum(web_client_hints_types$.WebClientHintsType), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.acceptChLifetime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.criticalCh
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 64, 4, new codec.Enum(web_client_hints_types$.WebClientHintsType), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ParsedHeaders.xfo
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 44, x_frame_options$.XFrameOptionsValue);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ParsedHeaders.encodedSize = codec.kStructHeaderSize + 72;

  ParsedHeaders.decode = function(decoder) {
    var packed;
    var val = new ParsedHeaders();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contentSecurityPolicy =
        decoder.decodeArrayPointer(new codec.PointerTo(content_security_policy$.ContentSecurityPolicy));
    val.allowCspFrom =
        decoder.decodeStruct(content_security_policy$.AllowCSPFromHeaderValue);
    val.crossOriginEmbedderPolicy =
        decoder.decodeStructPointer(cross_origin_embedder_policy$.CrossOriginEmbedderPolicy);
    val.crossOriginOpenerPolicy =
        decoder.decodeStructPointer(cross_origin_opener_policy$.CrossOriginOpenerPolicy);
    packed = decoder.readUint8();
    val.originAgentCluster = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.xfo =
        decoder.decodeStruct(codec.Int32);
    val.acceptCh =
        decoder.decodeArrayPointer(new codec.Enum(web_client_hints_types$.WebClientHintsType));
    val.acceptChLifetime =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.criticalCh =
        decoder.decodeArrayPointer(new codec.Enum(web_client_hints_types$.WebClientHintsType));
    return val;
  };

  ParsedHeaders.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ParsedHeaders.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(content_security_policy$.ContentSecurityPolicy), val.contentSecurityPolicy);
    encoder.encodeStruct(content_security_policy$.AllowCSPFromHeaderValue, val.allowCspFrom);
    encoder.encodeStructPointer(cross_origin_embedder_policy$.CrossOriginEmbedderPolicy, val.crossOriginEmbedderPolicy);
    encoder.encodeStructPointer(cross_origin_opener_policy$.CrossOriginOpenerPolicy, val.crossOriginOpenerPolicy);
    packed = 0;
    packed |= (val.originAgentCluster & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.xfo);
    encoder.encodeArrayPointer(new codec.Enum(web_client_hints_types$.WebClientHintsType), val.acceptCh);
    encoder.encodeStructPointer(time$.TimeDelta, val.acceptChLifetime);
    encoder.encodeArrayPointer(new codec.Enum(web_client_hints_types$.WebClientHintsType), val.criticalCh);
  };
  exports.ParsedHeaders = ParsedHeaders;
})();