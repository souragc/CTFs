// services/network/public/mojom/url_response_head.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/network/public/mojom/url_response_head.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('network.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var fetch_api$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/fetch_api.mojom', 'fetch_api.mojom.js');
  }
  var http_raw_request_response_info$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/http_raw_request_response_info.mojom', 'http_raw_request_response_info.mojom.js');
  }
  var ip_endpoint$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/ip_endpoint.mojom', 'ip_endpoint.mojom.js');
  }
  var load_timing_info$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/load_timing_info.mojom', 'load_timing_info.mojom.js');
  }
  var network_param$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_param.mojom', 'network_param.mojom.js');
  }
  var network_types$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_types.mojom', 'network_types.mojom.js');
  }
  var origin_policy_manager$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/origin_policy_manager.mojom', 'origin_policy_manager.mojom.js');
  }
  var parsed_headers$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/parsed_headers.mojom', 'parsed_headers.mojom.js');
  }
  var proxy_resolver$ =
      mojo.internal.exposeNamespace('proxyResolver.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/proxy_resolver/public/mojom/proxy_resolver.mojom', '../../../proxy_resolver/public/mojom/proxy_resolver.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }



  function URLResponseHead(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  URLResponseHead.prototype.initDefaults_ = function() {
    this.requestTime = null;
    this.responseTime = null;
    this.headers = null;
    this.mimeType = null;
    this.charset = null;
    this.ctPolicyCompliance = 0;
    this.networkAccessed = false;
    this.wasFetchedViaSpdy = false;
    this.wasAlpnNegotiated = false;
    this.wasAlternateProtocolAvailable = false;
    this.wasFetchedViaCache = false;
    this.wasFetchedViaServiceWorker = false;
    this.wasFallbackRequiredByServiceWorker = false;
    this.didServiceWorkerNavigationPreload = false;
    this.shouldReportCorbBlocking = false;
    this.asyncRevalidationRequested = false;
    this.didMimeSniff = false;
    this.isSignedExchangeInnerResponse = false;
    this.wasInPrefetchCache = false;
    this.wasCookieInRequest = false;
    this.interceptedByPlugin = false;
    this.isLegacyTlsVersion = false;
    this.hasRangeRequested = false;
    this.timingAllowPassed = false;
    this.contentLength = -1;
    this.encodedDataLength = -1;
    this.encodedBodyLength = -1;
    this.appcacheId = 0;
    this.appcacheManifestUrl = null;
    this.loadTiming = null;
    this.rawRequestResponseInfo = null;
    this.connectionInfo = 0;
    this.serviceWorkerResponseSource = fetch_api$.FetchResponseSource.kUnspecified;
    this.alpnNegotiatedProtocol = null;
    this.remoteEndpoint = null;
    this.proxyServer = null;
    this.urlListViaServiceWorker = null;
    this.responseType = fetch_api$.FetchResponseType.kDefault;
    this.certStatus = 0;
    this.cacheStorageCacheName = null;
    this.sslInfo = null;
    this.corsExposedHeaderNames = null;
    this.authChallengeInfo = null;
    this.requestStart = null;
    this.responseStart = null;
    this.parsedHeaders = null;
    this.originPolicy = null;
    this.recursivePrefetchToken = null;
    this.dnsAliases = null;
    this.webBundleUrl = null;
  };
  URLResponseHead.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  URLResponseHead.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 248}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.requestTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.responseTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.headers
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, network_param$.HttpResponseHeaders, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.mimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.charset
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.ctPolicyCompliance
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 40, network_types$.CTPolicyCompliance);
    if (err !== validator.validationError.NONE)
        return err;







    // validate URLResponseHead.appcacheManifestUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.loadTiming
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, load_timing_info$.LoadTimingInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.rawRequestResponseInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, http_raw_request_response_info$.HttpRawRequestResponseInfo, true);
    if (err !== validator.validationError.NONE)
        return err;





    // validate URLResponseHead.connectionInfo
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 104, network_types$.ConnectionInfo);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.alpnNegotiatedProtocol
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 112, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.remoteEndpoint
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 120, ip_endpoint$.IPEndPoint, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate URLResponseHead.proxyServer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 128, proxy_resolver$.ProxyServer, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate URLResponseHead.serviceWorkerResponseSource
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 108, fetch_api$.FetchResponseSource);
    if (err !== validator.validationError.NONE)
        return err;



    // validate URLResponseHead.urlListViaServiceWorker
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 136, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.responseType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 144, fetch_api$.FetchResponseType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.cacheStorageCacheName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 152, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate URLResponseHead.sslInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 160, network_param$.SSLInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.corsExposedHeaderNames
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 168, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;













    // validate URLResponseHead.authChallengeInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 176, network_param$.AuthChallengeInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.requestStart
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 184, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.responseStart
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 192, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.parsedHeaders
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 200, parsed_headers$.ParsedHeaders, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.originPolicy
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 208, origin_policy_manager$.OriginPolicy, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.recursivePrefetchToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 216, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.dnsAliases
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 224, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLResponseHead.webBundleUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 232, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  URLResponseHead.encodedSize = codec.kStructHeaderSize + 240;

  URLResponseHead.decode = function(decoder) {
    var packed;
    var val = new URLResponseHead();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestTime =
        decoder.decodeStructPointer(time$.Time);
    val.responseTime =
        decoder.decodeStructPointer(time$.Time);
    val.headers =
        decoder.decodeStructPointer(network_param$.HttpResponseHeaders);
    val.mimeType =
        decoder.decodeStruct(codec.String);
    val.charset =
        decoder.decodeStruct(codec.String);
    val.ctPolicyCompliance =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.networkAccessed = (packed >> 0) & 1 ? true : false;
    val.wasFetchedViaSpdy = (packed >> 1) & 1 ? true : false;
    val.wasAlpnNegotiated = (packed >> 2) & 1 ? true : false;
    val.wasAlternateProtocolAvailable = (packed >> 3) & 1 ? true : false;
    val.wasFetchedViaCache = (packed >> 4) & 1 ? true : false;
    val.wasFetchedViaServiceWorker = (packed >> 5) & 1 ? true : false;
    val.wasFallbackRequiredByServiceWorker = (packed >> 6) & 1 ? true : false;
    val.didServiceWorkerNavigationPreload = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.shouldReportCorbBlocking = (packed >> 0) & 1 ? true : false;
    val.asyncRevalidationRequested = (packed >> 1) & 1 ? true : false;
    val.didMimeSniff = (packed >> 2) & 1 ? true : false;
    val.isSignedExchangeInnerResponse = (packed >> 3) & 1 ? true : false;
    val.wasInPrefetchCache = (packed >> 4) & 1 ? true : false;
    val.wasCookieInRequest = (packed >> 5) & 1 ? true : false;
    val.interceptedByPlugin = (packed >> 6) & 1 ? true : false;
    val.isLegacyTlsVersion = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.hasRangeRequested = (packed >> 0) & 1 ? true : false;
    val.timingAllowPassed = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    val.contentLength =
        decoder.decodeStruct(codec.Int64);
    val.encodedDataLength =
        decoder.decodeStruct(codec.Int64);
    val.encodedBodyLength =
        decoder.decodeStruct(codec.Int64);
    val.appcacheId =
        decoder.decodeStruct(codec.Int64);
    val.appcacheManifestUrl =
        decoder.decodeStructPointer(url$.Url);
    val.loadTiming =
        decoder.decodeStructPointer(load_timing_info$.LoadTimingInfo);
    val.rawRequestResponseInfo =
        decoder.decodeStructPointer(http_raw_request_response_info$.HttpRawRequestResponseInfo);
    val.connectionInfo =
        decoder.decodeStruct(codec.Int32);
    val.serviceWorkerResponseSource =
        decoder.decodeStruct(codec.Int32);
    val.alpnNegotiatedProtocol =
        decoder.decodeStruct(codec.String);
    val.remoteEndpoint =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.proxyServer =
        decoder.decodeStructPointer(proxy_resolver$.ProxyServer);
    val.urlListViaServiceWorker =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    val.responseType =
        decoder.decodeStruct(codec.Int32);
    val.certStatus =
        decoder.decodeStruct(codec.Uint32);
    val.cacheStorageCacheName =
        decoder.decodeStruct(codec.String);
    val.sslInfo =
        decoder.decodeStructPointer(network_param$.SSLInfo);
    val.corsExposedHeaderNames =
        decoder.decodeArrayPointer(codec.String);
    val.authChallengeInfo =
        decoder.decodeStructPointer(network_param$.AuthChallengeInfo);
    val.requestStart =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.responseStart =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.parsedHeaders =
        decoder.decodeStructPointer(parsed_headers$.ParsedHeaders);
    val.originPolicy =
        decoder.decodeStructPointer(origin_policy_manager$.OriginPolicy);
    val.recursivePrefetchToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.dnsAliases =
        decoder.decodeArrayPointer(codec.String);
    val.webBundleUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  URLResponseHead.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(URLResponseHead.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.Time, val.requestTime);
    encoder.encodeStructPointer(time$.Time, val.responseTime);
    encoder.encodeStructPointer(network_param$.HttpResponseHeaders, val.headers);
    encoder.encodeStruct(codec.String, val.mimeType);
    encoder.encodeStruct(codec.String, val.charset);
    encoder.encodeStruct(codec.Int32, val.ctPolicyCompliance);
    packed = 0;
    packed |= (val.networkAccessed & 1) << 0
    packed |= (val.wasFetchedViaSpdy & 1) << 1
    packed |= (val.wasAlpnNegotiated & 1) << 2
    packed |= (val.wasAlternateProtocolAvailable & 1) << 3
    packed |= (val.wasFetchedViaCache & 1) << 4
    packed |= (val.wasFetchedViaServiceWorker & 1) << 5
    packed |= (val.wasFallbackRequiredByServiceWorker & 1) << 6
    packed |= (val.didServiceWorkerNavigationPreload & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.shouldReportCorbBlocking & 1) << 0
    packed |= (val.asyncRevalidationRequested & 1) << 1
    packed |= (val.didMimeSniff & 1) << 2
    packed |= (val.isSignedExchangeInnerResponse & 1) << 3
    packed |= (val.wasInPrefetchCache & 1) << 4
    packed |= (val.wasCookieInRequest & 1) << 5
    packed |= (val.interceptedByPlugin & 1) << 6
    packed |= (val.isLegacyTlsVersion & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.hasRangeRequested & 1) << 0
    packed |= (val.timingAllowPassed & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.contentLength);
    encoder.encodeStruct(codec.Int64, val.encodedDataLength);
    encoder.encodeStruct(codec.Int64, val.encodedBodyLength);
    encoder.encodeStruct(codec.Int64, val.appcacheId);
    encoder.encodeStructPointer(url$.Url, val.appcacheManifestUrl);
    encoder.encodeStructPointer(load_timing_info$.LoadTimingInfo, val.loadTiming);
    encoder.encodeStructPointer(http_raw_request_response_info$.HttpRawRequestResponseInfo, val.rawRequestResponseInfo);
    encoder.encodeStruct(codec.Int32, val.connectionInfo);
    encoder.encodeStruct(codec.Int32, val.serviceWorkerResponseSource);
    encoder.encodeStruct(codec.String, val.alpnNegotiatedProtocol);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.remoteEndpoint);
    encoder.encodeStructPointer(proxy_resolver$.ProxyServer, val.proxyServer);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.urlListViaServiceWorker);
    encoder.encodeStruct(codec.Int32, val.responseType);
    encoder.encodeStruct(codec.Uint32, val.certStatus);
    encoder.encodeStruct(codec.String, val.cacheStorageCacheName);
    encoder.encodeStructPointer(network_param$.SSLInfo, val.sslInfo);
    encoder.encodeArrayPointer(codec.String, val.corsExposedHeaderNames);
    encoder.encodeStructPointer(network_param$.AuthChallengeInfo, val.authChallengeInfo);
    encoder.encodeStructPointer(time$.TimeTicks, val.requestStart);
    encoder.encodeStructPointer(time$.TimeTicks, val.responseStart);
    encoder.encodeStructPointer(parsed_headers$.ParsedHeaders, val.parsedHeaders);
    encoder.encodeStructPointer(origin_policy_manager$.OriginPolicy, val.originPolicy);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.recursivePrefetchToken);
    encoder.encodeArrayPointer(codec.String, val.dnsAliases);
    encoder.encodeStructPointer(url$.Url, val.webBundleUrl);
  };
  exports.URLResponseHead = URLResponseHead;
})();