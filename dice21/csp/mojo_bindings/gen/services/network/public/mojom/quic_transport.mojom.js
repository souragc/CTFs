// services/network/public/mojom/quic_transport.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/network/public/mojom/quic_transport.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('network.mojom');
  var read_only_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_buffer.mojom', '../../../../mojo/public/mojom/base/read_only_buffer.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }



  function QuicTransportError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportError.prototype.initDefaults_ = function() {
    this.netError = 0;
    this.quicError = 0;
    this.details = null;
    this.safeToReportDetails = false;
  };
  QuicTransportError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate QuicTransportError.details
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  QuicTransportError.encodedSize = codec.kStructHeaderSize + 24;

  QuicTransportError.decode = function(decoder) {
    var packed;
    var val = new QuicTransportError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.netError =
        decoder.decodeStruct(codec.Int32);
    val.quicError =
        decoder.decodeStruct(codec.Int32);
    val.details =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.safeToReportDetails = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  QuicTransportError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.netError);
    encoder.encodeStruct(codec.Int32, val.quicError);
    encoder.encodeStruct(codec.String, val.details);
    packed = 0;
    packed |= (val.safeToReportDetails & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function QuicTransportCertificateFingerprint(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportCertificateFingerprint.prototype.initDefaults_ = function() {
    this.algorithm = null;
    this.fingerprint = null;
  };
  QuicTransportCertificateFingerprint.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportCertificateFingerprint.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportCertificateFingerprint.algorithm
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportCertificateFingerprint.fingerprint
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransportCertificateFingerprint.encodedSize = codec.kStructHeaderSize + 16;

  QuicTransportCertificateFingerprint.decode = function(decoder) {
    var packed;
    var val = new QuicTransportCertificateFingerprint();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.algorithm =
        decoder.decodeStruct(codec.String);
    val.fingerprint =
        decoder.decodeStruct(codec.String);
    return val;
  };

  QuicTransportCertificateFingerprint.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportCertificateFingerprint.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.algorithm);
    encoder.encodeStruct(codec.String, val.fingerprint);
  };
  function QuicTransport_SendDatagram_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_SendDatagram_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  QuicTransport_SendDatagram_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_SendDatagram_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransport_SendDatagram_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_buffer$.ReadOnlyBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_SendDatagram_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_SendDatagram_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_SendDatagram_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(read_only_buffer$.ReadOnlyBuffer);
    return val;
  };

  QuicTransport_SendDatagram_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_SendDatagram_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_buffer$.ReadOnlyBuffer, val.data);
  };
  function QuicTransport_SendDatagram_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_SendDatagram_ResponseParams.prototype.initDefaults_ = function() {
    this.result = false;
  };
  QuicTransport_SendDatagram_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_SendDatagram_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  QuicTransport_SendDatagram_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_SendDatagram_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_SendDatagram_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.result = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  QuicTransport_SendDatagram_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_SendDatagram_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.result & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function QuicTransport_CreateStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_CreateStream_Params.prototype.initDefaults_ = function() {
    this.readable = null;
    this.writable = null;
  };
  QuicTransport_CreateStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_CreateStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransport_CreateStream_Params.readable
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransport_CreateStream_Params.writable
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_CreateStream_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_CreateStream_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_CreateStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.readable =
        decoder.decodeStruct(codec.Handle);
    val.writable =
        decoder.decodeStruct(codec.NullableHandle);
    return val;
  };

  QuicTransport_CreateStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_CreateStream_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.readable);
    encoder.encodeStruct(codec.NullableHandle, val.writable);
  };
  function QuicTransport_CreateStream_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_CreateStream_ResponseParams.prototype.initDefaults_ = function() {
    this.succeeded = false;
    this.streamId = 0;
  };
  QuicTransport_CreateStream_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_CreateStream_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  QuicTransport_CreateStream_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_CreateStream_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_CreateStream_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.succeeded = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.streamId =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  QuicTransport_CreateStream_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_CreateStream_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.succeeded & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.streamId);
  };
  function QuicTransport_AcceptBidirectionalStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_AcceptBidirectionalStream_Params.prototype.initDefaults_ = function() {
  };
  QuicTransport_AcceptBidirectionalStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_AcceptBidirectionalStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_AcceptBidirectionalStream_Params.encodedSize = codec.kStructHeaderSize + 0;

  QuicTransport_AcceptBidirectionalStream_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_AcceptBidirectionalStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  QuicTransport_AcceptBidirectionalStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_AcceptBidirectionalStream_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function QuicTransport_AcceptBidirectionalStream_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_AcceptBidirectionalStream_ResponseParams.prototype.initDefaults_ = function() {
    this.streamId = 0;
    this.readable = null;
    this.writable = null;
  };
  QuicTransport_AcceptBidirectionalStream_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_AcceptBidirectionalStream_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate QuicTransport_AcceptBidirectionalStream_ResponseParams.readable
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransport_AcceptBidirectionalStream_ResponseParams.writable
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_AcceptBidirectionalStream_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  QuicTransport_AcceptBidirectionalStream_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_AcceptBidirectionalStream_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.streamId =
        decoder.decodeStruct(codec.Uint32);
    val.readable =
        decoder.decodeStruct(codec.Handle);
    val.writable =
        decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  QuicTransport_AcceptBidirectionalStream_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_AcceptBidirectionalStream_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.streamId);
    encoder.encodeStruct(codec.Handle, val.readable);
    encoder.encodeStruct(codec.Handle, val.writable);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function QuicTransport_AcceptUnidirectionalStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_AcceptUnidirectionalStream_Params.prototype.initDefaults_ = function() {
  };
  QuicTransport_AcceptUnidirectionalStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_AcceptUnidirectionalStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_AcceptUnidirectionalStream_Params.encodedSize = codec.kStructHeaderSize + 0;

  QuicTransport_AcceptUnidirectionalStream_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_AcceptUnidirectionalStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  QuicTransport_AcceptUnidirectionalStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_AcceptUnidirectionalStream_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function QuicTransport_AcceptUnidirectionalStream_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_AcceptUnidirectionalStream_ResponseParams.prototype.initDefaults_ = function() {
    this.streamId = 0;
    this.readable = null;
  };
  QuicTransport_AcceptUnidirectionalStream_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_AcceptUnidirectionalStream_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate QuicTransport_AcceptUnidirectionalStream_ResponseParams.readable
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_AcceptUnidirectionalStream_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_AcceptUnidirectionalStream_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_AcceptUnidirectionalStream_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.streamId =
        decoder.decodeStruct(codec.Uint32);
    val.readable =
        decoder.decodeStruct(codec.Handle);
    return val;
  };

  QuicTransport_AcceptUnidirectionalStream_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_AcceptUnidirectionalStream_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.streamId);
    encoder.encodeStruct(codec.Handle, val.readable);
  };
  function QuicTransport_SendFin_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_SendFin_Params.prototype.initDefaults_ = function() {
    this.streamId = 0;
  };
  QuicTransport_SendFin_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_SendFin_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  QuicTransport_SendFin_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_SendFin_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_SendFin_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.streamId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  QuicTransport_SendFin_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_SendFin_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.streamId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function QuicTransport_AbortStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_AbortStream_Params.prototype.initDefaults_ = function() {
    this.streamId = 0;
    this.code = 0;
  };
  QuicTransport_AbortStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_AbortStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  QuicTransport_AbortStream_Params.encodedSize = codec.kStructHeaderSize + 16;

  QuicTransport_AbortStream_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_AbortStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.streamId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.code =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  QuicTransport_AbortStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_AbortStream_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.streamId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.code);
  };
  function QuicTransport_SetOutgoingDatagramExpirationDuration_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransport_SetOutgoingDatagramExpirationDuration_Params.prototype.initDefaults_ = function() {
    this.duration = null;
  };
  QuicTransport_SetOutgoingDatagramExpirationDuration_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransport_SetOutgoingDatagramExpirationDuration_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransport_SetOutgoingDatagramExpirationDuration_Params.duration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransport_SetOutgoingDatagramExpirationDuration_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransport_SetOutgoingDatagramExpirationDuration_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransport_SetOutgoingDatagramExpirationDuration_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.duration =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  QuicTransport_SetOutgoingDatagramExpirationDuration_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransport_SetOutgoingDatagramExpirationDuration_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.duration);
  };
  function QuicTransportClient_OnDatagramReceived_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportClient_OnDatagramReceived_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  QuicTransportClient_OnDatagramReceived_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportClient_OnDatagramReceived_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportClient_OnDatagramReceived_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_buffer$.ReadOnlyBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransportClient_OnDatagramReceived_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransportClient_OnDatagramReceived_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransportClient_OnDatagramReceived_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(read_only_buffer$.ReadOnlyBuffer);
    return val;
  };

  QuicTransportClient_OnDatagramReceived_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportClient_OnDatagramReceived_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_buffer$.ReadOnlyBuffer, val.data);
  };
  function QuicTransportClient_OnIncomingStreamClosed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportClient_OnIncomingStreamClosed_Params.prototype.initDefaults_ = function() {
    this.streamId = 0;
    this.finReceived = false;
  };
  QuicTransportClient_OnIncomingStreamClosed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportClient_OnIncomingStreamClosed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  QuicTransportClient_OnIncomingStreamClosed_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransportClient_OnIncomingStreamClosed_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransportClient_OnIncomingStreamClosed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.streamId =
        decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.finReceived = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  QuicTransportClient_OnIncomingStreamClosed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportClient_OnIncomingStreamClosed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.streamId);
    packed = 0;
    packed |= (val.finReceived & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function QuicTransportHandshakeClient_OnConnectionEstablished_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportHandshakeClient_OnConnectionEstablished_Params.prototype.initDefaults_ = function() {
    this.transport = new QuicTransportPtr();
    this.client = new bindings.InterfaceRequest();
  };
  QuicTransportHandshakeClient_OnConnectionEstablished_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportHandshakeClient_OnConnectionEstablished_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportHandshakeClient_OnConnectionEstablished_Params.transport
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportHandshakeClient_OnConnectionEstablished_Params.client
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransportHandshakeClient_OnConnectionEstablished_Params.encodedSize = codec.kStructHeaderSize + 16;

  QuicTransportHandshakeClient_OnConnectionEstablished_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransportHandshakeClient_OnConnectionEstablished_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.transport =
        decoder.decodeStruct(new codec.Interface(QuicTransportPtr));
    val.client =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  QuicTransportHandshakeClient_OnConnectionEstablished_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportHandshakeClient_OnConnectionEstablished_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(QuicTransportPtr), val.transport);
    encoder.encodeStruct(codec.InterfaceRequest, val.client);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function QuicTransportHandshakeClient_OnHandshakeFailed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportHandshakeClient_OnHandshakeFailed_Params.prototype.initDefaults_ = function() {
    this.error = null;
  };
  QuicTransportHandshakeClient_OnHandshakeFailed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportHandshakeClient_OnHandshakeFailed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportHandshakeClient_OnHandshakeFailed_Params.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, QuicTransportError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransportHandshakeClient_OnHandshakeFailed_Params.encodedSize = codec.kStructHeaderSize + 8;

  QuicTransportHandshakeClient_OnHandshakeFailed_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransportHandshakeClient_OnHandshakeFailed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStructPointer(QuicTransportError);
    return val;
  };

  QuicTransportHandshakeClient_OnHandshakeFailed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportHandshakeClient_OnHandshakeFailed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(QuicTransportError, val.error);
  };
  var kQuicTransport_SendDatagram_Name = 1831671345;
  var kQuicTransport_CreateStream_Name = 331296773;
  var kQuicTransport_AcceptBidirectionalStream_Name = 98152226;
  var kQuicTransport_AcceptUnidirectionalStream_Name = 679121132;
  var kQuicTransport_SendFin_Name = 2026244390;
  var kQuicTransport_AbortStream_Name = 360598000;
  var kQuicTransport_SetOutgoingDatagramExpirationDuration_Name = 2059459773;

  function QuicTransportPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(QuicTransport,
                                                   handleOrPtrInfo);
  }

  function QuicTransportAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        QuicTransport, associatedInterfacePtrInfo);
  }

  QuicTransportAssociatedPtr.prototype =
      Object.create(QuicTransportPtr.prototype);
  QuicTransportAssociatedPtr.prototype.constructor =
      QuicTransportAssociatedPtr;

  function QuicTransportProxy(receiver) {
    this.receiver_ = receiver;
  }
  QuicTransportPtr.prototype.sendDatagram = function() {
    return QuicTransportProxy.prototype.sendDatagram
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.sendDatagram = function(data) {
    var params_ = new QuicTransport_SendDatagram_Params();
    params_.data = data;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kQuicTransport_SendDatagram_Name,
          codec.align(QuicTransport_SendDatagram_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(QuicTransport_SendDatagram_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(QuicTransport_SendDatagram_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  QuicTransportPtr.prototype.createStream = function() {
    return QuicTransportProxy.prototype.createStream
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.createStream = function(readable, writable) {
    var params_ = new QuicTransport_CreateStream_Params();
    params_.readable = readable;
    params_.writable = writable;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kQuicTransport_CreateStream_Name,
          codec.align(QuicTransport_CreateStream_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(QuicTransport_CreateStream_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(QuicTransport_CreateStream_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  QuicTransportPtr.prototype.acceptBidirectionalStream = function() {
    return QuicTransportProxy.prototype.acceptBidirectionalStream
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.acceptBidirectionalStream = function() {
    var params_ = new QuicTransport_AcceptBidirectionalStream_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kQuicTransport_AcceptBidirectionalStream_Name,
          codec.align(QuicTransport_AcceptBidirectionalStream_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(QuicTransport_AcceptBidirectionalStream_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(QuicTransport_AcceptBidirectionalStream_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  QuicTransportPtr.prototype.acceptUnidirectionalStream = function() {
    return QuicTransportProxy.prototype.acceptUnidirectionalStream
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.acceptUnidirectionalStream = function() {
    var params_ = new QuicTransport_AcceptUnidirectionalStream_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kQuicTransport_AcceptUnidirectionalStream_Name,
          codec.align(QuicTransport_AcceptUnidirectionalStream_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(QuicTransport_AcceptUnidirectionalStream_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(QuicTransport_AcceptUnidirectionalStream_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  QuicTransportPtr.prototype.sendFin = function() {
    return QuicTransportProxy.prototype.sendFin
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.sendFin = function(streamId) {
    var params_ = new QuicTransport_SendFin_Params();
    params_.streamId = streamId;
    var builder = new codec.MessageV0Builder(
        kQuicTransport_SendFin_Name,
        codec.align(QuicTransport_SendFin_Params.encodedSize));
    builder.encodeStruct(QuicTransport_SendFin_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  QuicTransportPtr.prototype.abortStream = function() {
    return QuicTransportProxy.prototype.abortStream
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.abortStream = function(streamId, code) {
    var params_ = new QuicTransport_AbortStream_Params();
    params_.streamId = streamId;
    params_.code = code;
    var builder = new codec.MessageV0Builder(
        kQuicTransport_AbortStream_Name,
        codec.align(QuicTransport_AbortStream_Params.encodedSize));
    builder.encodeStruct(QuicTransport_AbortStream_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  QuicTransportPtr.prototype.setOutgoingDatagramExpirationDuration = function() {
    return QuicTransportProxy.prototype.setOutgoingDatagramExpirationDuration
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportProxy.prototype.setOutgoingDatagramExpirationDuration = function(duration) {
    var params_ = new QuicTransport_SetOutgoingDatagramExpirationDuration_Params();
    params_.duration = duration;
    var builder = new codec.MessageV0Builder(
        kQuicTransport_SetOutgoingDatagramExpirationDuration_Name,
        codec.align(QuicTransport_SetOutgoingDatagramExpirationDuration_Params.encodedSize));
    builder.encodeStruct(QuicTransport_SetOutgoingDatagramExpirationDuration_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function QuicTransportStub(delegate) {
    this.delegate_ = delegate;
  }
  QuicTransportStub.prototype.sendDatagram = function(data) {
    return this.delegate_ && this.delegate_.sendDatagram && this.delegate_.sendDatagram(data);
  }
  QuicTransportStub.prototype.createStream = function(readable, writable) {
    return this.delegate_ && this.delegate_.createStream && this.delegate_.createStream(readable, writable);
  }
  QuicTransportStub.prototype.acceptBidirectionalStream = function() {
    return this.delegate_ && this.delegate_.acceptBidirectionalStream && this.delegate_.acceptBidirectionalStream();
  }
  QuicTransportStub.prototype.acceptUnidirectionalStream = function() {
    return this.delegate_ && this.delegate_.acceptUnidirectionalStream && this.delegate_.acceptUnidirectionalStream();
  }
  QuicTransportStub.prototype.sendFin = function(streamId) {
    return this.delegate_ && this.delegate_.sendFin && this.delegate_.sendFin(streamId);
  }
  QuicTransportStub.prototype.abortStream = function(streamId, code) {
    return this.delegate_ && this.delegate_.abortStream && this.delegate_.abortStream(streamId, code);
  }
  QuicTransportStub.prototype.setOutgoingDatagramExpirationDuration = function(duration) {
    return this.delegate_ && this.delegate_.setOutgoingDatagramExpirationDuration && this.delegate_.setOutgoingDatagramExpirationDuration(duration);
  }

  QuicTransportStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQuicTransport_SendFin_Name:
      var params = reader.decodeStruct(QuicTransport_SendFin_Params);
      this.sendFin(params.streamId);
      return true;
    case kQuicTransport_AbortStream_Name:
      var params = reader.decodeStruct(QuicTransport_AbortStream_Params);
      this.abortStream(params.streamId, params.code);
      return true;
    case kQuicTransport_SetOutgoingDatagramExpirationDuration_Name:
      var params = reader.decodeStruct(QuicTransport_SetOutgoingDatagramExpirationDuration_Params);
      this.setOutgoingDatagramExpirationDuration(params.duration);
      return true;
    default:
      return false;
    }
  };

  QuicTransportStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQuicTransport_SendDatagram_Name:
      var params = reader.decodeStruct(QuicTransport_SendDatagram_Params);
      this.sendDatagram(params.data).then(function(response) {
        var responseParams =
            new QuicTransport_SendDatagram_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kQuicTransport_SendDatagram_Name,
            codec.align(QuicTransport_SendDatagram_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(QuicTransport_SendDatagram_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kQuicTransport_CreateStream_Name:
      var params = reader.decodeStruct(QuicTransport_CreateStream_Params);
      this.createStream(params.readable, params.writable).then(function(response) {
        var responseParams =
            new QuicTransport_CreateStream_ResponseParams();
        responseParams.succeeded = response.succeeded;
        responseParams.streamId = response.streamId;
        var builder = new codec.MessageV1Builder(
            kQuicTransport_CreateStream_Name,
            codec.align(QuicTransport_CreateStream_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(QuicTransport_CreateStream_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kQuicTransport_AcceptBidirectionalStream_Name:
      var params = reader.decodeStruct(QuicTransport_AcceptBidirectionalStream_Params);
      this.acceptBidirectionalStream().then(function(response) {
        var responseParams =
            new QuicTransport_AcceptBidirectionalStream_ResponseParams();
        responseParams.streamId = response.streamId;
        responseParams.readable = response.readable;
        responseParams.writable = response.writable;
        var builder = new codec.MessageV1Builder(
            kQuicTransport_AcceptBidirectionalStream_Name,
            codec.align(QuicTransport_AcceptBidirectionalStream_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(QuicTransport_AcceptBidirectionalStream_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kQuicTransport_AcceptUnidirectionalStream_Name:
      var params = reader.decodeStruct(QuicTransport_AcceptUnidirectionalStream_Params);
      this.acceptUnidirectionalStream().then(function(response) {
        var responseParams =
            new QuicTransport_AcceptUnidirectionalStream_ResponseParams();
        responseParams.streamId = response.streamId;
        responseParams.readable = response.readable;
        var builder = new codec.MessageV1Builder(
            kQuicTransport_AcceptUnidirectionalStream_Name,
            codec.align(QuicTransport_AcceptUnidirectionalStream_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(QuicTransport_AcceptUnidirectionalStream_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateQuicTransportRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kQuicTransport_SendDatagram_Name:
        if (message.expectsResponse())
          paramsClass = QuicTransport_SendDatagram_Params;
      break;
      case kQuicTransport_CreateStream_Name:
        if (message.expectsResponse())
          paramsClass = QuicTransport_CreateStream_Params;
      break;
      case kQuicTransport_AcceptBidirectionalStream_Name:
        if (message.expectsResponse())
          paramsClass = QuicTransport_AcceptBidirectionalStream_Params;
      break;
      case kQuicTransport_AcceptUnidirectionalStream_Name:
        if (message.expectsResponse())
          paramsClass = QuicTransport_AcceptUnidirectionalStream_Params;
      break;
      case kQuicTransport_SendFin_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransport_SendFin_Params;
      break;
      case kQuicTransport_AbortStream_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransport_AbortStream_Params;
      break;
      case kQuicTransport_SetOutgoingDatagramExpirationDuration_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransport_SetOutgoingDatagramExpirationDuration_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateQuicTransportResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kQuicTransport_SendDatagram_Name:
        if (message.isResponse())
          paramsClass = QuicTransport_SendDatagram_ResponseParams;
        break;
      case kQuicTransport_CreateStream_Name:
        if (message.isResponse())
          paramsClass = QuicTransport_CreateStream_ResponseParams;
        break;
      case kQuicTransport_AcceptBidirectionalStream_Name:
        if (message.isResponse())
          paramsClass = QuicTransport_AcceptBidirectionalStream_ResponseParams;
        break;
      case kQuicTransport_AcceptUnidirectionalStream_Name:
        if (message.isResponse())
          paramsClass = QuicTransport_AcceptUnidirectionalStream_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var QuicTransport = {
    name: 'network.mojom.QuicTransport',
    kVersion: 0,
    ptrClass: QuicTransportPtr,
    proxyClass: QuicTransportProxy,
    stubClass: QuicTransportStub,
    validateRequest: validateQuicTransportRequest,
    validateResponse: validateQuicTransportResponse,
  };
  QuicTransportStub.prototype.validator = validateQuicTransportRequest;
  QuicTransportProxy.prototype.validator = validateQuicTransportResponse;
  var kQuicTransportClient_OnDatagramReceived_Name = 1658105017;
  var kQuicTransportClient_OnIncomingStreamClosed_Name = 1790761791;

  function QuicTransportClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(QuicTransportClient,
                                                   handleOrPtrInfo);
  }

  function QuicTransportClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        QuicTransportClient, associatedInterfacePtrInfo);
  }

  QuicTransportClientAssociatedPtr.prototype =
      Object.create(QuicTransportClientPtr.prototype);
  QuicTransportClientAssociatedPtr.prototype.constructor =
      QuicTransportClientAssociatedPtr;

  function QuicTransportClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  QuicTransportClientPtr.prototype.onDatagramReceived = function() {
    return QuicTransportClientProxy.prototype.onDatagramReceived
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportClientProxy.prototype.onDatagramReceived = function(data) {
    var params_ = new QuicTransportClient_OnDatagramReceived_Params();
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kQuicTransportClient_OnDatagramReceived_Name,
        codec.align(QuicTransportClient_OnDatagramReceived_Params.encodedSize));
    builder.encodeStruct(QuicTransportClient_OnDatagramReceived_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  QuicTransportClientPtr.prototype.onIncomingStreamClosed = function() {
    return QuicTransportClientProxy.prototype.onIncomingStreamClosed
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportClientProxy.prototype.onIncomingStreamClosed = function(streamId, finReceived) {
    var params_ = new QuicTransportClient_OnIncomingStreamClosed_Params();
    params_.streamId = streamId;
    params_.finReceived = finReceived;
    var builder = new codec.MessageV0Builder(
        kQuicTransportClient_OnIncomingStreamClosed_Name,
        codec.align(QuicTransportClient_OnIncomingStreamClosed_Params.encodedSize));
    builder.encodeStruct(QuicTransportClient_OnIncomingStreamClosed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function QuicTransportClientStub(delegate) {
    this.delegate_ = delegate;
  }
  QuicTransportClientStub.prototype.onDatagramReceived = function(data) {
    return this.delegate_ && this.delegate_.onDatagramReceived && this.delegate_.onDatagramReceived(data);
  }
  QuicTransportClientStub.prototype.onIncomingStreamClosed = function(streamId, finReceived) {
    return this.delegate_ && this.delegate_.onIncomingStreamClosed && this.delegate_.onIncomingStreamClosed(streamId, finReceived);
  }

  QuicTransportClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQuicTransportClient_OnDatagramReceived_Name:
      var params = reader.decodeStruct(QuicTransportClient_OnDatagramReceived_Params);
      this.onDatagramReceived(params.data);
      return true;
    case kQuicTransportClient_OnIncomingStreamClosed_Name:
      var params = reader.decodeStruct(QuicTransportClient_OnIncomingStreamClosed_Params);
      this.onIncomingStreamClosed(params.streamId, params.finReceived);
      return true;
    default:
      return false;
    }
  };

  QuicTransportClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateQuicTransportClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kQuicTransportClient_OnDatagramReceived_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransportClient_OnDatagramReceived_Params;
      break;
      case kQuicTransportClient_OnIncomingStreamClosed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransportClient_OnIncomingStreamClosed_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateQuicTransportClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var QuicTransportClient = {
    name: 'network.mojom.QuicTransportClient',
    kVersion: 0,
    ptrClass: QuicTransportClientPtr,
    proxyClass: QuicTransportClientProxy,
    stubClass: QuicTransportClientStub,
    validateRequest: validateQuicTransportClientRequest,
    validateResponse: null,
  };
  QuicTransportClientStub.prototype.validator = validateQuicTransportClientRequest;
  QuicTransportClientProxy.prototype.validator = null;
  var kQuicTransportHandshakeClient_OnConnectionEstablished_Name = 16610118;
  var kQuicTransportHandshakeClient_OnHandshakeFailed_Name = 1923146496;

  function QuicTransportHandshakeClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(QuicTransportHandshakeClient,
                                                   handleOrPtrInfo);
  }

  function QuicTransportHandshakeClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        QuicTransportHandshakeClient, associatedInterfacePtrInfo);
  }

  QuicTransportHandshakeClientAssociatedPtr.prototype =
      Object.create(QuicTransportHandshakeClientPtr.prototype);
  QuicTransportHandshakeClientAssociatedPtr.prototype.constructor =
      QuicTransportHandshakeClientAssociatedPtr;

  function QuicTransportHandshakeClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  QuicTransportHandshakeClientPtr.prototype.onConnectionEstablished = function() {
    return QuicTransportHandshakeClientProxy.prototype.onConnectionEstablished
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportHandshakeClientProxy.prototype.onConnectionEstablished = function(transport, client) {
    var params_ = new QuicTransportHandshakeClient_OnConnectionEstablished_Params();
    params_.transport = transport;
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kQuicTransportHandshakeClient_OnConnectionEstablished_Name,
        codec.align(QuicTransportHandshakeClient_OnConnectionEstablished_Params.encodedSize));
    builder.encodeStruct(QuicTransportHandshakeClient_OnConnectionEstablished_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  QuicTransportHandshakeClientPtr.prototype.onHandshakeFailed = function() {
    return QuicTransportHandshakeClientProxy.prototype.onHandshakeFailed
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportHandshakeClientProxy.prototype.onHandshakeFailed = function(error) {
    var params_ = new QuicTransportHandshakeClient_OnHandshakeFailed_Params();
    params_.error = error;
    var builder = new codec.MessageV0Builder(
        kQuicTransportHandshakeClient_OnHandshakeFailed_Name,
        codec.align(QuicTransportHandshakeClient_OnHandshakeFailed_Params.encodedSize));
    builder.encodeStruct(QuicTransportHandshakeClient_OnHandshakeFailed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function QuicTransportHandshakeClientStub(delegate) {
    this.delegate_ = delegate;
  }
  QuicTransportHandshakeClientStub.prototype.onConnectionEstablished = function(transport, client) {
    return this.delegate_ && this.delegate_.onConnectionEstablished && this.delegate_.onConnectionEstablished(transport, client);
  }
  QuicTransportHandshakeClientStub.prototype.onHandshakeFailed = function(error) {
    return this.delegate_ && this.delegate_.onHandshakeFailed && this.delegate_.onHandshakeFailed(error);
  }

  QuicTransportHandshakeClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQuicTransportHandshakeClient_OnConnectionEstablished_Name:
      var params = reader.decodeStruct(QuicTransportHandshakeClient_OnConnectionEstablished_Params);
      this.onConnectionEstablished(params.transport, params.client);
      return true;
    case kQuicTransportHandshakeClient_OnHandshakeFailed_Name:
      var params = reader.decodeStruct(QuicTransportHandshakeClient_OnHandshakeFailed_Params);
      this.onHandshakeFailed(params.error);
      return true;
    default:
      return false;
    }
  };

  QuicTransportHandshakeClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateQuicTransportHandshakeClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kQuicTransportHandshakeClient_OnConnectionEstablished_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransportHandshakeClient_OnConnectionEstablished_Params;
      break;
      case kQuicTransportHandshakeClient_OnHandshakeFailed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransportHandshakeClient_OnHandshakeFailed_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateQuicTransportHandshakeClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var QuicTransportHandshakeClient = {
    name: 'network.mojom.QuicTransportHandshakeClient',
    kVersion: 0,
    ptrClass: QuicTransportHandshakeClientPtr,
    proxyClass: QuicTransportHandshakeClientProxy,
    stubClass: QuicTransportHandshakeClientStub,
    validateRequest: validateQuicTransportHandshakeClientRequest,
    validateResponse: null,
  };
  QuicTransportHandshakeClientStub.prototype.validator = validateQuicTransportHandshakeClientRequest;
  QuicTransportHandshakeClientProxy.prototype.validator = null;
  exports.QuicTransportError = QuicTransportError;
  exports.QuicTransportCertificateFingerprint = QuicTransportCertificateFingerprint;
  exports.QuicTransport = QuicTransport;
  exports.QuicTransportPtr = QuicTransportPtr;
  exports.QuicTransportAssociatedPtr = QuicTransportAssociatedPtr;
  exports.QuicTransportClient = QuicTransportClient;
  exports.QuicTransportClientPtr = QuicTransportClientPtr;
  exports.QuicTransportClientAssociatedPtr = QuicTransportClientAssociatedPtr;
  exports.QuicTransportHandshakeClient = QuicTransportHandshakeClient;
  exports.QuicTransportHandshakeClientPtr = QuicTransportHandshakeClientPtr;
  exports.QuicTransportHandshakeClientAssociatedPtr = QuicTransportHandshakeClientAssociatedPtr;
})();