// media/learning/mojo/public/mojom/learning_types.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/learning/mojo/public/mojom/learning_types.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('media.learning.mojom');



  function FeatureValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FeatureValue.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  FeatureValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FeatureValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FeatureValue.encodedSize = codec.kStructHeaderSize + 8;

  FeatureValue.decode = function(decoder) {
    var packed;
    var val = new FeatureValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  FeatureValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FeatureValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function TargetValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TargetValue.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TargetValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TargetValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TargetValue.encodedSize = codec.kStructHeaderSize + 8;

  TargetValue.decode = function(decoder) {
    var packed;
    var val = new TargetValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  TargetValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TargetValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function LabelledExample(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LabelledExample.prototype.initDefaults_ = function() {
    this.features = null;
    this.targetValue = null;
  };
  LabelledExample.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LabelledExample.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LabelledExample.features
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(FeatureValue), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LabelledExample.targetValue
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, TargetValue, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LabelledExample.encodedSize = codec.kStructHeaderSize + 16;

  LabelledExample.decode = function(decoder) {
    var packed;
    var val = new LabelledExample();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.features =
        decoder.decodeArrayPointer(new codec.PointerTo(FeatureValue));
    val.targetValue =
        decoder.decodeStructPointer(TargetValue);
    return val;
  };

  LabelledExample.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LabelledExample.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(FeatureValue), val.features);
    encoder.encodeStructPointer(TargetValue, val.targetValue);
  };
  function ObservationCompletion(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ObservationCompletion.prototype.initDefaults_ = function() {
    this.targetValue = null;
    this.weight = 1;
  };
  ObservationCompletion.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ObservationCompletion.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ObservationCompletion.targetValue
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TargetValue, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ObservationCompletion.encodedSize = codec.kStructHeaderSize + 16;

  ObservationCompletion.decode = function(decoder) {
    var packed;
    var val = new ObservationCompletion();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.targetValue =
        decoder.decodeStructPointer(TargetValue);
    val.weight =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  ObservationCompletion.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ObservationCompletion.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TargetValue, val.targetValue);
    encoder.encodeStruct(codec.Uint64, val.weight);
  };
  function TargetHistogramPair(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TargetHistogramPair.prototype.initDefaults_ = function() {
    this.targetValue = null;
    this.count = 0;
  };
  TargetHistogramPair.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TargetHistogramPair.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TargetHistogramPair.targetValue
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TargetValue, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TargetHistogramPair.encodedSize = codec.kStructHeaderSize + 16;

  TargetHistogramPair.decode = function(decoder) {
    var packed;
    var val = new TargetHistogramPair();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.targetValue =
        decoder.decodeStructPointer(TargetValue);
    val.count =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  TargetHistogramPair.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TargetHistogramPair.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TargetValue, val.targetValue);
    encoder.encodeStruct(codec.Double, val.count);
  };
  function TargetHistogram(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TargetHistogram.prototype.initDefaults_ = function() {
    this.pairs = null;
  };
  TargetHistogram.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TargetHistogram.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TargetHistogram.pairs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(TargetHistogramPair), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TargetHistogram.encodedSize = codec.kStructHeaderSize + 8;

  TargetHistogram.decode = function(decoder) {
    var packed;
    var val = new TargetHistogram();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pairs =
        decoder.decodeArrayPointer(new codec.PointerTo(TargetHistogramPair));
    return val;
  };

  TargetHistogram.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TargetHistogram.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(TargetHistogramPair), val.pairs);
  };
  exports.FeatureValue = FeatureValue;
  exports.TargetValue = TargetValue;
  exports.LabelledExample = LabelledExample;
  exports.ObservationCompletion = ObservationCompletion;
  exports.TargetHistogramPair = TargetHistogramPair;
  exports.TargetHistogram = TargetHistogram;
})();