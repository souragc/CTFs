// media/mojo/mojom/media_player.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/mojo/mojom/media_player.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('media.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }
  var media_session$ =
      mojo.internal.exposeNamespace('mediaSession.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/media_session/public/mojom/media_session.mojom', '../../../services/media_session/public/mojom/media_session.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }



  function MediaPlayer_AddMediaPlayerObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_AddMediaPlayerObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new MediaPlayerObserverPtr();
  };
  MediaPlayer_AddMediaPlayerObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_AddMediaPlayerObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlayer_AddMediaPlayerObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayer_AddMediaPlayerObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayer_AddMediaPlayerObserver_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_AddMediaPlayerObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.Interface(MediaPlayerObserverPtr));
    return val;
  };

  MediaPlayer_AddMediaPlayerObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_AddMediaPlayerObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(MediaPlayerObserverPtr), val.observer);
  };
  function MediaPlayer_RequestPlay_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_RequestPlay_Params.prototype.initDefaults_ = function() {
  };
  MediaPlayer_RequestPlay_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_RequestPlay_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayer_RequestPlay_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaPlayer_RequestPlay_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_RequestPlay_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaPlayer_RequestPlay_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_RequestPlay_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaPlayer_RequestPause_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_RequestPause_Params.prototype.initDefaults_ = function() {
    this.triggeredByUser = false;
  };
  MediaPlayer_RequestPause_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_RequestPause_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaPlayer_RequestPause_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayer_RequestPause_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_RequestPause_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.triggeredByUser = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlayer_RequestPause_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_RequestPause_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.triggeredByUser & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaPlayer_RequestSeekForward_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_RequestSeekForward_Params.prototype.initDefaults_ = function() {
    this.seekTime = null;
  };
  MediaPlayer_RequestSeekForward_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_RequestSeekForward_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlayer_RequestSeekForward_Params.seekTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayer_RequestSeekForward_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayer_RequestSeekForward_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_RequestSeekForward_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.seekTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  MediaPlayer_RequestSeekForward_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_RequestSeekForward_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.seekTime);
  };
  function MediaPlayer_RequestSeekBackward_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_RequestSeekBackward_Params.prototype.initDefaults_ = function() {
    this.seekTime = null;
  };
  MediaPlayer_RequestSeekBackward_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_RequestSeekBackward_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlayer_RequestSeekBackward_Params.seekTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayer_RequestSeekBackward_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayer_RequestSeekBackward_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_RequestSeekBackward_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.seekTime =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  MediaPlayer_RequestSeekBackward_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_RequestSeekBackward_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.seekTime);
  };
  function MediaPlayer_RequestEnterPictureInPicture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_RequestEnterPictureInPicture_Params.prototype.initDefaults_ = function() {
  };
  MediaPlayer_RequestEnterPictureInPicture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_RequestEnterPictureInPicture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayer_RequestEnterPictureInPicture_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaPlayer_RequestEnterPictureInPicture_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_RequestEnterPictureInPicture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaPlayer_RequestEnterPictureInPicture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_RequestEnterPictureInPicture_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaPlayer_RequestExitPictureInPicture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayer_RequestExitPictureInPicture_Params.prototype.initDefaults_ = function() {
  };
  MediaPlayer_RequestExitPictureInPicture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayer_RequestExitPictureInPicture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayer_RequestExitPictureInPicture_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaPlayer_RequestExitPictureInPicture_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayer_RequestExitPictureInPicture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaPlayer_RequestExitPictureInPicture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayer_RequestExitPictureInPicture_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaPlayerObserver_OnMutedStatusChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnMutedStatusChanged_Params.prototype.initDefaults_ = function() {
    this.muted = false;
  };
  MediaPlayerObserver_OnMutedStatusChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnMutedStatusChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnMutedStatusChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayerObserver_OnMutedStatusChanged_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnMutedStatusChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.muted = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlayerObserver_OnMutedStatusChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnMutedStatusChanged_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.muted & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaPlayerObserver_OnMediaPositionStateChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnMediaPositionStateChanged_Params.prototype.initDefaults_ = function() {
    this.mediaPosition = null;
  };
  MediaPlayerObserver_OnMediaPositionStateChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnMediaPositionStateChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlayerObserver_OnMediaPositionStateChanged_Params.mediaPosition
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, media_session$.MediaPosition, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnMediaPositionStateChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayerObserver_OnMediaPositionStateChanged_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnMediaPositionStateChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mediaPosition =
        decoder.decodeStructPointer(media_session$.MediaPosition);
    return val;
  };

  MediaPlayerObserver_OnMediaPositionStateChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnMediaPositionStateChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(media_session$.MediaPosition, val.mediaPosition);
  };
  function MediaPlayerObserver_OnMediaSizeChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnMediaSizeChanged_Params.prototype.initDefaults_ = function() {
    this.size = null;
  };
  MediaPlayerObserver_OnMediaSizeChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnMediaSizeChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlayerObserver_OnMediaSizeChanged_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnMediaSizeChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayerObserver_OnMediaSizeChanged_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnMediaSizeChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  MediaPlayerObserver_OnMediaSizeChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnMediaSizeChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Size, val.size);
  };
  function MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.prototype.initDefaults_ = function() {
    this.available = false;
  };
  MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.available = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.available & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.prototype.initDefaults_ = function() {
  };
  MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaPlayerObserver_OnBufferUnderflow_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnBufferUnderflow_Params.prototype.initDefaults_ = function() {
  };
  MediaPlayerObserver_OnBufferUnderflow_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnBufferUnderflow_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnBufferUnderflow_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaPlayerObserver_OnBufferUnderflow_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnBufferUnderflow_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaPlayerObserver_OnBufferUnderflow_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnBufferUnderflow_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaPlayerObserver_OnSeek_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerObserver_OnSeek_Params.prototype.initDefaults_ = function() {
  };
  MediaPlayerObserver_OnSeek_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerObserver_OnSeek_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlayerObserver_OnSeek_Params.encodedSize = codec.kStructHeaderSize + 0;

  MediaPlayerObserver_OnSeek_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerObserver_OnSeek_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  MediaPlayerObserver_OnSeek_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerObserver_OnSeek_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function MediaPlayerHost_OnMediaPlayerAdded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlayerHost_OnMediaPlayerAdded_Params.prototype.initDefaults_ = function() {
    this.playerRemote = new MediaPlayerPtr();
    this.playerId = 0;
  };
  MediaPlayerHost_OnMediaPlayerAdded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlayerHost_OnMediaPlayerAdded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlayerHost_OnMediaPlayerAdded_Params.playerRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaPlayerHost_OnMediaPlayerAdded_Params.encodedSize = codec.kStructHeaderSize + 16;

  MediaPlayerHost_OnMediaPlayerAdded_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlayerHost_OnMediaPlayerAdded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.playerRemote =
        decoder.decodeStruct(new codec.Interface(MediaPlayerPtr));
    val.playerId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlayerHost_OnMediaPlayerAdded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlayerHost_OnMediaPlayerAdded_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(MediaPlayerPtr), val.playerRemote);
    encoder.encodeStruct(codec.Int32, val.playerId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kMediaPlayer_AddMediaPlayerObserver_Name = 184931609;
  var kMediaPlayer_RequestPlay_Name = 2082661634;
  var kMediaPlayer_RequestPause_Name = 689273848;
  var kMediaPlayer_RequestSeekForward_Name = 10552137;
  var kMediaPlayer_RequestSeekBackward_Name = 1101437094;
  var kMediaPlayer_RequestEnterPictureInPicture_Name = 1830858667;
  var kMediaPlayer_RequestExitPictureInPicture_Name = 552596484;

  function MediaPlayerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaPlayer,
                                                   handleOrPtrInfo);
  }

  function MediaPlayerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaPlayer, associatedInterfacePtrInfo);
  }

  MediaPlayerAssociatedPtr.prototype =
      Object.create(MediaPlayerPtr.prototype);
  MediaPlayerAssociatedPtr.prototype.constructor =
      MediaPlayerAssociatedPtr;

  function MediaPlayerProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaPlayerPtr.prototype.addMediaPlayerObserver = function() {
    return MediaPlayerProxy.prototype.addMediaPlayerObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.addMediaPlayerObserver = function(observer) {
    var params_ = new MediaPlayer_AddMediaPlayerObserver_Params();
    params_.observer = observer;
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_AddMediaPlayerObserver_Name,
        codec.align(MediaPlayer_AddMediaPlayerObserver_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_AddMediaPlayerObserver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerPtr.prototype.requestPlay = function() {
    return MediaPlayerProxy.prototype.requestPlay
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.requestPlay = function() {
    var params_ = new MediaPlayer_RequestPlay_Params();
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_RequestPlay_Name,
        codec.align(MediaPlayer_RequestPlay_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_RequestPlay_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerPtr.prototype.requestPause = function() {
    return MediaPlayerProxy.prototype.requestPause
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.requestPause = function(triggeredByUser) {
    var params_ = new MediaPlayer_RequestPause_Params();
    params_.triggeredByUser = triggeredByUser;
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_RequestPause_Name,
        codec.align(MediaPlayer_RequestPause_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_RequestPause_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerPtr.prototype.requestSeekForward = function() {
    return MediaPlayerProxy.prototype.requestSeekForward
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.requestSeekForward = function(seekTime) {
    var params_ = new MediaPlayer_RequestSeekForward_Params();
    params_.seekTime = seekTime;
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_RequestSeekForward_Name,
        codec.align(MediaPlayer_RequestSeekForward_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_RequestSeekForward_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerPtr.prototype.requestSeekBackward = function() {
    return MediaPlayerProxy.prototype.requestSeekBackward
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.requestSeekBackward = function(seekTime) {
    var params_ = new MediaPlayer_RequestSeekBackward_Params();
    params_.seekTime = seekTime;
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_RequestSeekBackward_Name,
        codec.align(MediaPlayer_RequestSeekBackward_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_RequestSeekBackward_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerPtr.prototype.requestEnterPictureInPicture = function() {
    return MediaPlayerProxy.prototype.requestEnterPictureInPicture
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.requestEnterPictureInPicture = function() {
    var params_ = new MediaPlayer_RequestEnterPictureInPicture_Params();
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_RequestEnterPictureInPicture_Name,
        codec.align(MediaPlayer_RequestEnterPictureInPicture_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_RequestEnterPictureInPicture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerPtr.prototype.requestExitPictureInPicture = function() {
    return MediaPlayerProxy.prototype.requestExitPictureInPicture
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerProxy.prototype.requestExitPictureInPicture = function() {
    var params_ = new MediaPlayer_RequestExitPictureInPicture_Params();
    var builder = new codec.MessageV0Builder(
        kMediaPlayer_RequestExitPictureInPicture_Name,
        codec.align(MediaPlayer_RequestExitPictureInPicture_Params.encodedSize));
    builder.encodeStruct(MediaPlayer_RequestExitPictureInPicture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MediaPlayerStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaPlayerStub.prototype.addMediaPlayerObserver = function(observer) {
    return this.delegate_ && this.delegate_.addMediaPlayerObserver && this.delegate_.addMediaPlayerObserver(observer);
  }
  MediaPlayerStub.prototype.requestPlay = function() {
    return this.delegate_ && this.delegate_.requestPlay && this.delegate_.requestPlay();
  }
  MediaPlayerStub.prototype.requestPause = function(triggeredByUser) {
    return this.delegate_ && this.delegate_.requestPause && this.delegate_.requestPause(triggeredByUser);
  }
  MediaPlayerStub.prototype.requestSeekForward = function(seekTime) {
    return this.delegate_ && this.delegate_.requestSeekForward && this.delegate_.requestSeekForward(seekTime);
  }
  MediaPlayerStub.prototype.requestSeekBackward = function(seekTime) {
    return this.delegate_ && this.delegate_.requestSeekBackward && this.delegate_.requestSeekBackward(seekTime);
  }
  MediaPlayerStub.prototype.requestEnterPictureInPicture = function() {
    return this.delegate_ && this.delegate_.requestEnterPictureInPicture && this.delegate_.requestEnterPictureInPicture();
  }
  MediaPlayerStub.prototype.requestExitPictureInPicture = function() {
    return this.delegate_ && this.delegate_.requestExitPictureInPicture && this.delegate_.requestExitPictureInPicture();
  }

  MediaPlayerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaPlayer_AddMediaPlayerObserver_Name:
      var params = reader.decodeStruct(MediaPlayer_AddMediaPlayerObserver_Params);
      this.addMediaPlayerObserver(params.observer);
      return true;
    case kMediaPlayer_RequestPlay_Name:
      var params = reader.decodeStruct(MediaPlayer_RequestPlay_Params);
      this.requestPlay();
      return true;
    case kMediaPlayer_RequestPause_Name:
      var params = reader.decodeStruct(MediaPlayer_RequestPause_Params);
      this.requestPause(params.triggeredByUser);
      return true;
    case kMediaPlayer_RequestSeekForward_Name:
      var params = reader.decodeStruct(MediaPlayer_RequestSeekForward_Params);
      this.requestSeekForward(params.seekTime);
      return true;
    case kMediaPlayer_RequestSeekBackward_Name:
      var params = reader.decodeStruct(MediaPlayer_RequestSeekBackward_Params);
      this.requestSeekBackward(params.seekTime);
      return true;
    case kMediaPlayer_RequestEnterPictureInPicture_Name:
      var params = reader.decodeStruct(MediaPlayer_RequestEnterPictureInPicture_Params);
      this.requestEnterPictureInPicture();
      return true;
    case kMediaPlayer_RequestExitPictureInPicture_Name:
      var params = reader.decodeStruct(MediaPlayer_RequestExitPictureInPicture_Params);
      this.requestExitPictureInPicture();
      return true;
    default:
      return false;
    }
  };

  MediaPlayerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMediaPlayerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaPlayer_AddMediaPlayerObserver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_AddMediaPlayerObserver_Params;
      break;
      case kMediaPlayer_RequestPlay_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_RequestPlay_Params;
      break;
      case kMediaPlayer_RequestPause_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_RequestPause_Params;
      break;
      case kMediaPlayer_RequestSeekForward_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_RequestSeekForward_Params;
      break;
      case kMediaPlayer_RequestSeekBackward_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_RequestSeekBackward_Params;
      break;
      case kMediaPlayer_RequestEnterPictureInPicture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_RequestEnterPictureInPicture_Params;
      break;
      case kMediaPlayer_RequestExitPictureInPicture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayer_RequestExitPictureInPicture_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaPlayerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MediaPlayer = {
    name: 'media.mojom.MediaPlayer',
    kVersion: 0,
    ptrClass: MediaPlayerPtr,
    proxyClass: MediaPlayerProxy,
    stubClass: MediaPlayerStub,
    validateRequest: validateMediaPlayerRequest,
    validateResponse: null,
  };
  MediaPlayerStub.prototype.validator = validateMediaPlayerRequest;
  MediaPlayerProxy.prototype.validator = null;
  var kMediaPlayerObserver_OnMutedStatusChanged_Name = 1032742122;
  var kMediaPlayerObserver_OnMediaPositionStateChanged_Name = 2137210230;
  var kMediaPlayerObserver_OnMediaSizeChanged_Name = 2075684221;
  var kMediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Name = 2059276538;
  var kMediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Name = 1653067452;
  var kMediaPlayerObserver_OnBufferUnderflow_Name = 2145650629;
  var kMediaPlayerObserver_OnSeek_Name = 178935151;

  function MediaPlayerObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaPlayerObserver,
                                                   handleOrPtrInfo);
  }

  function MediaPlayerObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaPlayerObserver, associatedInterfacePtrInfo);
  }

  MediaPlayerObserverAssociatedPtr.prototype =
      Object.create(MediaPlayerObserverPtr.prototype);
  MediaPlayerObserverAssociatedPtr.prototype.constructor =
      MediaPlayerObserverAssociatedPtr;

  function MediaPlayerObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaPlayerObserverPtr.prototype.onMutedStatusChanged = function() {
    return MediaPlayerObserverProxy.prototype.onMutedStatusChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onMutedStatusChanged = function(muted) {
    var params_ = new MediaPlayerObserver_OnMutedStatusChanged_Params();
    params_.muted = muted;
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnMutedStatusChanged_Name,
        codec.align(MediaPlayerObserver_OnMutedStatusChanged_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnMutedStatusChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerObserverPtr.prototype.onMediaPositionStateChanged = function() {
    return MediaPlayerObserverProxy.prototype.onMediaPositionStateChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onMediaPositionStateChanged = function(mediaPosition) {
    var params_ = new MediaPlayerObserver_OnMediaPositionStateChanged_Params();
    params_.mediaPosition = mediaPosition;
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnMediaPositionStateChanged_Name,
        codec.align(MediaPlayerObserver_OnMediaPositionStateChanged_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnMediaPositionStateChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerObserverPtr.prototype.onMediaSizeChanged = function() {
    return MediaPlayerObserverProxy.prototype.onMediaSizeChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onMediaSizeChanged = function(size) {
    var params_ = new MediaPlayerObserver_OnMediaSizeChanged_Params();
    params_.size = size;
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnMediaSizeChanged_Name,
        codec.align(MediaPlayerObserver_OnMediaSizeChanged_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnMediaSizeChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerObserverPtr.prototype.onPictureInPictureAvailabilityChanged = function() {
    return MediaPlayerObserverProxy.prototype.onPictureInPictureAvailabilityChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onPictureInPictureAvailabilityChanged = function(available) {
    var params_ = new MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params();
    params_.available = available;
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Name,
        codec.align(MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerObserverPtr.prototype.onAudioOutputSinkChangingDisabled = function() {
    return MediaPlayerObserverProxy.prototype.onAudioOutputSinkChangingDisabled
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onAudioOutputSinkChangingDisabled = function() {
    var params_ = new MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params();
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Name,
        codec.align(MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerObserverPtr.prototype.onBufferUnderflow = function() {
    return MediaPlayerObserverProxy.prototype.onBufferUnderflow
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onBufferUnderflow = function() {
    var params_ = new MediaPlayerObserver_OnBufferUnderflow_Params();
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnBufferUnderflow_Name,
        codec.align(MediaPlayerObserver_OnBufferUnderflow_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnBufferUnderflow_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlayerObserverPtr.prototype.onSeek = function() {
    return MediaPlayerObserverProxy.prototype.onSeek
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerObserverProxy.prototype.onSeek = function() {
    var params_ = new MediaPlayerObserver_OnSeek_Params();
    var builder = new codec.MessageV0Builder(
        kMediaPlayerObserver_OnSeek_Name,
        codec.align(MediaPlayerObserver_OnSeek_Params.encodedSize));
    builder.encodeStruct(MediaPlayerObserver_OnSeek_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MediaPlayerObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaPlayerObserverStub.prototype.onMutedStatusChanged = function(muted) {
    return this.delegate_ && this.delegate_.onMutedStatusChanged && this.delegate_.onMutedStatusChanged(muted);
  }
  MediaPlayerObserverStub.prototype.onMediaPositionStateChanged = function(mediaPosition) {
    return this.delegate_ && this.delegate_.onMediaPositionStateChanged && this.delegate_.onMediaPositionStateChanged(mediaPosition);
  }
  MediaPlayerObserverStub.prototype.onMediaSizeChanged = function(size) {
    return this.delegate_ && this.delegate_.onMediaSizeChanged && this.delegate_.onMediaSizeChanged(size);
  }
  MediaPlayerObserverStub.prototype.onPictureInPictureAvailabilityChanged = function(available) {
    return this.delegate_ && this.delegate_.onPictureInPictureAvailabilityChanged && this.delegate_.onPictureInPictureAvailabilityChanged(available);
  }
  MediaPlayerObserverStub.prototype.onAudioOutputSinkChangingDisabled = function() {
    return this.delegate_ && this.delegate_.onAudioOutputSinkChangingDisabled && this.delegate_.onAudioOutputSinkChangingDisabled();
  }
  MediaPlayerObserverStub.prototype.onBufferUnderflow = function() {
    return this.delegate_ && this.delegate_.onBufferUnderflow && this.delegate_.onBufferUnderflow();
  }
  MediaPlayerObserverStub.prototype.onSeek = function() {
    return this.delegate_ && this.delegate_.onSeek && this.delegate_.onSeek();
  }

  MediaPlayerObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaPlayerObserver_OnMutedStatusChanged_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnMutedStatusChanged_Params);
      this.onMutedStatusChanged(params.muted);
      return true;
    case kMediaPlayerObserver_OnMediaPositionStateChanged_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnMediaPositionStateChanged_Params);
      this.onMediaPositionStateChanged(params.mediaPosition);
      return true;
    case kMediaPlayerObserver_OnMediaSizeChanged_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnMediaSizeChanged_Params);
      this.onMediaSizeChanged(params.size);
      return true;
    case kMediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params);
      this.onPictureInPictureAvailabilityChanged(params.available);
      return true;
    case kMediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params);
      this.onAudioOutputSinkChangingDisabled();
      return true;
    case kMediaPlayerObserver_OnBufferUnderflow_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnBufferUnderflow_Params);
      this.onBufferUnderflow();
      return true;
    case kMediaPlayerObserver_OnSeek_Name:
      var params = reader.decodeStruct(MediaPlayerObserver_OnSeek_Params);
      this.onSeek();
      return true;
    default:
      return false;
    }
  };

  MediaPlayerObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMediaPlayerObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaPlayerObserver_OnMutedStatusChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnMutedStatusChanged_Params;
      break;
      case kMediaPlayerObserver_OnMediaPositionStateChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnMediaPositionStateChanged_Params;
      break;
      case kMediaPlayerObserver_OnMediaSizeChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnMediaSizeChanged_Params;
      break;
      case kMediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params;
      break;
      case kMediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params;
      break;
      case kMediaPlayerObserver_OnBufferUnderflow_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnBufferUnderflow_Params;
      break;
      case kMediaPlayerObserver_OnSeek_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerObserver_OnSeek_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaPlayerObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MediaPlayerObserver = {
    name: 'media.mojom.MediaPlayerObserver',
    kVersion: 0,
    ptrClass: MediaPlayerObserverPtr,
    proxyClass: MediaPlayerObserverProxy,
    stubClass: MediaPlayerObserverStub,
    validateRequest: validateMediaPlayerObserverRequest,
    validateResponse: null,
  };
  MediaPlayerObserverStub.prototype.validator = validateMediaPlayerObserverRequest;
  MediaPlayerObserverProxy.prototype.validator = null;
  var kMediaPlayerHost_OnMediaPlayerAdded_Name = 1918163526;

  function MediaPlayerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaPlayerHost,
                                                   handleOrPtrInfo);
  }

  function MediaPlayerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaPlayerHost, associatedInterfacePtrInfo);
  }

  MediaPlayerHostAssociatedPtr.prototype =
      Object.create(MediaPlayerHostPtr.prototype);
  MediaPlayerHostAssociatedPtr.prototype.constructor =
      MediaPlayerHostAssociatedPtr;

  function MediaPlayerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaPlayerHostPtr.prototype.onMediaPlayerAdded = function() {
    return MediaPlayerHostProxy.prototype.onMediaPlayerAdded
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlayerHostProxy.prototype.onMediaPlayerAdded = function(playerRemote, playerId) {
    var params_ = new MediaPlayerHost_OnMediaPlayerAdded_Params();
    params_.playerRemote = playerRemote;
    params_.playerId = playerId;
    var builder = new codec.MessageV0Builder(
        kMediaPlayerHost_OnMediaPlayerAdded_Name,
        codec.align(MediaPlayerHost_OnMediaPlayerAdded_Params.encodedSize));
    builder.encodeStruct(MediaPlayerHost_OnMediaPlayerAdded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MediaPlayerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaPlayerHostStub.prototype.onMediaPlayerAdded = function(playerRemote, playerId) {
    return this.delegate_ && this.delegate_.onMediaPlayerAdded && this.delegate_.onMediaPlayerAdded(playerRemote, playerId);
  }

  MediaPlayerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaPlayerHost_OnMediaPlayerAdded_Name:
      var params = reader.decodeStruct(MediaPlayerHost_OnMediaPlayerAdded_Params);
      this.onMediaPlayerAdded(params.playerRemote, params.playerId);
      return true;
    default:
      return false;
    }
  };

  MediaPlayerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMediaPlayerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaPlayerHost_OnMediaPlayerAdded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlayerHost_OnMediaPlayerAdded_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaPlayerHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MediaPlayerHost = {
    name: 'media.mojom.MediaPlayerHost',
    kVersion: 0,
    ptrClass: MediaPlayerHostPtr,
    proxyClass: MediaPlayerHostProxy,
    stubClass: MediaPlayerHostStub,
    validateRequest: validateMediaPlayerHostRequest,
    validateResponse: null,
  };
  MediaPlayerHostStub.prototype.validator = validateMediaPlayerHostRequest;
  MediaPlayerHostProxy.prototype.validator = null;
  exports.MediaPlayer = MediaPlayer;
  exports.MediaPlayerPtr = MediaPlayerPtr;
  exports.MediaPlayerAssociatedPtr = MediaPlayerAssociatedPtr;
  exports.MediaPlayerObserver = MediaPlayerObserver;
  exports.MediaPlayerObserverPtr = MediaPlayerObserverPtr;
  exports.MediaPlayerObserverAssociatedPtr = MediaPlayerObserverAssociatedPtr;
  exports.MediaPlayerHost = MediaPlayerHost;
  exports.MediaPlayerHostPtr = MediaPlayerHostPtr;
  exports.MediaPlayerHostAssociatedPtr = MediaPlayerHostAssociatedPtr;
})();