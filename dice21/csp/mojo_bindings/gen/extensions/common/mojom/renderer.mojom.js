// extensions/common/mojom/renderer.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'extensions/common/mojom/renderer.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('extensions.mojom');
  var channel$ =
      mojo.internal.exposeNamespace('extensions.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'extensions/common/mojom/channel.mojom', 'channel.mojom.js');
  }
  var feature_session_type$ =
      mojo.internal.exposeNamespace('extensions.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'extensions/common/mojom/feature_session_type.mojom', 'feature_session_type.mojom.js');
  }



  function Renderer_ActivateExtension_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_ActivateExtension_Params.prototype.initDefaults_ = function() {
    this.extensionId = null;
  };
  Renderer_ActivateExtension_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_ActivateExtension_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_ActivateExtension_Params.extensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_ActivateExtension_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_ActivateExtension_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_ActivateExtension_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.extensionId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Renderer_ActivateExtension_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_ActivateExtension_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.extensionId);
  };
  function Renderer_SetActivityLoggingEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetActivityLoggingEnabled_Params.prototype.initDefaults_ = function() {
    this.enabled = false;
  };
  Renderer_SetActivityLoggingEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetActivityLoggingEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_SetActivityLoggingEnabled_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetActivityLoggingEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetActivityLoggingEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.enabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetActivityLoggingEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetActivityLoggingEnabled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.enabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_UnloadExtension_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_UnloadExtension_Params.prototype.initDefaults_ = function() {
    this.extensionId = null;
  };
  Renderer_UnloadExtension_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_UnloadExtension_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_UnloadExtension_Params.extensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_UnloadExtension_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_UnloadExtension_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_UnloadExtension_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.extensionId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Renderer_UnloadExtension_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_UnloadExtension_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.extensionId);
  };
  function Renderer_SetSessionInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetSessionInfo_Params.prototype.initDefaults_ = function() {
    this.channel = 0;
    this.session = 0;
    this.isLockScreenContext = false;
  };
  Renderer_SetSessionInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetSessionInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetSessionInfo_Params.channel
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, channel$.Channel);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetSessionInfo_Params.session
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, feature_session_type$.FeatureSessionType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_SetSessionInfo_Params.encodedSize = codec.kStructHeaderSize + 16;

  Renderer_SetSessionInfo_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetSessionInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.channel =
        decoder.decodeStruct(codec.Int32);
    val.session =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isLockScreenContext = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetSessionInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetSessionInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.channel);
    encoder.encodeStruct(codec.Int32, val.session);
    packed = 0;
    packed |= (val.isLockScreenContext & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_SetSystemFont_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetSystemFont_Params.prototype.initDefaults_ = function() {
    this.fontFamily = null;
    this.fontSize = null;
  };
  Renderer_SetSystemFont_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetSystemFont_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetSystemFont_Params.fontFamily
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetSystemFont_Params.fontSize
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_SetSystemFont_Params.encodedSize = codec.kStructHeaderSize + 16;

  Renderer_SetSystemFont_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetSystemFont_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontFamily =
        decoder.decodeStruct(codec.String);
    val.fontSize =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Renderer_SetSystemFont_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetSystemFont_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.fontFamily);
    encoder.encodeStruct(codec.String, val.fontSize);
  };
  function Renderer_SetWebViewPartitionID_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetWebViewPartitionID_Params.prototype.initDefaults_ = function() {
    this.partitionId = null;
  };
  Renderer_SetWebViewPartitionID_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetWebViewPartitionID_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetWebViewPartitionID_Params.partitionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_SetWebViewPartitionID_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetWebViewPartitionID_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetWebViewPartitionID_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.partitionId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Renderer_SetWebViewPartitionID_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetWebViewPartitionID_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.partitionId);
  };
  function Renderer_SetScriptingAllowlist_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetScriptingAllowlist_Params.prototype.initDefaults_ = function() {
    this.extensionIds = null;
  };
  Renderer_SetScriptingAllowlist_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetScriptingAllowlist_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetScriptingAllowlist_Params.extensionIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_SetScriptingAllowlist_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetScriptingAllowlist_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetScriptingAllowlist_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.extensionIds =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  Renderer_SetScriptingAllowlist_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetScriptingAllowlist_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.extensionIds);
  };
  var kRenderer_ActivateExtension_Name = 2051580625;
  var kRenderer_SetActivityLoggingEnabled_Name = 105720416;
  var kRenderer_UnloadExtension_Name = 811481585;
  var kRenderer_SetSessionInfo_Name = 436049120;
  var kRenderer_SetSystemFont_Name = 42747788;
  var kRenderer_SetWebViewPartitionID_Name = 708107277;
  var kRenderer_SetScriptingAllowlist_Name = 109116128;

  function RendererPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Renderer,
                                                   handleOrPtrInfo);
  }

  function RendererAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Renderer, associatedInterfacePtrInfo);
  }

  RendererAssociatedPtr.prototype =
      Object.create(RendererPtr.prototype);
  RendererAssociatedPtr.prototype.constructor =
      RendererAssociatedPtr;

  function RendererProxy(receiver) {
    this.receiver_ = receiver;
  }
  RendererPtr.prototype.activateExtension = function() {
    return RendererProxy.prototype.activateExtension
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.activateExtension = function(extensionId) {
    var params_ = new Renderer_ActivateExtension_Params();
    params_.extensionId = extensionId;
    var builder = new codec.MessageV0Builder(
        kRenderer_ActivateExtension_Name,
        codec.align(Renderer_ActivateExtension_Params.encodedSize));
    builder.encodeStruct(Renderer_ActivateExtension_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setActivityLoggingEnabled = function() {
    return RendererProxy.prototype.setActivityLoggingEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setActivityLoggingEnabled = function(enabled) {
    var params_ = new Renderer_SetActivityLoggingEnabled_Params();
    params_.enabled = enabled;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetActivityLoggingEnabled_Name,
        codec.align(Renderer_SetActivityLoggingEnabled_Params.encodedSize));
    builder.encodeStruct(Renderer_SetActivityLoggingEnabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.unloadExtension = function() {
    return RendererProxy.prototype.unloadExtension
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.unloadExtension = function(extensionId) {
    var params_ = new Renderer_UnloadExtension_Params();
    params_.extensionId = extensionId;
    var builder = new codec.MessageV0Builder(
        kRenderer_UnloadExtension_Name,
        codec.align(Renderer_UnloadExtension_Params.encodedSize));
    builder.encodeStruct(Renderer_UnloadExtension_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setSessionInfo = function() {
    return RendererProxy.prototype.setSessionInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setSessionInfo = function(channel, session, isLockScreenContext) {
    var params_ = new Renderer_SetSessionInfo_Params();
    params_.channel = channel;
    params_.session = session;
    params_.isLockScreenContext = isLockScreenContext;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetSessionInfo_Name,
        codec.align(Renderer_SetSessionInfo_Params.encodedSize));
    builder.encodeStruct(Renderer_SetSessionInfo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setSystemFont = function() {
    return RendererProxy.prototype.setSystemFont
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setSystemFont = function(fontFamily, fontSize) {
    var params_ = new Renderer_SetSystemFont_Params();
    params_.fontFamily = fontFamily;
    params_.fontSize = fontSize;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetSystemFont_Name,
        codec.align(Renderer_SetSystemFont_Params.encodedSize));
    builder.encodeStruct(Renderer_SetSystemFont_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setWebViewPartitionID = function() {
    return RendererProxy.prototype.setWebViewPartitionID
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setWebViewPartitionID = function(partitionId) {
    var params_ = new Renderer_SetWebViewPartitionID_Params();
    params_.partitionId = partitionId;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetWebViewPartitionID_Name,
        codec.align(Renderer_SetWebViewPartitionID_Params.encodedSize));
    builder.encodeStruct(Renderer_SetWebViewPartitionID_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setScriptingAllowlist = function() {
    return RendererProxy.prototype.setScriptingAllowlist
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setScriptingAllowlist = function(extensionIds) {
    var params_ = new Renderer_SetScriptingAllowlist_Params();
    params_.extensionIds = extensionIds;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetScriptingAllowlist_Name,
        codec.align(Renderer_SetScriptingAllowlist_Params.encodedSize));
    builder.encodeStruct(Renderer_SetScriptingAllowlist_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function RendererStub(delegate) {
    this.delegate_ = delegate;
  }
  RendererStub.prototype.activateExtension = function(extensionId) {
    return this.delegate_ && this.delegate_.activateExtension && this.delegate_.activateExtension(extensionId);
  }
  RendererStub.prototype.setActivityLoggingEnabled = function(enabled) {
    return this.delegate_ && this.delegate_.setActivityLoggingEnabled && this.delegate_.setActivityLoggingEnabled(enabled);
  }
  RendererStub.prototype.unloadExtension = function(extensionId) {
    return this.delegate_ && this.delegate_.unloadExtension && this.delegate_.unloadExtension(extensionId);
  }
  RendererStub.prototype.setSessionInfo = function(channel, session, isLockScreenContext) {
    return this.delegate_ && this.delegate_.setSessionInfo && this.delegate_.setSessionInfo(channel, session, isLockScreenContext);
  }
  RendererStub.prototype.setSystemFont = function(fontFamily, fontSize) {
    return this.delegate_ && this.delegate_.setSystemFont && this.delegate_.setSystemFont(fontFamily, fontSize);
  }
  RendererStub.prototype.setWebViewPartitionID = function(partitionId) {
    return this.delegate_ && this.delegate_.setWebViewPartitionID && this.delegate_.setWebViewPartitionID(partitionId);
  }
  RendererStub.prototype.setScriptingAllowlist = function(extensionIds) {
    return this.delegate_ && this.delegate_.setScriptingAllowlist && this.delegate_.setScriptingAllowlist(extensionIds);
  }

  RendererStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRenderer_ActivateExtension_Name:
      var params = reader.decodeStruct(Renderer_ActivateExtension_Params);
      this.activateExtension(params.extensionId);
      return true;
    case kRenderer_SetActivityLoggingEnabled_Name:
      var params = reader.decodeStruct(Renderer_SetActivityLoggingEnabled_Params);
      this.setActivityLoggingEnabled(params.enabled);
      return true;
    case kRenderer_UnloadExtension_Name:
      var params = reader.decodeStruct(Renderer_UnloadExtension_Params);
      this.unloadExtension(params.extensionId);
      return true;
    case kRenderer_SetSessionInfo_Name:
      var params = reader.decodeStruct(Renderer_SetSessionInfo_Params);
      this.setSessionInfo(params.channel, params.session, params.isLockScreenContext);
      return true;
    case kRenderer_SetSystemFont_Name:
      var params = reader.decodeStruct(Renderer_SetSystemFont_Params);
      this.setSystemFont(params.fontFamily, params.fontSize);
      return true;
    case kRenderer_SetWebViewPartitionID_Name:
      var params = reader.decodeStruct(Renderer_SetWebViewPartitionID_Params);
      this.setWebViewPartitionID(params.partitionId);
      return true;
    case kRenderer_SetScriptingAllowlist_Name:
      var params = reader.decodeStruct(Renderer_SetScriptingAllowlist_Params);
      this.setScriptingAllowlist(params.extensionIds);
      return true;
    default:
      return false;
    }
  };

  RendererStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateRendererRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRenderer_ActivateExtension_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_ActivateExtension_Params;
      break;
      case kRenderer_SetActivityLoggingEnabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetActivityLoggingEnabled_Params;
      break;
      case kRenderer_UnloadExtension_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_UnloadExtension_Params;
      break;
      case kRenderer_SetSessionInfo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetSessionInfo_Params;
      break;
      case kRenderer_SetSystemFont_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetSystemFont_Params;
      break;
      case kRenderer_SetWebViewPartitionID_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetWebViewPartitionID_Params;
      break;
      case kRenderer_SetScriptingAllowlist_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetScriptingAllowlist_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRendererResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Renderer = {
    name: 'extensions.mojom.Renderer',
    kVersion: 0,
    ptrClass: RendererPtr,
    proxyClass: RendererProxy,
    stubClass: RendererStub,
    validateRequest: validateRendererRequest,
    validateResponse: null,
  };
  RendererStub.prototype.validator = validateRendererRequest;
  RendererProxy.prototype.validator = null;
  exports.Renderer = Renderer;
  exports.RendererPtr = RendererPtr;
  exports.RendererAssociatedPtr = RendererAssociatedPtr;
})();