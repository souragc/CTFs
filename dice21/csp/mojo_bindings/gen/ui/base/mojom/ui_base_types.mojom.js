// ui/base/mojom/ui_base_types.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/base/mojom/ui_base_types.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ui.mojom');


  var DialogButton = {};
  DialogButton.NONE = 0;
  DialogButton.OK = 1;
  DialogButton.CANCEL = 2;
  DialogButton.MIN_VALUE = 0,
  DialogButton.MAX_VALUE = 2,

  DialogButton.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  DialogButton.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ModalType = {};
  ModalType.NONE = 0;
  ModalType.WINDOW = 1;
  ModalType.CHILD = 2;
  ModalType.SYSTEM = 3;
  ModalType.MIN_VALUE = 0,
  ModalType.MAX_VALUE = 3,

  ModalType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ModalType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var MenuSourceType = {};
  MenuSourceType.NONE = 0;
  MenuSourceType.MOUSE = 1;
  MenuSourceType.KEYBOARD = 2;
  MenuSourceType.TOUCH = 3;
  MenuSourceType.TOUCH_EDIT_MENU = 4;
  MenuSourceType.LONG_PRESS = 5;
  MenuSourceType.LONG_TAP = 6;
  MenuSourceType.TOUCH_HANDLE = 7;
  MenuSourceType.STYLUS = 8;
  MenuSourceType.ADJUST_SELECTION = 9;
  MenuSourceType.ADJUST_SELECTION_RESET = 10;
  MenuSourceType.MIN_VALUE = 0,
  MenuSourceType.MAX_VALUE = 10,

  MenuSourceType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    }
    return false;
  };

  MenuSourceType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  exports.DialogButton = DialogButton;
  exports.ModalType = ModalType;
  exports.MenuSourceType = MenuSourceType;
})();