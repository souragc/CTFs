// ui/webui/resources/cr_components/customize_themes/customize_themes.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/webui/resources/cr_components/customize_themes/customize_themes.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('customizeThemes.mojom');
  var skcolor$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor.mojom', '../../../../../skia/public/mojom/skcolor.mojom.js');
  }


  var ThemeType = {};
  ThemeType.kDefault = 0;
  ThemeType.kAutogenerated = 1;
  ThemeType.kChrome = 2;
  ThemeType.kThirdParty = 3;
  ThemeType.MIN_VALUE = 0,
  ThemeType.MAX_VALUE = 3,

  ThemeType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ThemeType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ThemeColors(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThemeColors.prototype.initDefaults_ = function() {
    this.frame = null;
    this.activeTab = null;
    this.activeTabText = null;
  };
  ThemeColors.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThemeColors.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThemeColors.frame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThemeColors.activeTab
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThemeColors.activeTabText
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThemeColors.encodedSize = codec.kStructHeaderSize + 24;

  ThemeColors.decode = function(decoder) {
    var packed;
    var val = new ThemeColors();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frame =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.activeTab =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.activeTabText =
        decoder.decodeStructPointer(skcolor$.SkColor);
    return val;
  };

  ThemeColors.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThemeColors.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor$.SkColor, val.frame);
    encoder.encodeStructPointer(skcolor$.SkColor, val.activeTab);
    encoder.encodeStructPointer(skcolor$.SkColor, val.activeTabText);
  };
  function ChromeTheme(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeTheme.prototype.initDefaults_ = function() {
    this.id = 0;
    this.label = null;
    this.colors = null;
  };
  ChromeTheme.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeTheme.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ChromeTheme.label
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeTheme.colors
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, ThemeColors, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeTheme.encodedSize = codec.kStructHeaderSize + 24;

  ChromeTheme.decode = function(decoder) {
    var packed;
    var val = new ChromeTheme();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.label =
        decoder.decodeStruct(codec.String);
    val.colors =
        decoder.decodeStructPointer(ThemeColors);
    return val;
  };

  ChromeTheme.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeTheme.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.label);
    encoder.encodeStructPointer(ThemeColors, val.colors);
  };
  function ThirdPartyThemeInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThirdPartyThemeInfo.prototype.initDefaults_ = function() {
    this.id = null;
    this.name = null;
  };
  ThirdPartyThemeInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThirdPartyThemeInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThirdPartyThemeInfo.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThirdPartyThemeInfo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThirdPartyThemeInfo.encodedSize = codec.kStructHeaderSize + 16;

  ThirdPartyThemeInfo.decode = function(decoder) {
    var packed;
    var val = new ThirdPartyThemeInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.name =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ThirdPartyThemeInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThirdPartyThemeInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.name);
  };
  function Theme(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Theme.prototype.initDefaults_ = function() {
    this.type = 0;
    this.info = null;
  };
  Theme.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Theme.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ThemeType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.info
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, ThemeInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Theme.encodedSize = codec.kStructHeaderSize + 24;

  Theme.decode = function(decoder) {
    var packed;
    var val = new Theme();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.info =
        decoder.decodeStruct(ThemeInfo);
    return val;
  };

  Theme.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Theme.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(ThemeInfo, val.info);
  };
  function CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.prototype.initDefaults_ = function() {
    this.client = new CustomizeThemesClientPtr();
    this.handler = new bindings.InterfaceRequest();
  };
  CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.handler
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.encodedSize = codec.kStructHeaderSize + 16;

  CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(new codec.Interface(CustomizeThemesClientPtr));
    val.handler =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(CustomizeThemesClientPtr), val.client);
    encoder.encodeStruct(codec.InterfaceRequest, val.handler);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CustomizeThemesHandler_ApplyAutogeneratedTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.prototype.initDefaults_ = function() {
    this.frameColor = null;
  };
  CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.frameColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_ApplyAutogeneratedTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    return val;
  };

  CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor$.SkColor, val.frameColor);
  };
  function CustomizeThemesHandler_ApplyChromeTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_ApplyChromeTheme_Params.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  CustomizeThemesHandler_ApplyChromeTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_ApplyChromeTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_ApplyChromeTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  CustomizeThemesHandler_ApplyChromeTheme_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_ApplyChromeTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CustomizeThemesHandler_ApplyChromeTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_ApplyChromeTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CustomizeThemesHandler_ApplyDefaultTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_ApplyDefaultTheme_Params.prototype.initDefaults_ = function() {
  };
  CustomizeThemesHandler_ApplyDefaultTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_ApplyDefaultTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_ApplyDefaultTheme_Params.encodedSize = codec.kStructHeaderSize + 0;

  CustomizeThemesHandler_ApplyDefaultTheme_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_ApplyDefaultTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CustomizeThemesHandler_ApplyDefaultTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_ApplyDefaultTheme_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CustomizeThemesHandler_InitializeTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_InitializeTheme_Params.prototype.initDefaults_ = function() {
  };
  CustomizeThemesHandler_InitializeTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_InitializeTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_InitializeTheme_Params.encodedSize = codec.kStructHeaderSize + 0;

  CustomizeThemesHandler_InitializeTheme_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_InitializeTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CustomizeThemesHandler_InitializeTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_InitializeTheme_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CustomizeThemesHandler_GetChromeThemes_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_GetChromeThemes_Params.prototype.initDefaults_ = function() {
  };
  CustomizeThemesHandler_GetChromeThemes_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_GetChromeThemes_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_GetChromeThemes_Params.encodedSize = codec.kStructHeaderSize + 0;

  CustomizeThemesHandler_GetChromeThemes_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_GetChromeThemes_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CustomizeThemesHandler_GetChromeThemes_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_GetChromeThemes_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CustomizeThemesHandler_GetChromeThemes_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_GetChromeThemes_ResponseParams.prototype.initDefaults_ = function() {
    this.chromeThemes = null;
  };
  CustomizeThemesHandler_GetChromeThemes_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_GetChromeThemes_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CustomizeThemesHandler_GetChromeThemes_ResponseParams.chromeThemes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ChromeTheme), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_GetChromeThemes_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CustomizeThemesHandler_GetChromeThemes_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_GetChromeThemes_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.chromeThemes =
        decoder.decodeArrayPointer(new codec.PointerTo(ChromeTheme));
    return val;
  };

  CustomizeThemesHandler_GetChromeThemes_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_GetChromeThemes_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ChromeTheme), val.chromeThemes);
  };
  function CustomizeThemesHandler_ConfirmThemeChanges_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_ConfirmThemeChanges_Params.prototype.initDefaults_ = function() {
  };
  CustomizeThemesHandler_ConfirmThemeChanges_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_ConfirmThemeChanges_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_ConfirmThemeChanges_Params.encodedSize = codec.kStructHeaderSize + 0;

  CustomizeThemesHandler_ConfirmThemeChanges_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_ConfirmThemeChanges_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CustomizeThemesHandler_ConfirmThemeChanges_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_ConfirmThemeChanges_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CustomizeThemesHandler_RevertThemeChanges_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesHandler_RevertThemeChanges_Params.prototype.initDefaults_ = function() {
  };
  CustomizeThemesHandler_RevertThemeChanges_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesHandler_RevertThemeChanges_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesHandler_RevertThemeChanges_Params.encodedSize = codec.kStructHeaderSize + 0;

  CustomizeThemesHandler_RevertThemeChanges_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesHandler_RevertThemeChanges_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CustomizeThemesHandler_RevertThemeChanges_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesHandler_RevertThemeChanges_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CustomizeThemesClient_SetTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CustomizeThemesClient_SetTheme_Params.prototype.initDefaults_ = function() {
    this.theme = null;
  };
  CustomizeThemesClient_SetTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CustomizeThemesClient_SetTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CustomizeThemesClient_SetTheme_Params.theme
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Theme, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CustomizeThemesClient_SetTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  CustomizeThemesClient_SetTheme_Params.decode = function(decoder) {
    var packed;
    var val = new CustomizeThemesClient_SetTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.theme =
        decoder.decodeStructPointer(Theme);
    return val;
  };

  CustomizeThemesClient_SetTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CustomizeThemesClient_SetTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Theme, val.theme);
  };

  function ThemeInfo(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ThemeInfo.Tags = {
    chromeThemeId: 0,
    autogeneratedThemeColors: 1,
    thirdPartyThemeInfo: 2,
  };

  ThemeInfo.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ThemeInfo.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "chromeThemeId",
        "autogeneratedThemeColors",
        "thirdPartyThemeInfo",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ThemeInfo member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ThemeInfo.prototype, "chromeThemeId", {
    get: function() {
      if (this.$tag != ThemeInfo.Tags.chromeThemeId) {
        throw new ReferenceError(
            "ThemeInfo.chromeThemeId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ThemeInfo.Tags.chromeThemeId;
      this.$data = value;
    }
  });
  Object.defineProperty(ThemeInfo.prototype, "autogeneratedThemeColors", {
    get: function() {
      if (this.$tag != ThemeInfo.Tags.autogeneratedThemeColors) {
        throw new ReferenceError(
            "ThemeInfo.autogeneratedThemeColors is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ThemeInfo.Tags.autogeneratedThemeColors;
      this.$data = value;
    }
  });
  Object.defineProperty(ThemeInfo.prototype, "thirdPartyThemeInfo", {
    get: function() {
      if (this.$tag != ThemeInfo.Tags.thirdPartyThemeInfo) {
        throw new ReferenceError(
            "ThemeInfo.thirdPartyThemeInfo is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ThemeInfo.Tags.thirdPartyThemeInfo;
      this.$data = value;
    }
  });


    ThemeInfo.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ThemeInfo.Tags.chromeThemeId:
          encoder.encodeStruct(codec.Int32, val.chromeThemeId);
          break;
        case ThemeInfo.Tags.autogeneratedThemeColors:
          encoder.encodeStructPointer(ThemeColors, val.autogeneratedThemeColors);
          break;
        case ThemeInfo.Tags.thirdPartyThemeInfo:
          encoder.encodeStructPointer(ThirdPartyThemeInfo, val.thirdPartyThemeInfo);
          break;
      }
      encoder.align();
    };


    ThemeInfo.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ThemeInfo();
      var tag = decoder.readUint32();
      switch (tag) {
        case ThemeInfo.Tags.chromeThemeId:
          result.chromeThemeId = decoder.decodeStruct(codec.Int32);
          break;
        case ThemeInfo.Tags.autogeneratedThemeColors:
          result.autogeneratedThemeColors = decoder.decodeStructPointer(ThemeColors);
          break;
        case ThemeInfo.Tags.thirdPartyThemeInfo:
          result.thirdPartyThemeInfo = decoder.decodeStructPointer(ThirdPartyThemeInfo);
          break;
      }
      decoder.align();

      return result;
    };


    ThemeInfo.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ThemeInfo.Tags.chromeThemeId:
          

          break;
        case ThemeInfo.Tags.autogeneratedThemeColors:
          

    // validate ThemeInfo.autogeneratedThemeColors
    err = messageValidator.validateStructPointer(data_offset, ThemeColors, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ThemeInfo.Tags.thirdPartyThemeInfo:
          

    // validate ThemeInfo.thirdPartyThemeInfo
    err = messageValidator.validateStructPointer(data_offset, ThirdPartyThemeInfo, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ThemeInfo.encodedSize = 16;
  var kCustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Name = 244142959;

  function CustomizeThemesHandlerFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CustomizeThemesHandlerFactory,
                                                   handleOrPtrInfo);
  }

  function CustomizeThemesHandlerFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CustomizeThemesHandlerFactory, associatedInterfacePtrInfo);
  }

  CustomizeThemesHandlerFactoryAssociatedPtr.prototype =
      Object.create(CustomizeThemesHandlerFactoryPtr.prototype);
  CustomizeThemesHandlerFactoryAssociatedPtr.prototype.constructor =
      CustomizeThemesHandlerFactoryAssociatedPtr;

  function CustomizeThemesHandlerFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  CustomizeThemesHandlerFactoryPtr.prototype.createCustomizeThemesHandler = function() {
    return CustomizeThemesHandlerFactoryProxy.prototype.createCustomizeThemesHandler
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerFactoryProxy.prototype.createCustomizeThemesHandler = function(client, handler) {
    var params_ = new CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params();
    params_.client = client;
    params_.handler = handler;
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Name,
        codec.align(CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CustomizeThemesHandlerFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  CustomizeThemesHandlerFactoryStub.prototype.createCustomizeThemesHandler = function(client, handler) {
    return this.delegate_ && this.delegate_.createCustomizeThemesHandler && this.delegate_.createCustomizeThemesHandler(client, handler);
  }

  CustomizeThemesHandlerFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Name:
      var params = reader.decodeStruct(CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params);
      this.createCustomizeThemesHandler(params.client, params.handler);
      return true;
    default:
      return false;
    }
  };

  CustomizeThemesHandlerFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCustomizeThemesHandlerFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandlerFactory_CreateCustomizeThemesHandler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCustomizeThemesHandlerFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CustomizeThemesHandlerFactory = {
    name: 'customize_themes.mojom.CustomizeThemesHandlerFactory',
    kVersion: 0,
    ptrClass: CustomizeThemesHandlerFactoryPtr,
    proxyClass: CustomizeThemesHandlerFactoryProxy,
    stubClass: CustomizeThemesHandlerFactoryStub,
    validateRequest: validateCustomizeThemesHandlerFactoryRequest,
    validateResponse: null,
  };
  CustomizeThemesHandlerFactoryStub.prototype.validator = validateCustomizeThemesHandlerFactoryRequest;
  CustomizeThemesHandlerFactoryProxy.prototype.validator = null;
  var kCustomizeThemesHandler_ApplyAutogeneratedTheme_Name = 1010104581;
  var kCustomizeThemesHandler_ApplyChromeTheme_Name = 808859853;
  var kCustomizeThemesHandler_ApplyDefaultTheme_Name = 931007902;
  var kCustomizeThemesHandler_InitializeTheme_Name = 1949892931;
  var kCustomizeThemesHandler_GetChromeThemes_Name = 325517542;
  var kCustomizeThemesHandler_ConfirmThemeChanges_Name = 827181251;
  var kCustomizeThemesHandler_RevertThemeChanges_Name = 1421779619;

  function CustomizeThemesHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CustomizeThemesHandler,
                                                   handleOrPtrInfo);
  }

  function CustomizeThemesHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CustomizeThemesHandler, associatedInterfacePtrInfo);
  }

  CustomizeThemesHandlerAssociatedPtr.prototype =
      Object.create(CustomizeThemesHandlerPtr.prototype);
  CustomizeThemesHandlerAssociatedPtr.prototype.constructor =
      CustomizeThemesHandlerAssociatedPtr;

  function CustomizeThemesHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  CustomizeThemesHandlerPtr.prototype.applyAutogeneratedTheme = function() {
    return CustomizeThemesHandlerProxy.prototype.applyAutogeneratedTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.applyAutogeneratedTheme = function(frameColor) {
    var params_ = new CustomizeThemesHandler_ApplyAutogeneratedTheme_Params();
    params_.frameColor = frameColor;
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandler_ApplyAutogeneratedTheme_Name,
        codec.align(CustomizeThemesHandler_ApplyAutogeneratedTheme_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandler_ApplyAutogeneratedTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CustomizeThemesHandlerPtr.prototype.applyChromeTheme = function() {
    return CustomizeThemesHandlerProxy.prototype.applyChromeTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.applyChromeTheme = function(id) {
    var params_ = new CustomizeThemesHandler_ApplyChromeTheme_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandler_ApplyChromeTheme_Name,
        codec.align(CustomizeThemesHandler_ApplyChromeTheme_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandler_ApplyChromeTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CustomizeThemesHandlerPtr.prototype.applyDefaultTheme = function() {
    return CustomizeThemesHandlerProxy.prototype.applyDefaultTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.applyDefaultTheme = function() {
    var params_ = new CustomizeThemesHandler_ApplyDefaultTheme_Params();
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandler_ApplyDefaultTheme_Name,
        codec.align(CustomizeThemesHandler_ApplyDefaultTheme_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandler_ApplyDefaultTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CustomizeThemesHandlerPtr.prototype.initializeTheme = function() {
    return CustomizeThemesHandlerProxy.prototype.initializeTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.initializeTheme = function() {
    var params_ = new CustomizeThemesHandler_InitializeTheme_Params();
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandler_InitializeTheme_Name,
        codec.align(CustomizeThemesHandler_InitializeTheme_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandler_InitializeTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CustomizeThemesHandlerPtr.prototype.getChromeThemes = function() {
    return CustomizeThemesHandlerProxy.prototype.getChromeThemes
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.getChromeThemes = function() {
    var params_ = new CustomizeThemesHandler_GetChromeThemes_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCustomizeThemesHandler_GetChromeThemes_Name,
          codec.align(CustomizeThemesHandler_GetChromeThemes_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CustomizeThemesHandler_GetChromeThemes_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CustomizeThemesHandler_GetChromeThemes_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CustomizeThemesHandlerPtr.prototype.confirmThemeChanges = function() {
    return CustomizeThemesHandlerProxy.prototype.confirmThemeChanges
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.confirmThemeChanges = function() {
    var params_ = new CustomizeThemesHandler_ConfirmThemeChanges_Params();
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandler_ConfirmThemeChanges_Name,
        codec.align(CustomizeThemesHandler_ConfirmThemeChanges_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandler_ConfirmThemeChanges_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CustomizeThemesHandlerPtr.prototype.revertThemeChanges = function() {
    return CustomizeThemesHandlerProxy.prototype.revertThemeChanges
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesHandlerProxy.prototype.revertThemeChanges = function() {
    var params_ = new CustomizeThemesHandler_RevertThemeChanges_Params();
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesHandler_RevertThemeChanges_Name,
        codec.align(CustomizeThemesHandler_RevertThemeChanges_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesHandler_RevertThemeChanges_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CustomizeThemesHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  CustomizeThemesHandlerStub.prototype.applyAutogeneratedTheme = function(frameColor) {
    return this.delegate_ && this.delegate_.applyAutogeneratedTheme && this.delegate_.applyAutogeneratedTheme(frameColor);
  }
  CustomizeThemesHandlerStub.prototype.applyChromeTheme = function(id) {
    return this.delegate_ && this.delegate_.applyChromeTheme && this.delegate_.applyChromeTheme(id);
  }
  CustomizeThemesHandlerStub.prototype.applyDefaultTheme = function() {
    return this.delegate_ && this.delegate_.applyDefaultTheme && this.delegate_.applyDefaultTheme();
  }
  CustomizeThemesHandlerStub.prototype.initializeTheme = function() {
    return this.delegate_ && this.delegate_.initializeTheme && this.delegate_.initializeTheme();
  }
  CustomizeThemesHandlerStub.prototype.getChromeThemes = function() {
    return this.delegate_ && this.delegate_.getChromeThemes && this.delegate_.getChromeThemes();
  }
  CustomizeThemesHandlerStub.prototype.confirmThemeChanges = function() {
    return this.delegate_ && this.delegate_.confirmThemeChanges && this.delegate_.confirmThemeChanges();
  }
  CustomizeThemesHandlerStub.prototype.revertThemeChanges = function() {
    return this.delegate_ && this.delegate_.revertThemeChanges && this.delegate_.revertThemeChanges();
  }

  CustomizeThemesHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCustomizeThemesHandler_ApplyAutogeneratedTheme_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_ApplyAutogeneratedTheme_Params);
      this.applyAutogeneratedTheme(params.frameColor);
      return true;
    case kCustomizeThemesHandler_ApplyChromeTheme_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_ApplyChromeTheme_Params);
      this.applyChromeTheme(params.id);
      return true;
    case kCustomizeThemesHandler_ApplyDefaultTheme_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_ApplyDefaultTheme_Params);
      this.applyDefaultTheme();
      return true;
    case kCustomizeThemesHandler_InitializeTheme_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_InitializeTheme_Params);
      this.initializeTheme();
      return true;
    case kCustomizeThemesHandler_ConfirmThemeChanges_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_ConfirmThemeChanges_Params);
      this.confirmThemeChanges();
      return true;
    case kCustomizeThemesHandler_RevertThemeChanges_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_RevertThemeChanges_Params);
      this.revertThemeChanges();
      return true;
    default:
      return false;
    }
  };

  CustomizeThemesHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCustomizeThemesHandler_GetChromeThemes_Name:
      var params = reader.decodeStruct(CustomizeThemesHandler_GetChromeThemes_Params);
      this.getChromeThemes().then(function(response) {
        var responseParams =
            new CustomizeThemesHandler_GetChromeThemes_ResponseParams();
        responseParams.chromeThemes = response.chromeThemes;
        var builder = new codec.MessageV1Builder(
            kCustomizeThemesHandler_GetChromeThemes_Name,
            codec.align(CustomizeThemesHandler_GetChromeThemes_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CustomizeThemesHandler_GetChromeThemes_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCustomizeThemesHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCustomizeThemesHandler_ApplyAutogeneratedTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandler_ApplyAutogeneratedTheme_Params;
      break;
      case kCustomizeThemesHandler_ApplyChromeTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandler_ApplyChromeTheme_Params;
      break;
      case kCustomizeThemesHandler_ApplyDefaultTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandler_ApplyDefaultTheme_Params;
      break;
      case kCustomizeThemesHandler_InitializeTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandler_InitializeTheme_Params;
      break;
      case kCustomizeThemesHandler_GetChromeThemes_Name:
        if (message.expectsResponse())
          paramsClass = CustomizeThemesHandler_GetChromeThemes_Params;
      break;
      case kCustomizeThemesHandler_ConfirmThemeChanges_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandler_ConfirmThemeChanges_Params;
      break;
      case kCustomizeThemesHandler_RevertThemeChanges_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesHandler_RevertThemeChanges_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCustomizeThemesHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCustomizeThemesHandler_GetChromeThemes_Name:
        if (message.isResponse())
          paramsClass = CustomizeThemesHandler_GetChromeThemes_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CustomizeThemesHandler = {
    name: 'customize_themes.mojom.CustomizeThemesHandler',
    kVersion: 0,
    ptrClass: CustomizeThemesHandlerPtr,
    proxyClass: CustomizeThemesHandlerProxy,
    stubClass: CustomizeThemesHandlerStub,
    validateRequest: validateCustomizeThemesHandlerRequest,
    validateResponse: validateCustomizeThemesHandlerResponse,
  };
  CustomizeThemesHandlerStub.prototype.validator = validateCustomizeThemesHandlerRequest;
  CustomizeThemesHandlerProxy.prototype.validator = validateCustomizeThemesHandlerResponse;
  var kCustomizeThemesClient_SetTheme_Name = 1920869769;

  function CustomizeThemesClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CustomizeThemesClient,
                                                   handleOrPtrInfo);
  }

  function CustomizeThemesClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CustomizeThemesClient, associatedInterfacePtrInfo);
  }

  CustomizeThemesClientAssociatedPtr.prototype =
      Object.create(CustomizeThemesClientPtr.prototype);
  CustomizeThemesClientAssociatedPtr.prototype.constructor =
      CustomizeThemesClientAssociatedPtr;

  function CustomizeThemesClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  CustomizeThemesClientPtr.prototype.setTheme = function() {
    return CustomizeThemesClientProxy.prototype.setTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  CustomizeThemesClientProxy.prototype.setTheme = function(theme) {
    var params_ = new CustomizeThemesClient_SetTheme_Params();
    params_.theme = theme;
    var builder = new codec.MessageV0Builder(
        kCustomizeThemesClient_SetTheme_Name,
        codec.align(CustomizeThemesClient_SetTheme_Params.encodedSize));
    builder.encodeStruct(CustomizeThemesClient_SetTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CustomizeThemesClientStub(delegate) {
    this.delegate_ = delegate;
  }
  CustomizeThemesClientStub.prototype.setTheme = function(theme) {
    return this.delegate_ && this.delegate_.setTheme && this.delegate_.setTheme(theme);
  }

  CustomizeThemesClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCustomizeThemesClient_SetTheme_Name:
      var params = reader.decodeStruct(CustomizeThemesClient_SetTheme_Params);
      this.setTheme(params.theme);
      return true;
    default:
      return false;
    }
  };

  CustomizeThemesClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCustomizeThemesClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCustomizeThemesClient_SetTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CustomizeThemesClient_SetTheme_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCustomizeThemesClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CustomizeThemesClient = {
    name: 'customize_themes.mojom.CustomizeThemesClient',
    kVersion: 0,
    ptrClass: CustomizeThemesClientPtr,
    proxyClass: CustomizeThemesClientProxy,
    stubClass: CustomizeThemesClientStub,
    validateRequest: validateCustomizeThemesClientRequest,
    validateResponse: null,
  };
  CustomizeThemesClientStub.prototype.validator = validateCustomizeThemesClientRequest;
  CustomizeThemesClientProxy.prototype.validator = null;
  exports.ThemeType = ThemeType;
  exports.ThemeColors = ThemeColors;
  exports.ChromeTheme = ChromeTheme;
  exports.ThirdPartyThemeInfo = ThirdPartyThemeInfo;
  exports.Theme = Theme;
  exports.ThemeInfo = ThemeInfo;
  exports.CustomizeThemesHandlerFactory = CustomizeThemesHandlerFactory;
  exports.CustomizeThemesHandlerFactoryPtr = CustomizeThemesHandlerFactoryPtr;
  exports.CustomizeThemesHandlerFactoryAssociatedPtr = CustomizeThemesHandlerFactoryAssociatedPtr;
  exports.CustomizeThemesHandler = CustomizeThemesHandler;
  exports.CustomizeThemesHandlerPtr = CustomizeThemesHandlerPtr;
  exports.CustomizeThemesHandlerAssociatedPtr = CustomizeThemesHandlerAssociatedPtr;
  exports.CustomizeThemesClient = CustomizeThemesClient;
  exports.CustomizeThemesClientPtr = CustomizeThemesClientPtr;
  exports.CustomizeThemesClientAssociatedPtr = CustomizeThemesClientAssociatedPtr;
})();