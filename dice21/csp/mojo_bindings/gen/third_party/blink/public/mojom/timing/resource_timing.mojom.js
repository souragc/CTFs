// third_party/blink/public/mojom/timing/resource_timing.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/timing/resource_timing.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var fetch_api$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/fetch_api.mojom', '../../../../../services/network/public/mojom/fetch_api.mojom.js');
  }
  var load_timing_info$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/load_timing_info.mojom', '../../../../../services/network/public/mojom/load_timing_info.mojom.js');
  }
  var fetch_api_request$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/fetch/fetch_api_request.mojom', '../fetch/fetch_api_request.mojom.js');
  }



  function ServerTimingInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServerTimingInfo.prototype.initDefaults_ = function() {
    this.name = null;
    this.duration = 0;
    this.description = null;
  };
  ServerTimingInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServerTimingInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServerTimingInfo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServerTimingInfo.description
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServerTimingInfo.encodedSize = codec.kStructHeaderSize + 24;

  ServerTimingInfo.decode = function(decoder) {
    var packed;
    var val = new ServerTimingInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.duration =
        decoder.decodeStruct(codec.Double);
    val.description =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ServerTimingInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServerTimingInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Double, val.duration);
    encoder.encodeStruct(codec.String, val.description);
  };
  function ResourceTimingInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceTimingInfo.prototype.initDefaults_ = function() {
    this.name = null;
    this.startTime = null;
    this.alpnNegotiatedProtocol = null;
    this.connectionInfo = null;
    this.timing = null;
    this.lastRedirectEndTime = null;
    this.responseEnd = null;
    this.contextType = 0;
    this.requestDestination = 0;
    this.transferSize = 0;
    this.encodedBodySize = 0;
    this.decodedBodySize = 0;
    this.didReuseConnection = false;
    this.isSecureContext = false;
    this.allowTimingDetails = false;
    this.allowRedirectDetails = false;
    this.allowNegativeValues = false;
    this.serverTiming = null;
  };
  ResourceTimingInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceTimingInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 112}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.startTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.alpnNegotiatedProtocol
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.connectionInfo
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.timing
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, load_timing_info$.LoadTimingInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.lastRedirectEndTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.responseEnd
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.contextType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 56, fetch_api_request$.RequestContextType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceTimingInfo.requestDestination
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 60, fetch_api$.RequestDestination);
    if (err !== validator.validationError.NONE)
        return err;










    // validate ResourceTimingInfo.serverTiming
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 96, 8, new codec.PointerTo(ServerTimingInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceTimingInfo.encodedSize = codec.kStructHeaderSize + 104;

  ResourceTimingInfo.decode = function(decoder) {
    var packed;
    var val = new ResourceTimingInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.startTime =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.alpnNegotiatedProtocol =
        decoder.decodeStruct(codec.String);
    val.connectionInfo =
        decoder.decodeStruct(codec.String);
    val.timing =
        decoder.decodeStructPointer(load_timing_info$.LoadTimingInfo);
    val.lastRedirectEndTime =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.responseEnd =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.contextType =
        decoder.decodeStruct(codec.Int32);
    val.requestDestination =
        decoder.decodeStruct(codec.Int32);
    val.transferSize =
        decoder.decodeStruct(codec.Uint64);
    val.encodedBodySize =
        decoder.decodeStruct(codec.Uint64);
    val.decodedBodySize =
        decoder.decodeStruct(codec.Uint64);
    packed = decoder.readUint8();
    val.didReuseConnection = (packed >> 0) & 1 ? true : false;
    val.isSecureContext = (packed >> 1) & 1 ? true : false;
    val.allowTimingDetails = (packed >> 2) & 1 ? true : false;
    val.allowRedirectDetails = (packed >> 3) & 1 ? true : false;
    val.allowNegativeValues = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.serverTiming =
        decoder.decodeArrayPointer(new codec.PointerTo(ServerTimingInfo));
    return val;
  };

  ResourceTimingInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceTimingInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStructPointer(time$.TimeTicks, val.startTime);
    encoder.encodeStruct(codec.String, val.alpnNegotiatedProtocol);
    encoder.encodeStruct(codec.String, val.connectionInfo);
    encoder.encodeStructPointer(load_timing_info$.LoadTimingInfo, val.timing);
    encoder.encodeStructPointer(time$.TimeTicks, val.lastRedirectEndTime);
    encoder.encodeStructPointer(time$.TimeTicks, val.responseEnd);
    encoder.encodeStruct(codec.Int32, val.contextType);
    encoder.encodeStruct(codec.Int32, val.requestDestination);
    encoder.encodeStruct(codec.Uint64, val.transferSize);
    encoder.encodeStruct(codec.Uint64, val.encodedBodySize);
    encoder.encodeStruct(codec.Uint64, val.decodedBodySize);
    packed = 0;
    packed |= (val.didReuseConnection & 1) << 0
    packed |= (val.isSecureContext & 1) << 1
    packed |= (val.allowTimingDetails & 1) << 2
    packed |= (val.allowRedirectDetails & 1) << 3
    packed |= (val.allowNegativeValues & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(ServerTimingInfo), val.serverTiming);
  };
  exports.ServerTimingInfo = ServerTimingInfo;
  exports.ResourceTimingInfo = ResourceTimingInfo;
})();