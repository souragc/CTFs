// third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var file_system_access_directory_handle$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/file_system_access/file_system_access_directory_handle.mojom', 'file_system_access_directory_handle.mojom.js');
  }
  var file_system_access_file_handle$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom', 'file_system_access_file_handle.mojom.js');
  }
  var file_system_access_error$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/file_system_access/file_system_access_error.mojom', 'file_system_access_error.mojom.js');
  }
  var file_system_access_transfer_token$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/file_system_access/file_system_access_transfer_token.mojom', 'file_system_access_transfer_token.mojom.js');
  }
  var file_system_access_drag_drop_token$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/file_system_access/file_system_access_drag_drop_token.mojom', 'file_system_access_drag_drop_token.mojom.js');
  }


  var ChooseFileSystemEntryType = {};
  ChooseFileSystemEntryType.kOpenFile = 0;
  ChooseFileSystemEntryType.kOpenMultipleFiles = 1;
  ChooseFileSystemEntryType.kSaveFile = 2;
  ChooseFileSystemEntryType.kOpenDirectory = 3;
  ChooseFileSystemEntryType.MIN_VALUE = 0,
  ChooseFileSystemEntryType.MAX_VALUE = 3,

  ChooseFileSystemEntryType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ChooseFileSystemEntryType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var WellKnownDirectory = {};
  WellKnownDirectory.kDefault = 0;
  WellKnownDirectory.kDirDesktop = 1;
  WellKnownDirectory.kDirDocuments = 2;
  WellKnownDirectory.kDirDownloads = 3;
  WellKnownDirectory.kDirMusic = 4;
  WellKnownDirectory.kDirPictures = 5;
  WellKnownDirectory.kDirVideos = 6;
  WellKnownDirectory.MIN_VALUE = 0,
  WellKnownDirectory.MAX_VALUE = 6,

  WellKnownDirectory.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  WellKnownDirectory.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ChooseFileSystemEntryAcceptsOption(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChooseFileSystemEntryAcceptsOption.prototype.initDefaults_ = function() {
    this.description = null;
    this.mimeTypes = null;
    this.extensions = null;
  };
  ChooseFileSystemEntryAcceptsOption.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChooseFileSystemEntryAcceptsOption.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChooseFileSystemEntryAcceptsOption.description
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChooseFileSystemEntryAcceptsOption.mimeTypes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChooseFileSystemEntryAcceptsOption.extensions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChooseFileSystemEntryAcceptsOption.encodedSize = codec.kStructHeaderSize + 24;

  ChooseFileSystemEntryAcceptsOption.decode = function(decoder) {
    var packed;
    var val = new ChooseFileSystemEntryAcceptsOption();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.description =
        decoder.decodeStructPointer(string16$.String16);
    val.mimeTypes =
        decoder.decodeArrayPointer(codec.String);
    val.extensions =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  ChooseFileSystemEntryAcceptsOption.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChooseFileSystemEntryAcceptsOption.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.description);
    encoder.encodeArrayPointer(codec.String, val.mimeTypes);
    encoder.encodeArrayPointer(codec.String, val.extensions);
  };
  function FileSystemAccessManager_GetSandboxedFileSystem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_GetSandboxedFileSystem_Params.prototype.initDefaults_ = function() {
  };
  FileSystemAccessManager_GetSandboxedFileSystem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_GetSandboxedFileSystem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_GetSandboxedFileSystem_Params.encodedSize = codec.kStructHeaderSize + 0;

  FileSystemAccessManager_GetSandboxedFileSystem_Params.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_GetSandboxedFileSystem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FileSystemAccessManager_GetSandboxedFileSystem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_GetSandboxedFileSystem_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.directory = new file_system_access_directory_handle$.FileSystemAccessDirectoryHandlePtr();
  };
  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_system_access_error$.FileSystemAccessError, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.directory
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(file_system_access_error$.FileSystemAccessError);
    val.directory =
        decoder.decodeStruct(new codec.NullableInterface(file_system_access_directory_handle$.FileSystemAccessDirectoryHandlePtr));
    return val;
  };

  FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_system_access_error$.FileSystemAccessError, val.result);
    encoder.encodeStruct(new codec.NullableInterface(file_system_access_directory_handle$.FileSystemAccessDirectoryHandlePtr), val.directory);
  };
  function FileSystemAccessManager_ChooseEntries_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_ChooseEntries_Params.prototype.initDefaults_ = function() {
    this.type = 0;
    this.wellKnownStartingDirectory = 0;
    this.accepts = null;
    this.includeAcceptsAll = false;
  };
  FileSystemAccessManager_ChooseEntries_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_ChooseEntries_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_ChooseEntries_Params.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ChooseFileSystemEntryType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_ChooseEntries_Params.accepts
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(ChooseFileSystemEntryAcceptsOption), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_ChooseEntries_Params.wellKnownStartingDirectory
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, WellKnownDirectory);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FileSystemAccessManager_ChooseEntries_Params.encodedSize = codec.kStructHeaderSize + 24;

  FileSystemAccessManager_ChooseEntries_Params.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_ChooseEntries_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    val.wellKnownStartingDirectory =
        decoder.decodeStruct(codec.Int32);
    val.accepts =
        decoder.decodeArrayPointer(new codec.PointerTo(ChooseFileSystemEntryAcceptsOption));
    packed = decoder.readUint8();
    val.includeAcceptsAll = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FileSystemAccessManager_ChooseEntries_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_ChooseEntries_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.encodeStruct(codec.Int32, val.wellKnownStartingDirectory);
    encoder.encodeArrayPointer(new codec.PointerTo(ChooseFileSystemEntryAcceptsOption), val.accepts);
    packed = 0;
    packed |= (val.includeAcceptsAll & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FileSystemAccessManager_ChooseEntries_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_ChooseEntries_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.entries = null;
  };
  FileSystemAccessManager_ChooseEntries_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_ChooseEntries_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_ChooseEntries_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_system_access_error$.FileSystemAccessError, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_ChooseEntries_ResponseParams.entries
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(file_system_access_directory_handle$.FileSystemAccessEntry), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_ChooseEntries_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  FileSystemAccessManager_ChooseEntries_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_ChooseEntries_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(file_system_access_error$.FileSystemAccessError);
    val.entries =
        decoder.decodeArrayPointer(new codec.PointerTo(file_system_access_directory_handle$.FileSystemAccessEntry));
    return val;
  };

  FileSystemAccessManager_ChooseEntries_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_ChooseEntries_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_system_access_error$.FileSystemAccessError, val.result);
    encoder.encodeArrayPointer(new codec.PointerTo(file_system_access_directory_handle$.FileSystemAccessEntry), val.entries);
  };
  function FileSystemAccessManager_GetFileHandleFromToken_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_GetFileHandleFromToken_Params.prototype.initDefaults_ = function() {
    this.token = new file_system_access_transfer_token$.FileSystemAccessTransferTokenPtr();
    this.fileHandle = new bindings.InterfaceRequest();
  };
  FileSystemAccessManager_GetFileHandleFromToken_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_GetFileHandleFromToken_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetFileHandleFromToken_Params.token
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetFileHandleFromToken_Params.fileHandle
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_GetFileHandleFromToken_Params.encodedSize = codec.kStructHeaderSize + 16;

  FileSystemAccessManager_GetFileHandleFromToken_Params.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_GetFileHandleFromToken_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.token =
        decoder.decodeStruct(new codec.Interface(file_system_access_transfer_token$.FileSystemAccessTransferTokenPtr));
    val.fileHandle =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FileSystemAccessManager_GetFileHandleFromToken_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_GetFileHandleFromToken_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(file_system_access_transfer_token$.FileSystemAccessTransferTokenPtr), val.token);
    encoder.encodeStruct(codec.InterfaceRequest, val.fileHandle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FileSystemAccessManager_GetDirectoryHandleFromToken_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_GetDirectoryHandleFromToken_Params.prototype.initDefaults_ = function() {
    this.token = new file_system_access_transfer_token$.FileSystemAccessTransferTokenPtr();
    this.directoryHandle = new bindings.InterfaceRequest();
  };
  FileSystemAccessManager_GetDirectoryHandleFromToken_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_GetDirectoryHandleFromToken_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetDirectoryHandleFromToken_Params.token
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetDirectoryHandleFromToken_Params.directoryHandle
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_GetDirectoryHandleFromToken_Params.encodedSize = codec.kStructHeaderSize + 16;

  FileSystemAccessManager_GetDirectoryHandleFromToken_Params.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_GetDirectoryHandleFromToken_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.token =
        decoder.decodeStruct(new codec.Interface(file_system_access_transfer_token$.FileSystemAccessTransferTokenPtr));
    val.directoryHandle =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FileSystemAccessManager_GetDirectoryHandleFromToken_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_GetDirectoryHandleFromToken_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(file_system_access_transfer_token$.FileSystemAccessTransferTokenPtr), val.token);
    encoder.encodeStruct(codec.InterfaceRequest, val.directoryHandle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FileSystemAccessManager_GetEntryFromDragDropToken_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_GetEntryFromDragDropToken_Params.prototype.initDefaults_ = function() {
    this.token = new file_system_access_drag_drop_token$.FileSystemAccessDragDropTokenPtr();
  };
  FileSystemAccessManager_GetEntryFromDragDropToken_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_GetEntryFromDragDropToken_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetEntryFromDragDropToken_Params.token
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_GetEntryFromDragDropToken_Params.encodedSize = codec.kStructHeaderSize + 8;

  FileSystemAccessManager_GetEntryFromDragDropToken_Params.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_GetEntryFromDragDropToken_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.token =
        decoder.decodeStruct(new codec.Interface(file_system_access_drag_drop_token$.FileSystemAccessDragDropTokenPtr));
    return val;
  };

  FileSystemAccessManager_GetEntryFromDragDropToken_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_GetEntryFromDragDropToken_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(file_system_access_drag_drop_token$.FileSystemAccessDragDropTokenPtr), val.token);
  };
  function FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.prototype.initDefaults_ = function() {
    this.entry = null;
  };
  FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.entry
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_system_access_directory_handle$.FileSystemAccessEntry, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.entry =
        decoder.decodeStructPointer(file_system_access_directory_handle$.FileSystemAccessEntry);
    return val;
  };

  FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_system_access_directory_handle$.FileSystemAccessEntry, val.entry);
  };
  var kFileSystemAccessManager_GetSandboxedFileSystem_Name = 0;
  var kFileSystemAccessManager_ChooseEntries_Name = 1;
  var kFileSystemAccessManager_GetFileHandleFromToken_Name = 2;
  var kFileSystemAccessManager_GetDirectoryHandleFromToken_Name = 3;
  var kFileSystemAccessManager_GetEntryFromDragDropToken_Name = 4;

  function FileSystemAccessManagerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FileSystemAccessManager,
                                                   handleOrPtrInfo);
  }

  function FileSystemAccessManagerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FileSystemAccessManager, associatedInterfacePtrInfo);
  }

  FileSystemAccessManagerAssociatedPtr.prototype =
      Object.create(FileSystemAccessManagerPtr.prototype);
  FileSystemAccessManagerAssociatedPtr.prototype.constructor =
      FileSystemAccessManagerAssociatedPtr;

  function FileSystemAccessManagerProxy(receiver) {
    this.receiver_ = receiver;
  }
  FileSystemAccessManagerPtr.prototype.getSandboxedFileSystem = function() {
    return FileSystemAccessManagerProxy.prototype.getSandboxedFileSystem
        .apply(this.ptr.getProxy(), arguments);
  };

  FileSystemAccessManagerProxy.prototype.getSandboxedFileSystem = function() {
    var params_ = new FileSystemAccessManager_GetSandboxedFileSystem_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileSystemAccessManager_GetSandboxedFileSystem_Name,
          codec.align(FileSystemAccessManager_GetSandboxedFileSystem_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileSystemAccessManager_GetSandboxedFileSystem_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FileSystemAccessManagerPtr.prototype.chooseEntries = function() {
    return FileSystemAccessManagerProxy.prototype.chooseEntries
        .apply(this.ptr.getProxy(), arguments);
  };

  FileSystemAccessManagerProxy.prototype.chooseEntries = function(type, accepts, wellKnownStartingDirectory, includeAcceptsAll) {
    var params_ = new FileSystemAccessManager_ChooseEntries_Params();
    params_.type = type;
    params_.accepts = accepts;
    params_.wellKnownStartingDirectory = wellKnownStartingDirectory;
    params_.includeAcceptsAll = includeAcceptsAll;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileSystemAccessManager_ChooseEntries_Name,
          codec.align(FileSystemAccessManager_ChooseEntries_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileSystemAccessManager_ChooseEntries_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileSystemAccessManager_ChooseEntries_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FileSystemAccessManagerPtr.prototype.getFileHandleFromToken = function() {
    return FileSystemAccessManagerProxy.prototype.getFileHandleFromToken
        .apply(this.ptr.getProxy(), arguments);
  };

  FileSystemAccessManagerProxy.prototype.getFileHandleFromToken = function(token, fileHandle) {
    var params_ = new FileSystemAccessManager_GetFileHandleFromToken_Params();
    params_.token = token;
    params_.fileHandle = fileHandle;
    var builder = new codec.MessageV0Builder(
        kFileSystemAccessManager_GetFileHandleFromToken_Name,
        codec.align(FileSystemAccessManager_GetFileHandleFromToken_Params.encodedSize));
    builder.encodeStruct(FileSystemAccessManager_GetFileHandleFromToken_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FileSystemAccessManagerPtr.prototype.getDirectoryHandleFromToken = function() {
    return FileSystemAccessManagerProxy.prototype.getDirectoryHandleFromToken
        .apply(this.ptr.getProxy(), arguments);
  };

  FileSystemAccessManagerProxy.prototype.getDirectoryHandleFromToken = function(token, directoryHandle) {
    var params_ = new FileSystemAccessManager_GetDirectoryHandleFromToken_Params();
    params_.token = token;
    params_.directoryHandle = directoryHandle;
    var builder = new codec.MessageV0Builder(
        kFileSystemAccessManager_GetDirectoryHandleFromToken_Name,
        codec.align(FileSystemAccessManager_GetDirectoryHandleFromToken_Params.encodedSize));
    builder.encodeStruct(FileSystemAccessManager_GetDirectoryHandleFromToken_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FileSystemAccessManagerPtr.prototype.getEntryFromDragDropToken = function() {
    return FileSystemAccessManagerProxy.prototype.getEntryFromDragDropToken
        .apply(this.ptr.getProxy(), arguments);
  };

  FileSystemAccessManagerProxy.prototype.getEntryFromDragDropToken = function(token) {
    var params_ = new FileSystemAccessManager_GetEntryFromDragDropToken_Params();
    params_.token = token;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileSystemAccessManager_GetEntryFromDragDropToken_Name,
          codec.align(FileSystemAccessManager_GetEntryFromDragDropToken_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileSystemAccessManager_GetEntryFromDragDropToken_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FileSystemAccessManagerStub(delegate) {
    this.delegate_ = delegate;
  }
  FileSystemAccessManagerStub.prototype.getSandboxedFileSystem = function() {
    return this.delegate_ && this.delegate_.getSandboxedFileSystem && this.delegate_.getSandboxedFileSystem();
  }
  FileSystemAccessManagerStub.prototype.chooseEntries = function(type, accepts, wellKnownStartingDirectory, includeAcceptsAll) {
    return this.delegate_ && this.delegate_.chooseEntries && this.delegate_.chooseEntries(type, accepts, wellKnownStartingDirectory, includeAcceptsAll);
  }
  FileSystemAccessManagerStub.prototype.getFileHandleFromToken = function(token, fileHandle) {
    return this.delegate_ && this.delegate_.getFileHandleFromToken && this.delegate_.getFileHandleFromToken(token, fileHandle);
  }
  FileSystemAccessManagerStub.prototype.getDirectoryHandleFromToken = function(token, directoryHandle) {
    return this.delegate_ && this.delegate_.getDirectoryHandleFromToken && this.delegate_.getDirectoryHandleFromToken(token, directoryHandle);
  }
  FileSystemAccessManagerStub.prototype.getEntryFromDragDropToken = function(token) {
    return this.delegate_ && this.delegate_.getEntryFromDragDropToken && this.delegate_.getEntryFromDragDropToken(token);
  }

  FileSystemAccessManagerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFileSystemAccessManager_GetFileHandleFromToken_Name:
      var params = reader.decodeStruct(FileSystemAccessManager_GetFileHandleFromToken_Params);
      this.getFileHandleFromToken(params.token, params.fileHandle);
      return true;
    case kFileSystemAccessManager_GetDirectoryHandleFromToken_Name:
      var params = reader.decodeStruct(FileSystemAccessManager_GetDirectoryHandleFromToken_Params);
      this.getDirectoryHandleFromToken(params.token, params.directoryHandle);
      return true;
    default:
      return false;
    }
  };

  FileSystemAccessManagerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFileSystemAccessManager_GetSandboxedFileSystem_Name:
      var params = reader.decodeStruct(FileSystemAccessManager_GetSandboxedFileSystem_Params);
      this.getSandboxedFileSystem().then(function(response) {
        var responseParams =
            new FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams();
        responseParams.result = response.result;
        responseParams.directory = response.directory;
        var builder = new codec.MessageV1Builder(
            kFileSystemAccessManager_GetSandboxedFileSystem_Name,
            codec.align(FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFileSystemAccessManager_ChooseEntries_Name:
      var params = reader.decodeStruct(FileSystemAccessManager_ChooseEntries_Params);
      this.chooseEntries(params.type, params.accepts, params.wellKnownStartingDirectory, params.includeAcceptsAll).then(function(response) {
        var responseParams =
            new FileSystemAccessManager_ChooseEntries_ResponseParams();
        responseParams.result = response.result;
        responseParams.entries = response.entries;
        var builder = new codec.MessageV1Builder(
            kFileSystemAccessManager_ChooseEntries_Name,
            codec.align(FileSystemAccessManager_ChooseEntries_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileSystemAccessManager_ChooseEntries_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFileSystemAccessManager_GetEntryFromDragDropToken_Name:
      var params = reader.decodeStruct(FileSystemAccessManager_GetEntryFromDragDropToken_Params);
      this.getEntryFromDragDropToken(params.token).then(function(response) {
        var responseParams =
            new FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams();
        responseParams.entry = response.entry;
        var builder = new codec.MessageV1Builder(
            kFileSystemAccessManager_GetEntryFromDragDropToken_Name,
            codec.align(FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFileSystemAccessManagerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFileSystemAccessManager_GetSandboxedFileSystem_Name:
        if (message.expectsResponse())
          paramsClass = FileSystemAccessManager_GetSandboxedFileSystem_Params;
      break;
      case kFileSystemAccessManager_ChooseEntries_Name:
        if (message.expectsResponse())
          paramsClass = FileSystemAccessManager_ChooseEntries_Params;
      break;
      case kFileSystemAccessManager_GetFileHandleFromToken_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FileSystemAccessManager_GetFileHandleFromToken_Params;
      break;
      case kFileSystemAccessManager_GetDirectoryHandleFromToken_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FileSystemAccessManager_GetDirectoryHandleFromToken_Params;
      break;
      case kFileSystemAccessManager_GetEntryFromDragDropToken_Name:
        if (message.expectsResponse())
          paramsClass = FileSystemAccessManager_GetEntryFromDragDropToken_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFileSystemAccessManagerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFileSystemAccessManager_GetSandboxedFileSystem_Name:
        if (message.isResponse())
          paramsClass = FileSystemAccessManager_GetSandboxedFileSystem_ResponseParams;
        break;
      case kFileSystemAccessManager_ChooseEntries_Name:
        if (message.isResponse())
          paramsClass = FileSystemAccessManager_ChooseEntries_ResponseParams;
        break;
      case kFileSystemAccessManager_GetEntryFromDragDropToken_Name:
        if (message.isResponse())
          paramsClass = FileSystemAccessManager_GetEntryFromDragDropToken_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FileSystemAccessManager = {
    name: 'blink.mojom.FileSystemAccessManager',
    kVersion: 0,
    ptrClass: FileSystemAccessManagerPtr,
    proxyClass: FileSystemAccessManagerProxy,
    stubClass: FileSystemAccessManagerStub,
    validateRequest: validateFileSystemAccessManagerRequest,
    validateResponse: validateFileSystemAccessManagerResponse,
  };
  FileSystemAccessManagerStub.prototype.validator = validateFileSystemAccessManagerRequest;
  FileSystemAccessManagerProxy.prototype.validator = validateFileSystemAccessManagerResponse;
  exports.ChooseFileSystemEntryType = ChooseFileSystemEntryType;
  exports.WellKnownDirectory = WellKnownDirectory;
  exports.ChooseFileSystemEntryAcceptsOption = ChooseFileSystemEntryAcceptsOption;
  exports.FileSystemAccessManager = FileSystemAccessManager;
  exports.FileSystemAccessManagerPtr = FileSystemAccessManagerPtr;
  exports.FileSystemAccessManagerAssociatedPtr = FileSystemAccessManagerAssociatedPtr;
})();