// third_party/blink/public/mojom/storage_access/storage_access_automation.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/storage_access/storage_access_automation.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.test.mojom');



  function StorageAccessAutomation_SetStorageAccess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StorageAccessAutomation_SetStorageAccess_Params.prototype.initDefaults_ = function() {
    this.origin = null;
    this.embeddingOrigin = null;
    this.allowed = false;
  };
  StorageAccessAutomation_SetStorageAccess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StorageAccessAutomation_SetStorageAccess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StorageAccessAutomation_SetStorageAccess_Params.origin
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate StorageAccessAutomation_SetStorageAccess_Params.embeddingOrigin
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StorageAccessAutomation_SetStorageAccess_Params.encodedSize = codec.kStructHeaderSize + 24;

  StorageAccessAutomation_SetStorageAccess_Params.decode = function(decoder) {
    var packed;
    var val = new StorageAccessAutomation_SetStorageAccess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin =
        decoder.decodeStruct(codec.String);
    val.embeddingOrigin =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.allowed = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StorageAccessAutomation_SetStorageAccess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StorageAccessAutomation_SetStorageAccess_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.origin);
    encoder.encodeStruct(codec.String, val.embeddingOrigin);
    packed = 0;
    packed |= (val.allowed & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StorageAccessAutomation_SetStorageAccess_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StorageAccessAutomation_SetStorageAccess_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  StorageAccessAutomation_SetStorageAccess_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StorageAccessAutomation_SetStorageAccess_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StorageAccessAutomation_SetStorageAccess_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  StorageAccessAutomation_SetStorageAccess_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StorageAccessAutomation_SetStorageAccess_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StorageAccessAutomation_SetStorageAccess_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StorageAccessAutomation_SetStorageAccess_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kStorageAccessAutomation_SetStorageAccess_Name = 0;

  function StorageAccessAutomationPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StorageAccessAutomation,
                                                   handleOrPtrInfo);
  }

  function StorageAccessAutomationAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StorageAccessAutomation, associatedInterfacePtrInfo);
  }

  StorageAccessAutomationAssociatedPtr.prototype =
      Object.create(StorageAccessAutomationPtr.prototype);
  StorageAccessAutomationAssociatedPtr.prototype.constructor =
      StorageAccessAutomationAssociatedPtr;

  function StorageAccessAutomationProxy(receiver) {
    this.receiver_ = receiver;
  }
  StorageAccessAutomationPtr.prototype.setStorageAccess = function() {
    return StorageAccessAutomationProxy.prototype.setStorageAccess
        .apply(this.ptr.getProxy(), arguments);
  };

  StorageAccessAutomationProxy.prototype.setStorageAccess = function(origin, embeddingOrigin, allowed) {
    var params_ = new StorageAccessAutomation_SetStorageAccess_Params();
    params_.origin = origin;
    params_.embeddingOrigin = embeddingOrigin;
    params_.allowed = allowed;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStorageAccessAutomation_SetStorageAccess_Name,
          codec.align(StorageAccessAutomation_SetStorageAccess_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StorageAccessAutomation_SetStorageAccess_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StorageAccessAutomation_SetStorageAccess_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function StorageAccessAutomationStub(delegate) {
    this.delegate_ = delegate;
  }
  StorageAccessAutomationStub.prototype.setStorageAccess = function(origin, embeddingOrigin, allowed) {
    return this.delegate_ && this.delegate_.setStorageAccess && this.delegate_.setStorageAccess(origin, embeddingOrigin, allowed);
  }

  StorageAccessAutomationStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  StorageAccessAutomationStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStorageAccessAutomation_SetStorageAccess_Name:
      var params = reader.decodeStruct(StorageAccessAutomation_SetStorageAccess_Params);
      this.setStorageAccess(params.origin, params.embeddingOrigin, params.allowed).then(function(response) {
        var responseParams =
            new StorageAccessAutomation_SetStorageAccess_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kStorageAccessAutomation_SetStorageAccess_Name,
            codec.align(StorageAccessAutomation_SetStorageAccess_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StorageAccessAutomation_SetStorageAccess_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateStorageAccessAutomationRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kStorageAccessAutomation_SetStorageAccess_Name:
        if (message.expectsResponse())
          paramsClass = StorageAccessAutomation_SetStorageAccess_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateStorageAccessAutomationResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kStorageAccessAutomation_SetStorageAccess_Name:
        if (message.isResponse())
          paramsClass = StorageAccessAutomation_SetStorageAccess_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var StorageAccessAutomation = {
    name: 'blink.test.mojom.StorageAccessAutomation',
    kVersion: 0,
    ptrClass: StorageAccessAutomationPtr,
    proxyClass: StorageAccessAutomationProxy,
    stubClass: StorageAccessAutomationStub,
    validateRequest: validateStorageAccessAutomationRequest,
    validateResponse: validateStorageAccessAutomationResponse,
  };
  StorageAccessAutomationStub.prototype.validator = validateStorageAccessAutomationRequest;
  StorageAccessAutomationProxy.prototype.validator = validateStorageAccessAutomationResponse;
  exports.StorageAccessAutomation = StorageAccessAutomation;
  exports.StorageAccessAutomationPtr = StorageAccessAutomationPtr;
  exports.StorageAccessAutomationAssociatedPtr = StorageAccessAutomationAssociatedPtr;
})();