// third_party/blink/public/mojom/scroll/scroll_into_view_params.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/scroll/scroll_into_view_params.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var scroll_enums$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/scroll/scroll_enums.mojom', 'scroll_enums.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }



  function ScrollAlignment(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  ScrollAlignment.Behavior = {};
  ScrollAlignment.Behavior.kNoScroll = 0;
  ScrollAlignment.Behavior.kCenter = 1;
  ScrollAlignment.Behavior.kTop = 2;
  ScrollAlignment.Behavior.kBottom = 3;
  ScrollAlignment.Behavior.kLeft = 4;
  ScrollAlignment.Behavior.kRight = 5;
  ScrollAlignment.Behavior.kClosestEdge = 6;
  ScrollAlignment.Behavior.MIN_VALUE = 0,
  ScrollAlignment.Behavior.MAX_VALUE = 6,

  ScrollAlignment.Behavior.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  ScrollAlignment.Behavior.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  ScrollAlignment.prototype.initDefaults_ = function() {
    this.rectVisible = ScrollAlignment.Behavior.kNoScroll;
    this.rectHidden = ScrollAlignment.Behavior.kCenter;
    this.rectPartial = ScrollAlignment.Behavior.kClosestEdge;
  };
  ScrollAlignment.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScrollAlignment.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollAlignment.rectVisible
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ScrollAlignment.Behavior);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollAlignment.rectHidden
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, ScrollAlignment.Behavior);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollAlignment.rectPartial
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, ScrollAlignment.Behavior);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScrollAlignment.encodedSize = codec.kStructHeaderSize + 16;

  ScrollAlignment.decode = function(decoder) {
    var packed;
    var val = new ScrollAlignment();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rectVisible =
        decoder.decodeStruct(codec.Int32);
    val.rectHidden =
        decoder.decodeStruct(codec.Int32);
    val.rectPartial =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ScrollAlignment.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScrollAlignment.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.rectVisible);
    encoder.encodeStruct(codec.Int32, val.rectHidden);
    encoder.encodeStruct(codec.Int32, val.rectPartial);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ScrollIntoViewParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScrollIntoViewParams.prototype.initDefaults_ = function() {
    this.alignX = null;
    this.alignY = null;
    this.type = scroll_enums$.ScrollType.kProgrammatic;
    this.makeVisibleInVisualViewport = true;
    this.isForScrollSequence = false;
    this.zoomIntoRect = false;
    this.stopAtMainFrameLayoutViewport = false;
    this.behavior = scroll_enums$.ScrollBehavior.kAuto;
    this.relativeElementBounds = null;
    this.relativeCaretBounds = null;
  };
  ScrollIntoViewParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScrollIntoViewParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollIntoViewParams.alignX
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ScrollAlignment, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollIntoViewParams.alignY
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ScrollAlignment, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollIntoViewParams.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, scroll_enums$.ScrollType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ScrollIntoViewParams.behavior
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, scroll_enums$.ScrollBehavior);
    if (err !== validator.validationError.NONE)
        return err;




    // validate ScrollIntoViewParams.relativeElementBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScrollIntoViewParams.relativeCaretBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ScrollIntoViewParams.encodedSize = codec.kStructHeaderSize + 48;

  ScrollIntoViewParams.decode = function(decoder) {
    var packed;
    var val = new ScrollIntoViewParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.alignX =
        decoder.decodeStructPointer(ScrollAlignment);
    val.alignY =
        decoder.decodeStructPointer(ScrollAlignment);
    val.type =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.makeVisibleInVisualViewport = (packed >> 0) & 1 ? true : false;
    val.isForScrollSequence = (packed >> 1) & 1 ? true : false;
    val.zoomIntoRect = (packed >> 2) & 1 ? true : false;
    val.stopAtMainFrameLayoutViewport = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.behavior =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.relativeElementBounds =
        decoder.decodeStructPointer(geometry$.RectF);
    val.relativeCaretBounds =
        decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  ScrollIntoViewParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScrollIntoViewParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ScrollAlignment, val.alignX);
    encoder.encodeStructPointer(ScrollAlignment, val.alignY);
    encoder.encodeStruct(codec.Int32, val.type);
    packed = 0;
    packed |= (val.makeVisibleInVisualViewport & 1) << 0
    packed |= (val.isForScrollSequence & 1) << 1
    packed |= (val.zoomIntoRect & 1) << 2
    packed |= (val.stopAtMainFrameLayoutViewport & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.behavior);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.RectF, val.relativeElementBounds);
    encoder.encodeStructPointer(geometry$.RectF, val.relativeCaretBounds);
  };
  exports.ScrollAlignment = ScrollAlignment;
  exports.ScrollIntoViewParams = ScrollIntoViewParams;
})();