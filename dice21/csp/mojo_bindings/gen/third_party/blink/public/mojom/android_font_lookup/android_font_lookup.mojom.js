// third_party/blink/public/mojom/android_font_lookup/android_font_lookup.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/android_font_lookup/android_font_lookup.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }



  function AndroidFontLookup_GetUniqueNameLookupTable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AndroidFontLookup_GetUniqueNameLookupTable_Params.prototype.initDefaults_ = function() {
  };
  AndroidFontLookup_GetUniqueNameLookupTable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AndroidFontLookup_GetUniqueNameLookupTable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AndroidFontLookup_GetUniqueNameLookupTable_Params.encodedSize = codec.kStructHeaderSize + 0;

  AndroidFontLookup_GetUniqueNameLookupTable_Params.decode = function(decoder) {
    var packed;
    var val = new AndroidFontLookup_GetUniqueNameLookupTable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AndroidFontLookup_GetUniqueNameLookupTable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AndroidFontLookup_GetUniqueNameLookupTable_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.prototype.initDefaults_ = function() {
    this.uniqueFontNames = null;
  };
  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.uniqueFontNames
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.uniqueFontNames =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.uniqueFontNames);
  };
  function AndroidFontLookup_MatchLocalFontByUniqueName_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AndroidFontLookup_MatchLocalFontByUniqueName_Params.prototype.initDefaults_ = function() {
    this.fontUniqueName = null;
  };
  AndroidFontLookup_MatchLocalFontByUniqueName_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AndroidFontLookup_MatchLocalFontByUniqueName_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AndroidFontLookup_MatchLocalFontByUniqueName_Params.fontUniqueName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AndroidFontLookup_MatchLocalFontByUniqueName_Params.encodedSize = codec.kStructHeaderSize + 8;

  AndroidFontLookup_MatchLocalFontByUniqueName_Params.decode = function(decoder) {
    var packed;
    var val = new AndroidFontLookup_MatchLocalFontByUniqueName_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontUniqueName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AndroidFontLookup_MatchLocalFontByUniqueName_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AndroidFontLookup_MatchLocalFontByUniqueName_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.fontUniqueName);
  };
  function AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.prototype.initDefaults_ = function() {
    this.fontFileHandle = null;
  };
  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.fontFileHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_file$.ReadOnlyFile, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontFileHandle =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.fontFileHandle);
  };
  var kAndroidFontLookup_GetUniqueNameLookupTable_Name = 0;
  var kAndroidFontLookup_MatchLocalFontByUniqueName_Name = 1;

  function AndroidFontLookupPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AndroidFontLookup,
                                                   handleOrPtrInfo);
  }

  function AndroidFontLookupAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AndroidFontLookup, associatedInterfacePtrInfo);
  }

  AndroidFontLookupAssociatedPtr.prototype =
      Object.create(AndroidFontLookupPtr.prototype);
  AndroidFontLookupAssociatedPtr.prototype.constructor =
      AndroidFontLookupAssociatedPtr;

  function AndroidFontLookupProxy(receiver) {
    this.receiver_ = receiver;
  }
  AndroidFontLookupPtr.prototype.getUniqueNameLookupTable = function() {
    return AndroidFontLookupProxy.prototype.getUniqueNameLookupTable
        .apply(this.ptr.getProxy(), arguments);
  };

  AndroidFontLookupProxy.prototype.getUniqueNameLookupTable = function() {
    var params_ = new AndroidFontLookup_GetUniqueNameLookupTable_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAndroidFontLookup_GetUniqueNameLookupTable_Name,
          codec.align(AndroidFontLookup_GetUniqueNameLookupTable_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AndroidFontLookup_GetUniqueNameLookupTable_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  AndroidFontLookupPtr.prototype.matchLocalFontByUniqueName = function() {
    return AndroidFontLookupProxy.prototype.matchLocalFontByUniqueName
        .apply(this.ptr.getProxy(), arguments);
  };

  AndroidFontLookupProxy.prototype.matchLocalFontByUniqueName = function(fontUniqueName) {
    var params_ = new AndroidFontLookup_MatchLocalFontByUniqueName_Params();
    params_.fontUniqueName = fontUniqueName;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAndroidFontLookup_MatchLocalFontByUniqueName_Name,
          codec.align(AndroidFontLookup_MatchLocalFontByUniqueName_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AndroidFontLookup_MatchLocalFontByUniqueName_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function AndroidFontLookupStub(delegate) {
    this.delegate_ = delegate;
  }
  AndroidFontLookupStub.prototype.getUniqueNameLookupTable = function() {
    return this.delegate_ && this.delegate_.getUniqueNameLookupTable && this.delegate_.getUniqueNameLookupTable();
  }
  AndroidFontLookupStub.prototype.matchLocalFontByUniqueName = function(fontUniqueName) {
    return this.delegate_ && this.delegate_.matchLocalFontByUniqueName && this.delegate_.matchLocalFontByUniqueName(fontUniqueName);
  }

  AndroidFontLookupStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  AndroidFontLookupStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAndroidFontLookup_GetUniqueNameLookupTable_Name:
      var params = reader.decodeStruct(AndroidFontLookup_GetUniqueNameLookupTable_Params);
      this.getUniqueNameLookupTable().then(function(response) {
        var responseParams =
            new AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams();
        responseParams.uniqueFontNames = response.uniqueFontNames;
        var builder = new codec.MessageV1Builder(
            kAndroidFontLookup_GetUniqueNameLookupTable_Name,
            codec.align(AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kAndroidFontLookup_MatchLocalFontByUniqueName_Name:
      var params = reader.decodeStruct(AndroidFontLookup_MatchLocalFontByUniqueName_Params);
      this.matchLocalFontByUniqueName(params.fontUniqueName).then(function(response) {
        var responseParams =
            new AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams();
        responseParams.fontFileHandle = response.fontFileHandle;
        var builder = new codec.MessageV1Builder(
            kAndroidFontLookup_MatchLocalFontByUniqueName_Name,
            codec.align(AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateAndroidFontLookupRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAndroidFontLookup_GetUniqueNameLookupTable_Name:
        if (message.expectsResponse())
          paramsClass = AndroidFontLookup_GetUniqueNameLookupTable_Params;
      break;
      case kAndroidFontLookup_MatchLocalFontByUniqueName_Name:
        if (message.expectsResponse())
          paramsClass = AndroidFontLookup_MatchLocalFontByUniqueName_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAndroidFontLookupResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAndroidFontLookup_GetUniqueNameLookupTable_Name:
        if (message.isResponse())
          paramsClass = AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams;
        break;
      case kAndroidFontLookup_MatchLocalFontByUniqueName_Name:
        if (message.isResponse())
          paramsClass = AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var AndroidFontLookup = {
    name: 'blink.mojom.AndroidFontLookup',
    kVersion: 0,
    ptrClass: AndroidFontLookupPtr,
    proxyClass: AndroidFontLookupProxy,
    stubClass: AndroidFontLookupStub,
    validateRequest: validateAndroidFontLookupRequest,
    validateResponse: validateAndroidFontLookupResponse,
  };
  AndroidFontLookupStub.prototype.validator = validateAndroidFontLookupRequest;
  AndroidFontLookupProxy.prototype.validator = validateAndroidFontLookupResponse;
  exports.AndroidFontLookup = AndroidFontLookup;
  exports.AndroidFontLookupPtr = AndroidFontLookupPtr;
  exports.AndroidFontLookupAssociatedPtr = AndroidFontLookupAssociatedPtr;
})();