// third_party/blink/public/mojom/webpreferences/web_preferences.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/webpreferences/web_preferences.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var preferred_color_scheme$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/css/preferred_color_scheme.mojom', '../css/preferred_color_scheme.mojom.js');
  }
  var preferred_contrast$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/css/preferred_contrast.mojom', '../css/preferred_contrast.mojom.js');
  }
  var v8_cache_options$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/v8_cache_options.mojom', '../v8_cache_options.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }


  var PointerType = {};
  PointerType.kPointerNone = 1;
  PointerType.kPointerFirstType = 1;
  PointerType.kPointerCoarseType = 2;
  PointerType.kPointerFineType = 4;
  PointerType.MIN_VALUE = 1,
  PointerType.MAX_VALUE = 4,

  PointerType.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    }
    return false;
  };

  PointerType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var HoverType = {};
  HoverType.kHoverNone = 1;
  HoverType.kHoverFirstType = 1;
  HoverType.kHoverHoverType = 2;
  HoverType.MIN_VALUE = 1,
  HoverType.MAX_VALUE = 2,

  HoverType.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  HoverType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EditingBehavior = {};
  EditingBehavior.kEditingMacBehavior = 0;
  EditingBehavior.kEditingWindowsBehavior = 1;
  EditingBehavior.kEditingUnixBehavior = 2;
  EditingBehavior.kEditingAndroidBehavior = 3;
  EditingBehavior.kEditingChromeOSBehavior = 4;
  EditingBehavior.MIN_VALUE = 0,
  EditingBehavior.MAX_VALUE = 4,

  EditingBehavior.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  EditingBehavior.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ImageAnimationPolicy = {};
  ImageAnimationPolicy.kImageAnimationPolicyAllowed = 0;
  ImageAnimationPolicy.kImageAnimationPolicyAnimateOnce = 1;
  ImageAnimationPolicy.kImageAnimationPolicyNoAnimation = 2;
  ImageAnimationPolicy.MIN_VALUE = 0,
  ImageAnimationPolicy.MAX_VALUE = 2,

  ImageAnimationPolicy.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  ImageAnimationPolicy.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ViewportStyle = {};
  ViewportStyle.kDefault = 0;
  ViewportStyle.kMobile = 1;
  ViewportStyle.kTelevision = 2;
  ViewportStyle.kLast = 2;
  ViewportStyle.MIN_VALUE = 0,
  ViewportStyle.MAX_VALUE = 2,

  ViewportStyle.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  ViewportStyle.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var AutoplayPolicy = {};
  AutoplayPolicy.kNoUserGestureRequired = 0;
  AutoplayPolicy.kUserGestureRequired = 1;
  AutoplayPolicy.kDocumentUserActivationRequired = 2;
  AutoplayPolicy.MIN_VALUE = 0,
  AutoplayPolicy.MAX_VALUE = 2,

  AutoplayPolicy.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  AutoplayPolicy.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EffectiveConnectionType = {};
  EffectiveConnectionType.kEffectiveConnectionUnknownType = 0;
  EffectiveConnectionType.kEffectiveConnectionOfflineType = 1;
  EffectiveConnectionType.kEffectiveConnectionSlow2GType = 2;
  EffectiveConnectionType.kEffectiveConnection2GType = 3;
  EffectiveConnectionType.kEffectiveConnection3GType = 4;
  EffectiveConnectionType.kEffectiveConnection4GType = 5;
  EffectiveConnectionType.kEffectiveConnectionTypeLast = 6;
  EffectiveConnectionType.MIN_VALUE = 0,
  EffectiveConnectionType.MAX_VALUE = 6,

  EffectiveConnectionType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  EffectiveConnectionType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function WebPreferences(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebPreferences.prototype.initDefaults_ = function() {
    this.standardFontFamilyMap = null;
    this.fixedFontFamilyMap = null;
    this.serifFontFamilyMap = null;
    this.sansSerifFontFamilyMap = null;
    this.cursiveFontFamilyMap = null;
    this.fantasyFontFamilyMap = null;
    this.pictographFontFamilyMap = null;
    this.defaultFontSize = 0;
    this.defaultFixedFontSize = 0;
    this.minimumFontSize = 0;
    this.minimumLogicalFontSize = 0;
    this.defaultEncoding = null;
    this.contextMenuOnMouseUp = false;
    this.javascriptEnabled = false;
    this.webSecurityEnabled = false;
    this.loadsImagesAutomatically = false;
    this.imagesEnabled = false;
    this.pluginsEnabled = false;
    this.domPasteEnabled = false;
    this.shrinksStandaloneImagesToFit = false;
    this.textAreasAreResizable = false;
    this.allowScriptsToCloseWindows = false;
    this.remoteFontsEnabled = false;
    this.javascriptCanAccessClipboard = false;
    this.xsltEnabled = false;
    this.dnsPrefetchingEnabled = false;
    this.dataSaverEnabled = false;
    this.dataSaverHoldbackWebApiEnabled = false;
    this.localStorageEnabled = false;
    this.databasesEnabled = false;
    this.applicationCacheEnabled = false;
    this.tabsToLinks = false;
    this.disableIpcFloodingProtection = false;
    this.hyperlinkAuditingEnabled = false;
    this.allowUniversalAccessFromFileUrls = false;
    this.allowFileAccessFromFileUrls = false;
    this.webgl1Enabled = false;
    this.webgl2Enabled = false;
    this.pepper3dEnabled = false;
    this.flash3dEnabled = false;
    this.flashStage3dEnabled = false;
    this.flashStage3dBaselineEnabled = false;
    this.privilegedWebglExtensionsEnabled = false;
    this.webglErrorsToConsoleEnabled = false;
    this.hideScrollbars = false;
    this.accelerated2dCanvasEnabled = false;
    this.newCanvas2dApiEnabled = false;
    this.antialiased2dCanvasDisabled = false;
    this.antialiasedClips2dCanvasEnabled = false;
    this.acceleratedFiltersEnabled = false;
    this.deferredFiltersEnabled = false;
    this.containerCullingEnabled = false;
    this.allowRunningInsecureContent = false;
    this.disableReadingFromCanvas = false;
    this.strictMixedContentChecking = false;
    this.strictPowerfulFeatureRestrictions = false;
    this.allowGeolocationOnInsecureOrigins = false;
    this.strictlyBlockBlockableMixedContent = false;
    this.blockMixedPluginContent = false;
    this.passwordEchoEnabled = false;
    this.shouldClearDocumentBackground = false;
    this.enableScrollAnimator = false;
    this.threadedScrollingEnabled = false;
    this.prefersReducedMotion = false;
    this.touchEventFeatureDetectionEnabled = false;
    this.dontSendKeyEventsToJavascript = false;
    this.barrelButtonForDragEnabled = false;
    this.syncXhrInDocumentsEnabled = false;
    this.targetBlankImpliesNoOpenerEnabledWillBeRemoved = false;
    this.supportsMultipleWindows = false;
    this.viewportEnabled = false;
    this.viewportMetaEnabled = false;
    this.shrinksViewportContentsToFit = false;
    this.smoothScrollForFindEnabled = false;
    this.mainFrameResizesAreOrientationChanges = false;
    this.initializeAtMinimumPageScale = false;
    this.pointerEventsMaxTouchPoints = 0;
    this.availablePointerTypes = 0;
    this.primaryPointerType = 0;
    this.availableHoverTypes = 0;
    this.primaryHoverType = 0;
    this.numberOfCpuCores = 0;
    this.editingBehavior = 0;
    this.viewportStyle = 0;
    this.smartInsertDeleteEnabled = false;
    this.spatialNavigationEnabled = false;
    this.navigateOnDragDrop = false;
    this.recordWholeDocument = false;
    this.cookieEnabled = false;
    this.acceleratedVideoDecodeEnabled = false;
    this.userGestureRequiredForPresentation = false;
    this.textTracksEnabled = false;
    this.immersiveModeEnabled = false;
    this.doubleTapToZoomEnabled = false;
    this.fullscreenSupported = false;
    this.textAutosizingEnabled = false;
    this.forceDarkModeEnabled = false;
    this.hideDownloadUi = false;
    this.presentationReceiver = false;
    this.mediaControlsEnabled = false;
    this.doNotUpdateSelectionOnMutatingSelectionRange = false;
    this.pictureInPictureEnabled = false;
    this.translateServiceAvailable = false;
    this.lazyLoadEnabled = false;
    this.allowMixedContentUpgrades = false;
    this.alwaysShowFocus = false;
    this.touchDragDropEnabled = false;
    this.webxrImmersiveArAllowed = false;
    this.v8CacheOptions = 0;
    this.animationPolicy = 0;
    this.textTrackMarginPercentage = 0;
    this.textTrackBackgroundColor = null;
    this.textTrackTextColor = null;
    this.textTrackTextSize = null;
    this.textTrackTextShadow = null;
    this.textTrackFontFamily = null;
    this.textTrackFontStyle = null;
    this.textTrackFontVariant = null;
    this.textTrackWindowColor = null;
    this.textTrackWindowPadding = null;
    this.textTrackWindowRadius = null;
    this.webAppScope = null;
    this.defaultMinimumPageScaleFactor = 0;
    this.defaultMaximumPageScaleFactor = 0;
    this.autoplayPolicy = 0;
    this.preferredColorScheme = 0;
    this.preferredContrast = 0;
    this.lowPriorityIframesThreshold = 0;
    this.networkQualityEstimatorWebHoldback = 0;
    this.lazyFrameLoadingDistanceThresholdsPx = null;
    this.lazyImageLoadingDistanceThresholdsPx = null;
    this.lazyImageFirstKFullyLoad = null;
  };
  WebPreferences.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebPreferences.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 288}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.standardFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.fixedFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.serifFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.sansSerifFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 24, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.cursiveFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 32, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.fantasyFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.pictographFontFamilyMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 48, false, codec.String, new codec.PointerTo(string16$.String16), false);
    if (err !== validator.validationError.NONE)
        return err;






    // validate WebPreferences.defaultEncoding
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 72, false)
    if (err !== validator.validationError.NONE)
        return err;

























































    // validate WebPreferences.primaryPointerType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 96, PointerType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebPreferences.primaryHoverType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 104, HoverType);
    if (err !== validator.validationError.NONE)
        return err;







    // validate WebPreferences.editingBehavior
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 112, EditingBehavior);
    if (err !== validator.validationError.NONE)
        return err;






    // validate WebPreferences.viewportStyle
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 116, ViewportStyle);
    if (err !== validator.validationError.NONE)
        return err;








    // validate WebPreferences.v8CacheOptions
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 124, v8_cache_options$.V8CacheOptions);
    if (err !== validator.validationError.NONE)
        return err;





    // validate WebPreferences.animationPolicy
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 128, ImageAnimationPolicy);
    if (err !== validator.validationError.NONE)
        return err;




    // validate WebPreferences.textTrackBackgroundColor
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 136, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackTextColor
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 144, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackTextSize
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 152, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackTextShadow
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 160, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackFontFamily
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 168, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackFontStyle
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 176, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackFontVariant
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 184, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackWindowColor
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 192, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackWindowPadding
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 200, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.textTrackWindowRadius
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 208, false)
    if (err !== validator.validationError.NONE)
        return err;







    // validate WebPreferences.webAppScope
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 216, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;









    // validate WebPreferences.autoplayPolicy
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 232, AutoplayPolicy);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.preferredColorScheme
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 236, preferred_color_scheme$.PreferredColorScheme);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.preferredContrast
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 240, preferred_contrast$.PreferredContrast);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.lowPriorityIframesThreshold
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 244, EffectiveConnectionType);
    if (err !== validator.validationError.NONE)
        return err;




    // validate WebPreferences.networkQualityEstimatorWebHoldback
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 248, EffectiveConnectionType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WebPreferences.lazyFrameLoadingDistanceThresholdsPx
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 256, false, new codec.Enum(EffectiveConnectionType), codec.Int32, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.lazyImageLoadingDistanceThresholdsPx
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 264, false, new codec.Enum(EffectiveConnectionType), codec.Int32, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPreferences.lazyImageFirstKFullyLoad
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 272, false, new codec.Enum(EffectiveConnectionType), codec.Int32, false);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  WebPreferences.encodedSize = codec.kStructHeaderSize + 280;

  WebPreferences.decode = function(decoder) {
    var packed;
    var val = new WebPreferences();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.standardFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.fixedFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.serifFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.sansSerifFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.cursiveFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.fantasyFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.pictographFontFamilyMap =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(string16$.String16));
    val.defaultFontSize =
        decoder.decodeStruct(codec.Int32);
    val.defaultFixedFontSize =
        decoder.decodeStruct(codec.Int32);
    val.minimumFontSize =
        decoder.decodeStruct(codec.Int32);
    val.minimumLogicalFontSize =
        decoder.decodeStruct(codec.Int32);
    val.defaultEncoding =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.contextMenuOnMouseUp = (packed >> 0) & 1 ? true : false;
    val.javascriptEnabled = (packed >> 1) & 1 ? true : false;
    val.webSecurityEnabled = (packed >> 2) & 1 ? true : false;
    val.loadsImagesAutomatically = (packed >> 3) & 1 ? true : false;
    val.imagesEnabled = (packed >> 4) & 1 ? true : false;
    val.pluginsEnabled = (packed >> 5) & 1 ? true : false;
    val.domPasteEnabled = (packed >> 6) & 1 ? true : false;
    val.shrinksStandaloneImagesToFit = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.textAreasAreResizable = (packed >> 0) & 1 ? true : false;
    val.allowScriptsToCloseWindows = (packed >> 1) & 1 ? true : false;
    val.remoteFontsEnabled = (packed >> 2) & 1 ? true : false;
    val.javascriptCanAccessClipboard = (packed >> 3) & 1 ? true : false;
    val.xsltEnabled = (packed >> 4) & 1 ? true : false;
    val.dnsPrefetchingEnabled = (packed >> 5) & 1 ? true : false;
    val.dataSaverEnabled = (packed >> 6) & 1 ? true : false;
    val.dataSaverHoldbackWebApiEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.localStorageEnabled = (packed >> 0) & 1 ? true : false;
    val.databasesEnabled = (packed >> 1) & 1 ? true : false;
    val.applicationCacheEnabled = (packed >> 2) & 1 ? true : false;
    val.tabsToLinks = (packed >> 3) & 1 ? true : false;
    val.disableIpcFloodingProtection = (packed >> 4) & 1 ? true : false;
    val.hyperlinkAuditingEnabled = (packed >> 5) & 1 ? true : false;
    val.allowUniversalAccessFromFileUrls = (packed >> 6) & 1 ? true : false;
    val.allowFileAccessFromFileUrls = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.webgl1Enabled = (packed >> 0) & 1 ? true : false;
    val.webgl2Enabled = (packed >> 1) & 1 ? true : false;
    val.pepper3dEnabled = (packed >> 2) & 1 ? true : false;
    val.flash3dEnabled = (packed >> 3) & 1 ? true : false;
    val.flashStage3dEnabled = (packed >> 4) & 1 ? true : false;
    val.flashStage3dBaselineEnabled = (packed >> 5) & 1 ? true : false;
    val.privilegedWebglExtensionsEnabled = (packed >> 6) & 1 ? true : false;
    val.webglErrorsToConsoleEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.hideScrollbars = (packed >> 0) & 1 ? true : false;
    val.accelerated2dCanvasEnabled = (packed >> 1) & 1 ? true : false;
    val.newCanvas2dApiEnabled = (packed >> 2) & 1 ? true : false;
    val.antialiased2dCanvasDisabled = (packed >> 3) & 1 ? true : false;
    val.antialiasedClips2dCanvasEnabled = (packed >> 4) & 1 ? true : false;
    val.acceleratedFiltersEnabled = (packed >> 5) & 1 ? true : false;
    val.deferredFiltersEnabled = (packed >> 6) & 1 ? true : false;
    val.containerCullingEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.allowRunningInsecureContent = (packed >> 0) & 1 ? true : false;
    val.disableReadingFromCanvas = (packed >> 1) & 1 ? true : false;
    val.strictMixedContentChecking = (packed >> 2) & 1 ? true : false;
    val.strictPowerfulFeatureRestrictions = (packed >> 3) & 1 ? true : false;
    val.allowGeolocationOnInsecureOrigins = (packed >> 4) & 1 ? true : false;
    val.strictlyBlockBlockableMixedContent = (packed >> 5) & 1 ? true : false;
    val.blockMixedPluginContent = (packed >> 6) & 1 ? true : false;
    val.passwordEchoEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.shouldClearDocumentBackground = (packed >> 0) & 1 ? true : false;
    val.enableScrollAnimator = (packed >> 1) & 1 ? true : false;
    val.threadedScrollingEnabled = (packed >> 2) & 1 ? true : false;
    val.prefersReducedMotion = (packed >> 3) & 1 ? true : false;
    val.touchEventFeatureDetectionEnabled = (packed >> 4) & 1 ? true : false;
    val.dontSendKeyEventsToJavascript = (packed >> 5) & 1 ? true : false;
    val.barrelButtonForDragEnabled = (packed >> 6) & 1 ? true : false;
    val.syncXhrInDocumentsEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.targetBlankImpliesNoOpenerEnabledWillBeRemoved = (packed >> 0) & 1 ? true : false;
    val.supportsMultipleWindows = (packed >> 1) & 1 ? true : false;
    val.viewportEnabled = (packed >> 2) & 1 ? true : false;
    val.viewportMetaEnabled = (packed >> 3) & 1 ? true : false;
    val.shrinksViewportContentsToFit = (packed >> 4) & 1 ? true : false;
    val.smoothScrollForFindEnabled = (packed >> 5) & 1 ? true : false;
    val.mainFrameResizesAreOrientationChanges = (packed >> 6) & 1 ? true : false;
    val.initializeAtMinimumPageScale = (packed >> 7) & 1 ? true : false;
    val.pointerEventsMaxTouchPoints =
        decoder.decodeStruct(codec.Int32);
    val.availablePointerTypes =
        decoder.decodeStruct(codec.Int32);
    val.primaryPointerType =
        decoder.decodeStruct(codec.Int32);
    val.availableHoverTypes =
        decoder.decodeStruct(codec.Int32);
    val.primaryHoverType =
        decoder.decodeStruct(codec.Int32);
    val.numberOfCpuCores =
        decoder.decodeStruct(codec.Int32);
    val.editingBehavior =
        decoder.decodeStruct(codec.Int32);
    val.viewportStyle =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.smartInsertDeleteEnabled = (packed >> 0) & 1 ? true : false;
    val.spatialNavigationEnabled = (packed >> 1) & 1 ? true : false;
    val.navigateOnDragDrop = (packed >> 2) & 1 ? true : false;
    val.recordWholeDocument = (packed >> 3) & 1 ? true : false;
    val.cookieEnabled = (packed >> 4) & 1 ? true : false;
    val.acceleratedVideoDecodeEnabled = (packed >> 5) & 1 ? true : false;
    val.userGestureRequiredForPresentation = (packed >> 6) & 1 ? true : false;
    val.textTracksEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.immersiveModeEnabled = (packed >> 0) & 1 ? true : false;
    val.doubleTapToZoomEnabled = (packed >> 1) & 1 ? true : false;
    val.fullscreenSupported = (packed >> 2) & 1 ? true : false;
    val.textAutosizingEnabled = (packed >> 3) & 1 ? true : false;
    val.forceDarkModeEnabled = (packed >> 4) & 1 ? true : false;
    val.hideDownloadUi = (packed >> 5) & 1 ? true : false;
    val.presentationReceiver = (packed >> 6) & 1 ? true : false;
    val.mediaControlsEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.doNotUpdateSelectionOnMutatingSelectionRange = (packed >> 0) & 1 ? true : false;
    val.pictureInPictureEnabled = (packed >> 1) & 1 ? true : false;
    val.translateServiceAvailable = (packed >> 2) & 1 ? true : false;
    val.lazyLoadEnabled = (packed >> 3) & 1 ? true : false;
    val.allowMixedContentUpgrades = (packed >> 4) & 1 ? true : false;
    val.alwaysShowFocus = (packed >> 5) & 1 ? true : false;
    val.touchDragDropEnabled = (packed >> 6) & 1 ? true : false;
    val.webxrImmersiveArAllowed = (packed >> 7) & 1 ? true : false;
    decoder.skip(1);
    val.v8CacheOptions =
        decoder.decodeStruct(codec.Int32);
    val.animationPolicy =
        decoder.decodeStruct(codec.Int32);
    val.textTrackMarginPercentage =
        decoder.decodeStruct(codec.Float);
    val.textTrackBackgroundColor =
        decoder.decodeStruct(codec.String);
    val.textTrackTextColor =
        decoder.decodeStruct(codec.String);
    val.textTrackTextSize =
        decoder.decodeStruct(codec.String);
    val.textTrackTextShadow =
        decoder.decodeStruct(codec.String);
    val.textTrackFontFamily =
        decoder.decodeStruct(codec.String);
    val.textTrackFontStyle =
        decoder.decodeStruct(codec.String);
    val.textTrackFontVariant =
        decoder.decodeStruct(codec.String);
    val.textTrackWindowColor =
        decoder.decodeStruct(codec.String);
    val.textTrackWindowPadding =
        decoder.decodeStruct(codec.String);
    val.textTrackWindowRadius =
        decoder.decodeStruct(codec.String);
    val.webAppScope =
        decoder.decodeStructPointer(url$.Url);
    val.defaultMinimumPageScaleFactor =
        decoder.decodeStruct(codec.Float);
    val.defaultMaximumPageScaleFactor =
        decoder.decodeStruct(codec.Float);
    val.autoplayPolicy =
        decoder.decodeStruct(codec.Int32);
    val.preferredColorScheme =
        decoder.decodeStruct(codec.Int32);
    val.preferredContrast =
        decoder.decodeStruct(codec.Int32);
    val.lowPriorityIframesThreshold =
        decoder.decodeStruct(codec.Int32);
    val.networkQualityEstimatorWebHoldback =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.lazyFrameLoadingDistanceThresholdsPx =
        decoder.decodeMapPointer(new codec.Enum(EffectiveConnectionType), codec.Int32);
    val.lazyImageLoadingDistanceThresholdsPx =
        decoder.decodeMapPointer(new codec.Enum(EffectiveConnectionType), codec.Int32);
    val.lazyImageFirstKFullyLoad =
        decoder.decodeMapPointer(new codec.Enum(EffectiveConnectionType), codec.Int32);
    return val;
  };

  WebPreferences.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebPreferences.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.standardFontFamilyMap);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.fixedFontFamilyMap);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.serifFontFamilyMap);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.sansSerifFontFamilyMap);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.cursiveFontFamilyMap);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.fantasyFontFamilyMap);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(string16$.String16), val.pictographFontFamilyMap);
    encoder.encodeStruct(codec.Int32, val.defaultFontSize);
    encoder.encodeStruct(codec.Int32, val.defaultFixedFontSize);
    encoder.encodeStruct(codec.Int32, val.minimumFontSize);
    encoder.encodeStruct(codec.Int32, val.minimumLogicalFontSize);
    encoder.encodeStruct(codec.String, val.defaultEncoding);
    packed = 0;
    packed |= (val.contextMenuOnMouseUp & 1) << 0
    packed |= (val.javascriptEnabled & 1) << 1
    packed |= (val.webSecurityEnabled & 1) << 2
    packed |= (val.loadsImagesAutomatically & 1) << 3
    packed |= (val.imagesEnabled & 1) << 4
    packed |= (val.pluginsEnabled & 1) << 5
    packed |= (val.domPasteEnabled & 1) << 6
    packed |= (val.shrinksStandaloneImagesToFit & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.textAreasAreResizable & 1) << 0
    packed |= (val.allowScriptsToCloseWindows & 1) << 1
    packed |= (val.remoteFontsEnabled & 1) << 2
    packed |= (val.javascriptCanAccessClipboard & 1) << 3
    packed |= (val.xsltEnabled & 1) << 4
    packed |= (val.dnsPrefetchingEnabled & 1) << 5
    packed |= (val.dataSaverEnabled & 1) << 6
    packed |= (val.dataSaverHoldbackWebApiEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.localStorageEnabled & 1) << 0
    packed |= (val.databasesEnabled & 1) << 1
    packed |= (val.applicationCacheEnabled & 1) << 2
    packed |= (val.tabsToLinks & 1) << 3
    packed |= (val.disableIpcFloodingProtection & 1) << 4
    packed |= (val.hyperlinkAuditingEnabled & 1) << 5
    packed |= (val.allowUniversalAccessFromFileUrls & 1) << 6
    packed |= (val.allowFileAccessFromFileUrls & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.webgl1Enabled & 1) << 0
    packed |= (val.webgl2Enabled & 1) << 1
    packed |= (val.pepper3dEnabled & 1) << 2
    packed |= (val.flash3dEnabled & 1) << 3
    packed |= (val.flashStage3dEnabled & 1) << 4
    packed |= (val.flashStage3dBaselineEnabled & 1) << 5
    packed |= (val.privilegedWebglExtensionsEnabled & 1) << 6
    packed |= (val.webglErrorsToConsoleEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.hideScrollbars & 1) << 0
    packed |= (val.accelerated2dCanvasEnabled & 1) << 1
    packed |= (val.newCanvas2dApiEnabled & 1) << 2
    packed |= (val.antialiased2dCanvasDisabled & 1) << 3
    packed |= (val.antialiasedClips2dCanvasEnabled & 1) << 4
    packed |= (val.acceleratedFiltersEnabled & 1) << 5
    packed |= (val.deferredFiltersEnabled & 1) << 6
    packed |= (val.containerCullingEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.allowRunningInsecureContent & 1) << 0
    packed |= (val.disableReadingFromCanvas & 1) << 1
    packed |= (val.strictMixedContentChecking & 1) << 2
    packed |= (val.strictPowerfulFeatureRestrictions & 1) << 3
    packed |= (val.allowGeolocationOnInsecureOrigins & 1) << 4
    packed |= (val.strictlyBlockBlockableMixedContent & 1) << 5
    packed |= (val.blockMixedPluginContent & 1) << 6
    packed |= (val.passwordEchoEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.shouldClearDocumentBackground & 1) << 0
    packed |= (val.enableScrollAnimator & 1) << 1
    packed |= (val.threadedScrollingEnabled & 1) << 2
    packed |= (val.prefersReducedMotion & 1) << 3
    packed |= (val.touchEventFeatureDetectionEnabled & 1) << 4
    packed |= (val.dontSendKeyEventsToJavascript & 1) << 5
    packed |= (val.barrelButtonForDragEnabled & 1) << 6
    packed |= (val.syncXhrInDocumentsEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.targetBlankImpliesNoOpenerEnabledWillBeRemoved & 1) << 0
    packed |= (val.supportsMultipleWindows & 1) << 1
    packed |= (val.viewportEnabled & 1) << 2
    packed |= (val.viewportMetaEnabled & 1) << 3
    packed |= (val.shrinksViewportContentsToFit & 1) << 4
    packed |= (val.smoothScrollForFindEnabled & 1) << 5
    packed |= (val.mainFrameResizesAreOrientationChanges & 1) << 6
    packed |= (val.initializeAtMinimumPageScale & 1) << 7
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int32, val.pointerEventsMaxTouchPoints);
    encoder.encodeStruct(codec.Int32, val.availablePointerTypes);
    encoder.encodeStruct(codec.Int32, val.primaryPointerType);
    encoder.encodeStruct(codec.Int32, val.availableHoverTypes);
    encoder.encodeStruct(codec.Int32, val.primaryHoverType);
    encoder.encodeStruct(codec.Int32, val.numberOfCpuCores);
    encoder.encodeStruct(codec.Int32, val.editingBehavior);
    encoder.encodeStruct(codec.Int32, val.viewportStyle);
    packed = 0;
    packed |= (val.smartInsertDeleteEnabled & 1) << 0
    packed |= (val.spatialNavigationEnabled & 1) << 1
    packed |= (val.navigateOnDragDrop & 1) << 2
    packed |= (val.recordWholeDocument & 1) << 3
    packed |= (val.cookieEnabled & 1) << 4
    packed |= (val.acceleratedVideoDecodeEnabled & 1) << 5
    packed |= (val.userGestureRequiredForPresentation & 1) << 6
    packed |= (val.textTracksEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.immersiveModeEnabled & 1) << 0
    packed |= (val.doubleTapToZoomEnabled & 1) << 1
    packed |= (val.fullscreenSupported & 1) << 2
    packed |= (val.textAutosizingEnabled & 1) << 3
    packed |= (val.forceDarkModeEnabled & 1) << 4
    packed |= (val.hideDownloadUi & 1) << 5
    packed |= (val.presentationReceiver & 1) << 6
    packed |= (val.mediaControlsEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.doNotUpdateSelectionOnMutatingSelectionRange & 1) << 0
    packed |= (val.pictureInPictureEnabled & 1) << 1
    packed |= (val.translateServiceAvailable & 1) << 2
    packed |= (val.lazyLoadEnabled & 1) << 3
    packed |= (val.allowMixedContentUpgrades & 1) << 4
    packed |= (val.alwaysShowFocus & 1) << 5
    packed |= (val.touchDragDropEnabled & 1) << 6
    packed |= (val.webxrImmersiveArAllowed & 1) << 7
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.v8CacheOptions);
    encoder.encodeStruct(codec.Int32, val.animationPolicy);
    encoder.encodeStruct(codec.Float, val.textTrackMarginPercentage);
    encoder.encodeStruct(codec.String, val.textTrackBackgroundColor);
    encoder.encodeStruct(codec.String, val.textTrackTextColor);
    encoder.encodeStruct(codec.String, val.textTrackTextSize);
    encoder.encodeStruct(codec.String, val.textTrackTextShadow);
    encoder.encodeStruct(codec.String, val.textTrackFontFamily);
    encoder.encodeStruct(codec.String, val.textTrackFontStyle);
    encoder.encodeStruct(codec.String, val.textTrackFontVariant);
    encoder.encodeStruct(codec.String, val.textTrackWindowColor);
    encoder.encodeStruct(codec.String, val.textTrackWindowPadding);
    encoder.encodeStruct(codec.String, val.textTrackWindowRadius);
    encoder.encodeStructPointer(url$.Url, val.webAppScope);
    encoder.encodeStruct(codec.Float, val.defaultMinimumPageScaleFactor);
    encoder.encodeStruct(codec.Float, val.defaultMaximumPageScaleFactor);
    encoder.encodeStruct(codec.Int32, val.autoplayPolicy);
    encoder.encodeStruct(codec.Int32, val.preferredColorScheme);
    encoder.encodeStruct(codec.Int32, val.preferredContrast);
    encoder.encodeStruct(codec.Int32, val.lowPriorityIframesThreshold);
    encoder.encodeStruct(codec.Int32, val.networkQualityEstimatorWebHoldback);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(new codec.Enum(EffectiveConnectionType), codec.Int32, val.lazyFrameLoadingDistanceThresholdsPx);
    encoder.encodeMapPointer(new codec.Enum(EffectiveConnectionType), codec.Int32, val.lazyImageLoadingDistanceThresholdsPx);
    encoder.encodeMapPointer(new codec.Enum(EffectiveConnectionType), codec.Int32, val.lazyImageFirstKFullyLoad);
  };
  exports.PointerType = PointerType;
  exports.HoverType = HoverType;
  exports.EditingBehavior = EditingBehavior;
  exports.ImageAnimationPolicy = ImageAnimationPolicy;
  exports.ViewportStyle = ViewportStyle;
  exports.AutoplayPolicy = AutoplayPolicy;
  exports.EffectiveConnectionType = EffectiveConnectionType;
  exports.WebPreferences = WebPreferences;
})();