// third_party/blink/public/mojom/clipboard/raw_clipboard.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/clipboard/raw_clipboard.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var big_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/big_buffer.mojom', '../../../../../mojo/public/mojom/base/big_buffer.mojom.js');
  }



  function RawClipboardHost_ReadAvailableFormatNames_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RawClipboardHost_ReadAvailableFormatNames_Params.prototype.initDefaults_ = function() {
  };
  RawClipboardHost_ReadAvailableFormatNames_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RawClipboardHost_ReadAvailableFormatNames_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RawClipboardHost_ReadAvailableFormatNames_Params.encodedSize = codec.kStructHeaderSize + 0;

  RawClipboardHost_ReadAvailableFormatNames_Params.decode = function(decoder) {
    var packed;
    var val = new RawClipboardHost_ReadAvailableFormatNames_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RawClipboardHost_ReadAvailableFormatNames_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RawClipboardHost_ReadAvailableFormatNames_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RawClipboardHost_ReadAvailableFormatNames_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RawClipboardHost_ReadAvailableFormatNames_ResponseParams.prototype.initDefaults_ = function() {
    this.rawTypes = null;
  };
  RawClipboardHost_ReadAvailableFormatNames_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RawClipboardHost_ReadAvailableFormatNames_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RawClipboardHost_ReadAvailableFormatNames_ResponseParams.rawTypes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(string16$.String16), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RawClipboardHost_ReadAvailableFormatNames_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RawClipboardHost_ReadAvailableFormatNames_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RawClipboardHost_ReadAvailableFormatNames_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rawTypes =
        decoder.decodeArrayPointer(new codec.PointerTo(string16$.String16));
    return val;
  };

  RawClipboardHost_ReadAvailableFormatNames_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RawClipboardHost_ReadAvailableFormatNames_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(string16$.String16), val.rawTypes);
  };
  function RawClipboardHost_Read_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RawClipboardHost_Read_Params.prototype.initDefaults_ = function() {
    this.format = null;
  };
  RawClipboardHost_Read_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RawClipboardHost_Read_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RawClipboardHost_Read_Params.format
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RawClipboardHost_Read_Params.encodedSize = codec.kStructHeaderSize + 8;

  RawClipboardHost_Read_Params.decode = function(decoder) {
    var packed;
    var val = new RawClipboardHost_Read_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.format =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  RawClipboardHost_Read_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RawClipboardHost_Read_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.format);
  };
  function RawClipboardHost_Read_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RawClipboardHost_Read_ResponseParams.prototype.initDefaults_ = function() {
    this.data = null;
  };
  RawClipboardHost_Read_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RawClipboardHost_Read_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RawClipboardHost_Read_ResponseParams.data
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, big_buffer$.BigBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RawClipboardHost_Read_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  RawClipboardHost_Read_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RawClipboardHost_Read_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(big_buffer$.BigBuffer);
    return val;
  };

  RawClipboardHost_Read_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RawClipboardHost_Read_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(big_buffer$.BigBuffer, val.data);
  };
  function RawClipboardHost_Write_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RawClipboardHost_Write_Params.prototype.initDefaults_ = function() {
    this.format = null;
    this.data = null;
  };
  RawClipboardHost_Write_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RawClipboardHost_Write_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RawClipboardHost_Write_Params.format
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RawClipboardHost_Write_Params.data
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, big_buffer$.BigBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RawClipboardHost_Write_Params.encodedSize = codec.kStructHeaderSize + 24;

  RawClipboardHost_Write_Params.decode = function(decoder) {
    var packed;
    var val = new RawClipboardHost_Write_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.format =
        decoder.decodeStructPointer(string16$.String16);
    val.data =
        decoder.decodeStruct(big_buffer$.BigBuffer);
    return val;
  };

  RawClipboardHost_Write_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RawClipboardHost_Write_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.format);
    encoder.encodeStruct(big_buffer$.BigBuffer, val.data);
  };
  function RawClipboardHost_CommitWrite_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RawClipboardHost_CommitWrite_Params.prototype.initDefaults_ = function() {
  };
  RawClipboardHost_CommitWrite_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RawClipboardHost_CommitWrite_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RawClipboardHost_CommitWrite_Params.encodedSize = codec.kStructHeaderSize + 0;

  RawClipboardHost_CommitWrite_Params.decode = function(decoder) {
    var packed;
    var val = new RawClipboardHost_CommitWrite_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RawClipboardHost_CommitWrite_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RawClipboardHost_CommitWrite_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kRawClipboardHost_ReadAvailableFormatNames_Name = 0;
  var kRawClipboardHost_Read_Name = 1;
  var kRawClipboardHost_Write_Name = 2;
  var kRawClipboardHost_CommitWrite_Name = 3;

  function RawClipboardHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RawClipboardHost,
                                                   handleOrPtrInfo);
  }

  function RawClipboardHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RawClipboardHost, associatedInterfacePtrInfo);
  }

  RawClipboardHostAssociatedPtr.prototype =
      Object.create(RawClipboardHostPtr.prototype);
  RawClipboardHostAssociatedPtr.prototype.constructor =
      RawClipboardHostAssociatedPtr;

  function RawClipboardHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  RawClipboardHostPtr.prototype.readAvailableFormatNames = function() {
    return RawClipboardHostProxy.prototype.readAvailableFormatNames
        .apply(this.ptr.getProxy(), arguments);
  };

  RawClipboardHostProxy.prototype.readAvailableFormatNames = function() {
    var params_ = new RawClipboardHost_ReadAvailableFormatNames_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRawClipboardHost_ReadAvailableFormatNames_Name,
          codec.align(RawClipboardHost_ReadAvailableFormatNames_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RawClipboardHost_ReadAvailableFormatNames_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RawClipboardHost_ReadAvailableFormatNames_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  RawClipboardHostPtr.prototype.read = function() {
    return RawClipboardHostProxy.prototype.read
        .apply(this.ptr.getProxy(), arguments);
  };

  RawClipboardHostProxy.prototype.read = function(format) {
    var params_ = new RawClipboardHost_Read_Params();
    params_.format = format;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRawClipboardHost_Read_Name,
          codec.align(RawClipboardHost_Read_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RawClipboardHost_Read_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RawClipboardHost_Read_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  RawClipboardHostPtr.prototype.write = function() {
    return RawClipboardHostProxy.prototype.write
        .apply(this.ptr.getProxy(), arguments);
  };

  RawClipboardHostProxy.prototype.write = function(format, data) {
    var params_ = new RawClipboardHost_Write_Params();
    params_.format = format;
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kRawClipboardHost_Write_Name,
        codec.align(RawClipboardHost_Write_Params.encodedSize));
    builder.encodeStruct(RawClipboardHost_Write_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RawClipboardHostPtr.prototype.commitWrite = function() {
    return RawClipboardHostProxy.prototype.commitWrite
        .apply(this.ptr.getProxy(), arguments);
  };

  RawClipboardHostProxy.prototype.commitWrite = function() {
    var params_ = new RawClipboardHost_CommitWrite_Params();
    var builder = new codec.MessageV0Builder(
        kRawClipboardHost_CommitWrite_Name,
        codec.align(RawClipboardHost_CommitWrite_Params.encodedSize));
    builder.encodeStruct(RawClipboardHost_CommitWrite_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function RawClipboardHostStub(delegate) {
    this.delegate_ = delegate;
  }
  RawClipboardHostStub.prototype.readAvailableFormatNames = function() {
    return this.delegate_ && this.delegate_.readAvailableFormatNames && this.delegate_.readAvailableFormatNames();
  }
  RawClipboardHostStub.prototype.read = function(format) {
    return this.delegate_ && this.delegate_.read && this.delegate_.read(format);
  }
  RawClipboardHostStub.prototype.write = function(format, data) {
    return this.delegate_ && this.delegate_.write && this.delegate_.write(format, data);
  }
  RawClipboardHostStub.prototype.commitWrite = function() {
    return this.delegate_ && this.delegate_.commitWrite && this.delegate_.commitWrite();
  }

  RawClipboardHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRawClipboardHost_Write_Name:
      var params = reader.decodeStruct(RawClipboardHost_Write_Params);
      this.write(params.format, params.data);
      return true;
    case kRawClipboardHost_CommitWrite_Name:
      var params = reader.decodeStruct(RawClipboardHost_CommitWrite_Params);
      this.commitWrite();
      return true;
    default:
      return false;
    }
  };

  RawClipboardHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRawClipboardHost_ReadAvailableFormatNames_Name:
      var params = reader.decodeStruct(RawClipboardHost_ReadAvailableFormatNames_Params);
      this.readAvailableFormatNames().then(function(response) {
        var responseParams =
            new RawClipboardHost_ReadAvailableFormatNames_ResponseParams();
        responseParams.rawTypes = response.rawTypes;
        var builder = new codec.MessageV1Builder(
            kRawClipboardHost_ReadAvailableFormatNames_Name,
            codec.align(RawClipboardHost_ReadAvailableFormatNames_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RawClipboardHost_ReadAvailableFormatNames_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kRawClipboardHost_Read_Name:
      var params = reader.decodeStruct(RawClipboardHost_Read_Params);
      this.read(params.format).then(function(response) {
        var responseParams =
            new RawClipboardHost_Read_ResponseParams();
        responseParams.data = response.data;
        var builder = new codec.MessageV1Builder(
            kRawClipboardHost_Read_Name,
            codec.align(RawClipboardHost_Read_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RawClipboardHost_Read_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRawClipboardHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRawClipboardHost_ReadAvailableFormatNames_Name:
        if (message.expectsResponse())
          paramsClass = RawClipboardHost_ReadAvailableFormatNames_Params;
      break;
      case kRawClipboardHost_Read_Name:
        if (message.expectsResponse())
          paramsClass = RawClipboardHost_Read_Params;
      break;
      case kRawClipboardHost_Write_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = RawClipboardHost_Write_Params;
      break;
      case kRawClipboardHost_CommitWrite_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = RawClipboardHost_CommitWrite_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRawClipboardHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRawClipboardHost_ReadAvailableFormatNames_Name:
        if (message.isResponse())
          paramsClass = RawClipboardHost_ReadAvailableFormatNames_ResponseParams;
        break;
      case kRawClipboardHost_Read_Name:
        if (message.isResponse())
          paramsClass = RawClipboardHost_Read_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var RawClipboardHost = {
    name: 'blink.mojom.RawClipboardHost',
    kVersion: 0,
    ptrClass: RawClipboardHostPtr,
    proxyClass: RawClipboardHostProxy,
    stubClass: RawClipboardHostStub,
    validateRequest: validateRawClipboardHostRequest,
    validateResponse: validateRawClipboardHostResponse,
  };
  RawClipboardHost.MAX_FORMAT_SIZE = 1024,
  RawClipboardHost.MAX_DATA_SIZE = 1073741824,
  RawClipboardHostStub.prototype.validator = validateRawClipboardHostRequest;
  RawClipboardHostProxy.prototype.validator = validateRawClipboardHostResponse;
  exports.RawClipboardHost = RawClipboardHost;
  exports.RawClipboardHostPtr = RawClipboardHostPtr;
  exports.RawClipboardHostAssociatedPtr = RawClipboardHostAssociatedPtr;
})();