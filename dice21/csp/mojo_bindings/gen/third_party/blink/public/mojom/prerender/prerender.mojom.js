// third_party/blink/public/mojom/prerender/prerender.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/prerender/prerender.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var referrer$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/referrer.mojom', '../loader/referrer.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var PrerenderRelType = {};
  PrerenderRelType.kPrerender = 0;
  PrerenderRelType.kNext = 1;
  PrerenderRelType.MIN_VALUE = 0,
  PrerenderRelType.MAX_VALUE = 1,

  PrerenderRelType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  PrerenderRelType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PrerenderAttributes(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderAttributes.prototype.initDefaults_ = function() {
    this.url = null;
    this.relType = 0;
    this.referrer = null;
    this.viewSize = null;
  };
  PrerenderAttributes.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderAttributes.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.relType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, PrerenderRelType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.referrer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, referrer$.Referrer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderAttributes.viewSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderAttributes.encodedSize = codec.kStructHeaderSize + 32;

  PrerenderAttributes.decode = function(decoder) {
    var packed;
    var val = new PrerenderAttributes();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.relType =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.referrer =
        decoder.decodeStructPointer(referrer$.Referrer);
    val.viewSize =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  PrerenderAttributes.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderAttributes.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Int32, val.relType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(referrer$.Referrer, val.referrer);
    encoder.encodeStructPointer(geometry$.Size, val.viewSize);
  };
  function PrerenderProcessor_Start_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderProcessor_Start_Params.prototype.initDefaults_ = function() {
    this.prerenderAttribute = null;
  };
  PrerenderProcessor_Start_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderProcessor_Start_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderProcessor_Start_Params.prerenderAttribute
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrerenderAttributes, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderProcessor_Start_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrerenderProcessor_Start_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderProcessor_Start_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.prerenderAttribute =
        decoder.decodeStructPointer(PrerenderAttributes);
    return val;
  };

  PrerenderProcessor_Start_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderProcessor_Start_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrerenderAttributes, val.prerenderAttribute);
  };
  function PrerenderProcessor_Cancel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderProcessor_Cancel_Params.prototype.initDefaults_ = function() {
  };
  PrerenderProcessor_Cancel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderProcessor_Cancel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderProcessor_Cancel_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderProcessor_Cancel_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderProcessor_Cancel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderProcessor_Cancel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderProcessor_Cancel_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kPrerenderProcessor_Start_Name = 0;
  var kPrerenderProcessor_Cancel_Name = 1;

  function PrerenderProcessorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrerenderProcessor,
                                                   handleOrPtrInfo);
  }

  function PrerenderProcessorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrerenderProcessor, associatedInterfacePtrInfo);
  }

  PrerenderProcessorAssociatedPtr.prototype =
      Object.create(PrerenderProcessorPtr.prototype);
  PrerenderProcessorAssociatedPtr.prototype.constructor =
      PrerenderProcessorAssociatedPtr;

  function PrerenderProcessorProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrerenderProcessorPtr.prototype.start = function() {
    return PrerenderProcessorProxy.prototype.start
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderProcessorProxy.prototype.start = function(prerenderAttribute) {
    var params_ = new PrerenderProcessor_Start_Params();
    params_.prerenderAttribute = prerenderAttribute;
    var builder = new codec.MessageV0Builder(
        kPrerenderProcessor_Start_Name,
        codec.align(PrerenderProcessor_Start_Params.encodedSize));
    builder.encodeStruct(PrerenderProcessor_Start_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrerenderProcessorPtr.prototype.cancel = function() {
    return PrerenderProcessorProxy.prototype.cancel
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderProcessorProxy.prototype.cancel = function() {
    var params_ = new PrerenderProcessor_Cancel_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderProcessor_Cancel_Name,
        codec.align(PrerenderProcessor_Cancel_Params.encodedSize));
    builder.encodeStruct(PrerenderProcessor_Cancel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrerenderProcessorStub(delegate) {
    this.delegate_ = delegate;
  }
  PrerenderProcessorStub.prototype.start = function(prerenderAttribute) {
    return this.delegate_ && this.delegate_.start && this.delegate_.start(prerenderAttribute);
  }
  PrerenderProcessorStub.prototype.cancel = function() {
    return this.delegate_ && this.delegate_.cancel && this.delegate_.cancel();
  }

  PrerenderProcessorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrerenderProcessor_Start_Name:
      var params = reader.decodeStruct(PrerenderProcessor_Start_Params);
      this.start(params.prerenderAttribute);
      return true;
    case kPrerenderProcessor_Cancel_Name:
      var params = reader.decodeStruct(PrerenderProcessor_Cancel_Params);
      this.cancel();
      return true;
    default:
      return false;
    }
  };

  PrerenderProcessorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrerenderProcessorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrerenderProcessor_Start_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderProcessor_Start_Params;
      break;
      case kPrerenderProcessor_Cancel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderProcessor_Cancel_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrerenderProcessorResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrerenderProcessor = {
    name: 'blink.mojom.PrerenderProcessor',
    kVersion: 0,
    ptrClass: PrerenderProcessorPtr,
    proxyClass: PrerenderProcessorProxy,
    stubClass: PrerenderProcessorStub,
    validateRequest: validatePrerenderProcessorRequest,
    validateResponse: null,
  };
  PrerenderProcessorStub.prototype.validator = validatePrerenderProcessorRequest;
  PrerenderProcessorProxy.prototype.validator = null;
  exports.PrerenderRelType = PrerenderRelType;
  exports.PrerenderAttributes = PrerenderAttributes;
  exports.PrerenderProcessor = PrerenderProcessor;
  exports.PrerenderProcessorPtr = PrerenderProcessorPtr;
  exports.PrerenderProcessorAssociatedPtr = PrerenderProcessorAssociatedPtr;
})();