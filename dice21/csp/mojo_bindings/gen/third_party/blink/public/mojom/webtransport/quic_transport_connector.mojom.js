// third_party/blink/public/mojom/webtransport/quic_transport_connector.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/webtransport/quic_transport_connector.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var quic_transport$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/quic_transport.mojom', '../../../../../services/network/public/mojom/quic_transport.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function QuicTransportConnector_Connect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QuicTransportConnector_Connect_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.fingerprints = null;
    this.client = new quic_transport$.QuicTransportHandshakeClientPtr();
  };
  QuicTransportConnector_Connect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QuicTransportConnector_Connect_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportConnector_Connect_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportConnector_Connect_Params.fingerprints
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(quic_transport$.QuicTransportCertificateFingerprint), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QuicTransportConnector_Connect_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QuicTransportConnector_Connect_Params.encodedSize = codec.kStructHeaderSize + 24;

  QuicTransportConnector_Connect_Params.decode = function(decoder) {
    var packed;
    var val = new QuicTransportConnector_Connect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.fingerprints =
        decoder.decodeArrayPointer(new codec.PointerTo(quic_transport$.QuicTransportCertificateFingerprint));
    val.client =
        decoder.decodeStruct(new codec.Interface(quic_transport$.QuicTransportHandshakeClientPtr));
    return val;
  };

  QuicTransportConnector_Connect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QuicTransportConnector_Connect_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeArrayPointer(new codec.PointerTo(quic_transport$.QuicTransportCertificateFingerprint), val.fingerprints);
    encoder.encodeStruct(new codec.Interface(quic_transport$.QuicTransportHandshakeClientPtr), val.client);
  };
  var kQuicTransportConnector_Connect_Name = 0;

  function QuicTransportConnectorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(QuicTransportConnector,
                                                   handleOrPtrInfo);
  }

  function QuicTransportConnectorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        QuicTransportConnector, associatedInterfacePtrInfo);
  }

  QuicTransportConnectorAssociatedPtr.prototype =
      Object.create(QuicTransportConnectorPtr.prototype);
  QuicTransportConnectorAssociatedPtr.prototype.constructor =
      QuicTransportConnectorAssociatedPtr;

  function QuicTransportConnectorProxy(receiver) {
    this.receiver_ = receiver;
  }
  QuicTransportConnectorPtr.prototype.connect = function() {
    return QuicTransportConnectorProxy.prototype.connect
        .apply(this.ptr.getProxy(), arguments);
  };

  QuicTransportConnectorProxy.prototype.connect = function(url, fingerprints, client) {
    var params_ = new QuicTransportConnector_Connect_Params();
    params_.url = url;
    params_.fingerprints = fingerprints;
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kQuicTransportConnector_Connect_Name,
        codec.align(QuicTransportConnector_Connect_Params.encodedSize));
    builder.encodeStruct(QuicTransportConnector_Connect_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function QuicTransportConnectorStub(delegate) {
    this.delegate_ = delegate;
  }
  QuicTransportConnectorStub.prototype.connect = function(url, fingerprints, client) {
    return this.delegate_ && this.delegate_.connect && this.delegate_.connect(url, fingerprints, client);
  }

  QuicTransportConnectorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQuicTransportConnector_Connect_Name:
      var params = reader.decodeStruct(QuicTransportConnector_Connect_Params);
      this.connect(params.url, params.fingerprints, params.client);
      return true;
    default:
      return false;
    }
  };

  QuicTransportConnectorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateQuicTransportConnectorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kQuicTransportConnector_Connect_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = QuicTransportConnector_Connect_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateQuicTransportConnectorResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var QuicTransportConnector = {
    name: 'blink.mojom.QuicTransportConnector',
    kVersion: 0,
    ptrClass: QuicTransportConnectorPtr,
    proxyClass: QuicTransportConnectorProxy,
    stubClass: QuicTransportConnectorStub,
    validateRequest: validateQuicTransportConnectorRequest,
    validateResponse: null,
  };
  QuicTransportConnectorStub.prototype.validator = validateQuicTransportConnectorRequest;
  QuicTransportConnectorProxy.prototype.validator = null;
  exports.QuicTransportConnector = QuicTransportConnector;
  exports.QuicTransportConnectorPtr = QuicTransportConnectorPtr;
  exports.QuicTransportConnectorAssociatedPtr = QuicTransportConnectorAssociatedPtr;
})();