// third_party/blink/public/mojom/native_io/native_io.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/native_io/native_io.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var file_error$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_error.mojom', '../../../../../mojo/public/mojom/base/file_error.mojom.js');
  }


  var NativeIOErrorType = {};
  NativeIOErrorType.kSuccess = 0;
  NativeIOErrorType.kUnknown = 1;
  NativeIOErrorType.kInvalidState = 2;
  NativeIOErrorType.kNotFound = 3;
  NativeIOErrorType.kNoModificationAllowed = 4;
  NativeIOErrorType.kNoSpace = 5;
  NativeIOErrorType.MIN_VALUE = 0,
  NativeIOErrorType.MAX_VALUE = 5,

  NativeIOErrorType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  NativeIOErrorType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function NativeIOError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.message = null;
  };
  NativeIOError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, NativeIOErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOError.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOError.decode = function(decoder) {
    var packed;
    var val = new NativeIOError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  NativeIOError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.message);
  };
  function NativeIOFileHost_Close_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOFileHost_Close_Params.prototype.initDefaults_ = function() {
  };
  NativeIOFileHost_Close_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOFileHost_Close_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOFileHost_Close_Params.encodedSize = codec.kStructHeaderSize + 0;

  NativeIOFileHost_Close_Params.decode = function(decoder) {
    var packed;
    var val = new NativeIOFileHost_Close_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  NativeIOFileHost_Close_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOFileHost_Close_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function NativeIOFileHost_Close_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOFileHost_Close_ResponseParams.prototype.initDefaults_ = function() {
  };
  NativeIOFileHost_Close_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOFileHost_Close_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOFileHost_Close_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  NativeIOFileHost_Close_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NativeIOFileHost_Close_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  NativeIOFileHost_Close_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOFileHost_Close_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function NativeIOFileHost_SetLength_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOFileHost_SetLength_Params.prototype.initDefaults_ = function() {
    this.length = 0;
    this.backingFile = null;
  };
  NativeIOFileHost_SetLength_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOFileHost_SetLength_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate NativeIOFileHost_SetLength_Params.backingFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOFileHost_SetLength_Params.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOFileHost_SetLength_Params.decode = function(decoder) {
    var packed;
    var val = new NativeIOFileHost_SetLength_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.length =
        decoder.decodeStruct(codec.Int64);
    val.backingFile =
        decoder.decodeStructPointer(file$.File);
    return val;
  };

  NativeIOFileHost_SetLength_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOFileHost_SetLength_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.length);
    encoder.encodeStructPointer(file$.File, val.backingFile);
  };
  function NativeIOFileHost_SetLength_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOFileHost_SetLength_ResponseParams.prototype.initDefaults_ = function() {
    this.backingFile = null;
    this.setLengthError = null;
  };
  NativeIOFileHost_SetLength_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOFileHost_SetLength_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOFileHost_SetLength_ResponseParams.backingFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOFileHost_SetLength_ResponseParams.setLengthError
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, NativeIOError, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOFileHost_SetLength_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOFileHost_SetLength_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NativeIOFileHost_SetLength_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.backingFile =
        decoder.decodeStructPointer(file$.File);
    val.setLengthError =
        decoder.decodeStructPointer(NativeIOError);
    return val;
  };

  NativeIOFileHost_SetLength_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOFileHost_SetLength_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file$.File, val.backingFile);
    encoder.encodeStructPointer(NativeIOError, val.setLengthError);
  };
  function NativeIOHost_OpenFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_OpenFile_Params.prototype.initDefaults_ = function() {
    this.name = null;
    this.fileHostReceiver = new bindings.InterfaceRequest();
  };
  NativeIOHost_OpenFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_OpenFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_OpenFile_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_OpenFile_Params.fileHostReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_OpenFile_Params.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOHost_OpenFile_Params.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_OpenFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.fileHostReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  NativeIOHost_OpenFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_OpenFile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.InterfaceRequest, val.fileHostReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function NativeIOHost_OpenFile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_OpenFile_ResponseParams.prototype.initDefaults_ = function() {
    this.backingFile = null;
    this.openError = null;
  };
  NativeIOHost_OpenFile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_OpenFile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_OpenFile_ResponseParams.backingFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file$.File, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_OpenFile_ResponseParams.openError
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, NativeIOError, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_OpenFile_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOHost_OpenFile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_OpenFile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.backingFile =
        decoder.decodeStructPointer(file$.File);
    val.openError =
        decoder.decodeStructPointer(NativeIOError);
    return val;
  };

  NativeIOHost_OpenFile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_OpenFile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file$.File, val.backingFile);
    encoder.encodeStructPointer(NativeIOError, val.openError);
  };
  function NativeIOHost_DeleteFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_DeleteFile_Params.prototype.initDefaults_ = function() {
    this.name = null;
  };
  NativeIOHost_DeleteFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_DeleteFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_DeleteFile_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_DeleteFile_Params.encodedSize = codec.kStructHeaderSize + 8;

  NativeIOHost_DeleteFile_Params.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_DeleteFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    return val;
  };

  NativeIOHost_DeleteFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_DeleteFile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
  };
  function NativeIOHost_DeleteFile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_DeleteFile_ResponseParams.prototype.initDefaults_ = function() {
    this.deleteError = null;
  };
  NativeIOHost_DeleteFile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_DeleteFile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_DeleteFile_ResponseParams.deleteError
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, NativeIOError, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_DeleteFile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  NativeIOHost_DeleteFile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_DeleteFile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deleteError =
        decoder.decodeStructPointer(NativeIOError);
    return val;
  };

  NativeIOHost_DeleteFile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_DeleteFile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(NativeIOError, val.deleteError);
  };
  function NativeIOHost_GetAllFileNames_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_GetAllFileNames_Params.prototype.initDefaults_ = function() {
  };
  NativeIOHost_GetAllFileNames_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_GetAllFileNames_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_GetAllFileNames_Params.encodedSize = codec.kStructHeaderSize + 0;

  NativeIOHost_GetAllFileNames_Params.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_GetAllFileNames_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  NativeIOHost_GetAllFileNames_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_GetAllFileNames_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function NativeIOHost_GetAllFileNames_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_GetAllFileNames_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.names = null;
  };
  NativeIOHost_GetAllFileNames_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_GetAllFileNames_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate NativeIOHost_GetAllFileNames_ResponseParams.names
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_GetAllFileNames_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOHost_GetAllFileNames_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_GetAllFileNames_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.names =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  NativeIOHost_GetAllFileNames_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_GetAllFileNames_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.String, val.names);
  };
  function NativeIOHost_RenameFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_RenameFile_Params.prototype.initDefaults_ = function() {
    this.oldName = null;
    this.newName = null;
  };
  NativeIOHost_RenameFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_RenameFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_RenameFile_Params.oldName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_RenameFile_Params.newName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_RenameFile_Params.encodedSize = codec.kStructHeaderSize + 16;

  NativeIOHost_RenameFile_Params.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_RenameFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.oldName =
        decoder.decodeStruct(codec.String);
    val.newName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  NativeIOHost_RenameFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_RenameFile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.oldName);
    encoder.encodeStruct(codec.String, val.newName);
  };
  function NativeIOHost_RenameFile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativeIOHost_RenameFile_ResponseParams.prototype.initDefaults_ = function() {
    this.renameError = null;
  };
  NativeIOHost_RenameFile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativeIOHost_RenameFile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativeIOHost_RenameFile_ResponseParams.renameError
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, NativeIOError, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativeIOHost_RenameFile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  NativeIOHost_RenameFile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NativeIOHost_RenameFile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renameError =
        decoder.decodeStructPointer(NativeIOError);
    return val;
  };

  NativeIOHost_RenameFile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativeIOHost_RenameFile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(NativeIOError, val.renameError);
  };
  var kNativeIOFileHost_Close_Name = 0;
  var kNativeIOFileHost_SetLength_Name = 1;

  function NativeIOFileHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(NativeIOFileHost,
                                                   handleOrPtrInfo);
  }

  function NativeIOFileHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        NativeIOFileHost, associatedInterfacePtrInfo);
  }

  NativeIOFileHostAssociatedPtr.prototype =
      Object.create(NativeIOFileHostPtr.prototype);
  NativeIOFileHostAssociatedPtr.prototype.constructor =
      NativeIOFileHostAssociatedPtr;

  function NativeIOFileHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  NativeIOFileHostPtr.prototype.close = function() {
    return NativeIOFileHostProxy.prototype.close
        .apply(this.ptr.getProxy(), arguments);
  };

  NativeIOFileHostProxy.prototype.close = function() {
    var params_ = new NativeIOFileHost_Close_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kNativeIOFileHost_Close_Name,
          codec.align(NativeIOFileHost_Close_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(NativeIOFileHost_Close_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NativeIOFileHost_Close_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  NativeIOFileHostPtr.prototype.setLength = function() {
    return NativeIOFileHostProxy.prototype.setLength
        .apply(this.ptr.getProxy(), arguments);
  };

  NativeIOFileHostProxy.prototype.setLength = function(length, backingFile) {
    var params_ = new NativeIOFileHost_SetLength_Params();
    params_.length = length;
    params_.backingFile = backingFile;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kNativeIOFileHost_SetLength_Name,
          codec.align(NativeIOFileHost_SetLength_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(NativeIOFileHost_SetLength_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NativeIOFileHost_SetLength_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function NativeIOFileHostStub(delegate) {
    this.delegate_ = delegate;
  }
  NativeIOFileHostStub.prototype.close = function() {
    return this.delegate_ && this.delegate_.close && this.delegate_.close();
  }
  NativeIOFileHostStub.prototype.setLength = function(length, backingFile) {
    return this.delegate_ && this.delegate_.setLength && this.delegate_.setLength(length, backingFile);
  }

  NativeIOFileHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  NativeIOFileHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kNativeIOFileHost_Close_Name:
      var params = reader.decodeStruct(NativeIOFileHost_Close_Params);
      this.close().then(function(response) {
        var responseParams =
            new NativeIOFileHost_Close_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kNativeIOFileHost_Close_Name,
            codec.align(NativeIOFileHost_Close_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(NativeIOFileHost_Close_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kNativeIOFileHost_SetLength_Name:
      var params = reader.decodeStruct(NativeIOFileHost_SetLength_Params);
      this.setLength(params.length, params.backingFile).then(function(response) {
        var responseParams =
            new NativeIOFileHost_SetLength_ResponseParams();
        responseParams.backingFile = response.backingFile;
        responseParams.setLengthError = response.setLengthError;
        var builder = new codec.MessageV1Builder(
            kNativeIOFileHost_SetLength_Name,
            codec.align(NativeIOFileHost_SetLength_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(NativeIOFileHost_SetLength_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateNativeIOFileHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kNativeIOFileHost_Close_Name:
        if (message.expectsResponse())
          paramsClass = NativeIOFileHost_Close_Params;
      break;
      case kNativeIOFileHost_SetLength_Name:
        if (message.expectsResponse())
          paramsClass = NativeIOFileHost_SetLength_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateNativeIOFileHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kNativeIOFileHost_Close_Name:
        if (message.isResponse())
          paramsClass = NativeIOFileHost_Close_ResponseParams;
        break;
      case kNativeIOFileHost_SetLength_Name:
        if (message.isResponse())
          paramsClass = NativeIOFileHost_SetLength_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var NativeIOFileHost = {
    name: 'blink.mojom.NativeIOFileHost',
    kVersion: 0,
    ptrClass: NativeIOFileHostPtr,
    proxyClass: NativeIOFileHostProxy,
    stubClass: NativeIOFileHostStub,
    validateRequest: validateNativeIOFileHostRequest,
    validateResponse: validateNativeIOFileHostResponse,
  };
  NativeIOFileHostStub.prototype.validator = validateNativeIOFileHostRequest;
  NativeIOFileHostProxy.prototype.validator = validateNativeIOFileHostResponse;
  var kNativeIOHost_OpenFile_Name = 0;
  var kNativeIOHost_DeleteFile_Name = 1;
  var kNativeIOHost_GetAllFileNames_Name = 2;
  var kNativeIOHost_RenameFile_Name = 3;

  function NativeIOHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(NativeIOHost,
                                                   handleOrPtrInfo);
  }

  function NativeIOHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        NativeIOHost, associatedInterfacePtrInfo);
  }

  NativeIOHostAssociatedPtr.prototype =
      Object.create(NativeIOHostPtr.prototype);
  NativeIOHostAssociatedPtr.prototype.constructor =
      NativeIOHostAssociatedPtr;

  function NativeIOHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  NativeIOHostPtr.prototype.openFile = function() {
    return NativeIOHostProxy.prototype.openFile
        .apply(this.ptr.getProxy(), arguments);
  };

  NativeIOHostProxy.prototype.openFile = function(name, fileHostReceiver) {
    var params_ = new NativeIOHost_OpenFile_Params();
    params_.name = name;
    params_.fileHostReceiver = fileHostReceiver;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kNativeIOHost_OpenFile_Name,
          codec.align(NativeIOHost_OpenFile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(NativeIOHost_OpenFile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NativeIOHost_OpenFile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  NativeIOHostPtr.prototype.deleteFile = function() {
    return NativeIOHostProxy.prototype.deleteFile
        .apply(this.ptr.getProxy(), arguments);
  };

  NativeIOHostProxy.prototype.deleteFile = function(name) {
    var params_ = new NativeIOHost_DeleteFile_Params();
    params_.name = name;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kNativeIOHost_DeleteFile_Name,
          codec.align(NativeIOHost_DeleteFile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(NativeIOHost_DeleteFile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NativeIOHost_DeleteFile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  NativeIOHostPtr.prototype.getAllFileNames = function() {
    return NativeIOHostProxy.prototype.getAllFileNames
        .apply(this.ptr.getProxy(), arguments);
  };

  NativeIOHostProxy.prototype.getAllFileNames = function() {
    var params_ = new NativeIOHost_GetAllFileNames_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kNativeIOHost_GetAllFileNames_Name,
          codec.align(NativeIOHost_GetAllFileNames_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(NativeIOHost_GetAllFileNames_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NativeIOHost_GetAllFileNames_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  NativeIOHostPtr.prototype.renameFile = function() {
    return NativeIOHostProxy.prototype.renameFile
        .apply(this.ptr.getProxy(), arguments);
  };

  NativeIOHostProxy.prototype.renameFile = function(oldName, newName) {
    var params_ = new NativeIOHost_RenameFile_Params();
    params_.oldName = oldName;
    params_.newName = newName;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kNativeIOHost_RenameFile_Name,
          codec.align(NativeIOHost_RenameFile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(NativeIOHost_RenameFile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NativeIOHost_RenameFile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function NativeIOHostStub(delegate) {
    this.delegate_ = delegate;
  }
  NativeIOHostStub.prototype.openFile = function(name, fileHostReceiver) {
    return this.delegate_ && this.delegate_.openFile && this.delegate_.openFile(name, fileHostReceiver);
  }
  NativeIOHostStub.prototype.deleteFile = function(name) {
    return this.delegate_ && this.delegate_.deleteFile && this.delegate_.deleteFile(name);
  }
  NativeIOHostStub.prototype.getAllFileNames = function() {
    return this.delegate_ && this.delegate_.getAllFileNames && this.delegate_.getAllFileNames();
  }
  NativeIOHostStub.prototype.renameFile = function(oldName, newName) {
    return this.delegate_ && this.delegate_.renameFile && this.delegate_.renameFile(oldName, newName);
  }

  NativeIOHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  NativeIOHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kNativeIOHost_OpenFile_Name:
      var params = reader.decodeStruct(NativeIOHost_OpenFile_Params);
      this.openFile(params.name, params.fileHostReceiver).then(function(response) {
        var responseParams =
            new NativeIOHost_OpenFile_ResponseParams();
        responseParams.backingFile = response.backingFile;
        responseParams.openError = response.openError;
        var builder = new codec.MessageV1Builder(
            kNativeIOHost_OpenFile_Name,
            codec.align(NativeIOHost_OpenFile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(NativeIOHost_OpenFile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kNativeIOHost_DeleteFile_Name:
      var params = reader.decodeStruct(NativeIOHost_DeleteFile_Params);
      this.deleteFile(params.name).then(function(response) {
        var responseParams =
            new NativeIOHost_DeleteFile_ResponseParams();
        responseParams.deleteError = response.deleteError;
        var builder = new codec.MessageV1Builder(
            kNativeIOHost_DeleteFile_Name,
            codec.align(NativeIOHost_DeleteFile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(NativeIOHost_DeleteFile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kNativeIOHost_GetAllFileNames_Name:
      var params = reader.decodeStruct(NativeIOHost_GetAllFileNames_Params);
      this.getAllFileNames().then(function(response) {
        var responseParams =
            new NativeIOHost_GetAllFileNames_ResponseParams();
        responseParams.success = response.success;
        responseParams.names = response.names;
        var builder = new codec.MessageV1Builder(
            kNativeIOHost_GetAllFileNames_Name,
            codec.align(NativeIOHost_GetAllFileNames_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(NativeIOHost_GetAllFileNames_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kNativeIOHost_RenameFile_Name:
      var params = reader.decodeStruct(NativeIOHost_RenameFile_Params);
      this.renameFile(params.oldName, params.newName).then(function(response) {
        var responseParams =
            new NativeIOHost_RenameFile_ResponseParams();
        responseParams.renameError = response.renameError;
        var builder = new codec.MessageV1Builder(
            kNativeIOHost_RenameFile_Name,
            codec.align(NativeIOHost_RenameFile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(NativeIOHost_RenameFile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateNativeIOHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kNativeIOHost_OpenFile_Name:
        if (message.expectsResponse())
          paramsClass = NativeIOHost_OpenFile_Params;
      break;
      case kNativeIOHost_DeleteFile_Name:
        if (message.expectsResponse())
          paramsClass = NativeIOHost_DeleteFile_Params;
      break;
      case kNativeIOHost_GetAllFileNames_Name:
        if (message.expectsResponse())
          paramsClass = NativeIOHost_GetAllFileNames_Params;
      break;
      case kNativeIOHost_RenameFile_Name:
        if (message.expectsResponse())
          paramsClass = NativeIOHost_RenameFile_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateNativeIOHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kNativeIOHost_OpenFile_Name:
        if (message.isResponse())
          paramsClass = NativeIOHost_OpenFile_ResponseParams;
        break;
      case kNativeIOHost_DeleteFile_Name:
        if (message.isResponse())
          paramsClass = NativeIOHost_DeleteFile_ResponseParams;
        break;
      case kNativeIOHost_GetAllFileNames_Name:
        if (message.isResponse())
          paramsClass = NativeIOHost_GetAllFileNames_ResponseParams;
        break;
      case kNativeIOHost_RenameFile_Name:
        if (message.isResponse())
          paramsClass = NativeIOHost_RenameFile_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var NativeIOHost = {
    name: 'blink.mojom.NativeIOHost',
    kVersion: 0,
    ptrClass: NativeIOHostPtr,
    proxyClass: NativeIOHostProxy,
    stubClass: NativeIOHostStub,
    validateRequest: validateNativeIOHostRequest,
    validateResponse: validateNativeIOHostResponse,
  };
  NativeIOHostStub.prototype.validator = validateNativeIOHostRequest;
  NativeIOHostProxy.prototype.validator = validateNativeIOHostResponse;
  exports.NativeIOErrorType = NativeIOErrorType;
  exports.NativeIOError = NativeIOError;
  exports.NativeIOFileHost = NativeIOFileHost;
  exports.NativeIOFileHostPtr = NativeIOFileHostPtr;
  exports.NativeIOFileHostAssociatedPtr = NativeIOFileHostAssociatedPtr;
  exports.NativeIOHost = NativeIOHost;
  exports.NativeIOHostPtr = NativeIOHostPtr;
  exports.NativeIOHostAssociatedPtr = NativeIOHostAssociatedPtr;
})();