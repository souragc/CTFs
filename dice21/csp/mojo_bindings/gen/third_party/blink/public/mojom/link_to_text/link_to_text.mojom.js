// third_party/blink/public/mojom/link_to_text/link_to_text.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/link_to_text/link_to_text.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function TextFragmentSelectorProducer_GenerateSelector_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextFragmentSelectorProducer_GenerateSelector_Params.prototype.initDefaults_ = function() {
  };
  TextFragmentSelectorProducer_GenerateSelector_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextFragmentSelectorProducer_GenerateSelector_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TextFragmentSelectorProducer_GenerateSelector_Params.encodedSize = codec.kStructHeaderSize + 0;

  TextFragmentSelectorProducer_GenerateSelector_Params.decode = function(decoder) {
    var packed;
    var val = new TextFragmentSelectorProducer_GenerateSelector_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TextFragmentSelectorProducer_GenerateSelector_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextFragmentSelectorProducer_GenerateSelector_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TextFragmentSelectorProducer_GenerateSelector_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextFragmentSelectorProducer_GenerateSelector_ResponseParams.prototype.initDefaults_ = function() {
    this.selector = null;
  };
  TextFragmentSelectorProducer_GenerateSelector_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextFragmentSelectorProducer_GenerateSelector_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TextFragmentSelectorProducer_GenerateSelector_ResponseParams.selector
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TextFragmentSelectorProducer_GenerateSelector_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TextFragmentSelectorProducer_GenerateSelector_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TextFragmentSelectorProducer_GenerateSelector_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.selector =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TextFragmentSelectorProducer_GenerateSelector_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextFragmentSelectorProducer_GenerateSelector_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.selector);
  };
  var kTextFragmentSelectorProducer_GenerateSelector_Name = 0;

  function TextFragmentSelectorProducerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TextFragmentSelectorProducer,
                                                   handleOrPtrInfo);
  }

  function TextFragmentSelectorProducerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TextFragmentSelectorProducer, associatedInterfacePtrInfo);
  }

  TextFragmentSelectorProducerAssociatedPtr.prototype =
      Object.create(TextFragmentSelectorProducerPtr.prototype);
  TextFragmentSelectorProducerAssociatedPtr.prototype.constructor =
      TextFragmentSelectorProducerAssociatedPtr;

  function TextFragmentSelectorProducerProxy(receiver) {
    this.receiver_ = receiver;
  }
  TextFragmentSelectorProducerPtr.prototype.generateSelector = function() {
    return TextFragmentSelectorProducerProxy.prototype.generateSelector
        .apply(this.ptr.getProxy(), arguments);
  };

  TextFragmentSelectorProducerProxy.prototype.generateSelector = function() {
    var params_ = new TextFragmentSelectorProducer_GenerateSelector_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTextFragmentSelectorProducer_GenerateSelector_Name,
          codec.align(TextFragmentSelectorProducer_GenerateSelector_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TextFragmentSelectorProducer_GenerateSelector_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TextFragmentSelectorProducer_GenerateSelector_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TextFragmentSelectorProducerStub(delegate) {
    this.delegate_ = delegate;
  }
  TextFragmentSelectorProducerStub.prototype.generateSelector = function() {
    return this.delegate_ && this.delegate_.generateSelector && this.delegate_.generateSelector();
  }

  TextFragmentSelectorProducerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TextFragmentSelectorProducerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTextFragmentSelectorProducer_GenerateSelector_Name:
      var params = reader.decodeStruct(TextFragmentSelectorProducer_GenerateSelector_Params);
      this.generateSelector().then(function(response) {
        var responseParams =
            new TextFragmentSelectorProducer_GenerateSelector_ResponseParams();
        responseParams.selector = response.selector;
        var builder = new codec.MessageV1Builder(
            kTextFragmentSelectorProducer_GenerateSelector_Name,
            codec.align(TextFragmentSelectorProducer_GenerateSelector_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TextFragmentSelectorProducer_GenerateSelector_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTextFragmentSelectorProducerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTextFragmentSelectorProducer_GenerateSelector_Name:
        if (message.expectsResponse())
          paramsClass = TextFragmentSelectorProducer_GenerateSelector_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTextFragmentSelectorProducerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTextFragmentSelectorProducer_GenerateSelector_Name:
        if (message.isResponse())
          paramsClass = TextFragmentSelectorProducer_GenerateSelector_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TextFragmentSelectorProducer = {
    name: 'blink.mojom.TextFragmentSelectorProducer',
    kVersion: 0,
    ptrClass: TextFragmentSelectorProducerPtr,
    proxyClass: TextFragmentSelectorProducerProxy,
    stubClass: TextFragmentSelectorProducerStub,
    validateRequest: validateTextFragmentSelectorProducerRequest,
    validateResponse: validateTextFragmentSelectorProducerResponse,
  };
  TextFragmentSelectorProducerStub.prototype.validator = validateTextFragmentSelectorProducerRequest;
  TextFragmentSelectorProducerProxy.prototype.validator = validateTextFragmentSelectorProducerResponse;
  exports.TextFragmentSelectorProducer = TextFragmentSelectorProducer;
  exports.TextFragmentSelectorProducerPtr = TextFragmentSelectorProducerPtr;
  exports.TextFragmentSelectorProducerAssociatedPtr = TextFragmentSelectorProducerAssociatedPtr;
})();