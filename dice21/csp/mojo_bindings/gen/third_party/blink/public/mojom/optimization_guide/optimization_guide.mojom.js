// third_party/blink/public/mojom/optimization_guide/optimization_guide.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/optimization_guide/optimization_guide.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');


  var DelayAsyncScriptExecutionDelayType = {};
  DelayAsyncScriptExecutionDelayType.kUnknown = 0;
  DelayAsyncScriptExecutionDelayType.kFinishedParsing = 1;
  DelayAsyncScriptExecutionDelayType.kFirstPaintOrFinishedParsing = 2;
  DelayAsyncScriptExecutionDelayType.MIN_VALUE = 0,
  DelayAsyncScriptExecutionDelayType.MAX_VALUE = 2,

  DelayAsyncScriptExecutionDelayType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  DelayAsyncScriptExecutionDelayType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DelayCompetingLowPriorityRequestsDelayType = {};
  DelayCompetingLowPriorityRequestsDelayType.kUnknown = 0;
  DelayCompetingLowPriorityRequestsDelayType.kFirstPaint = 1;
  DelayCompetingLowPriorityRequestsDelayType.kFirstContentfulPaint = 2;
  DelayCompetingLowPriorityRequestsDelayType.MIN_VALUE = 0,
  DelayCompetingLowPriorityRequestsDelayType.MAX_VALUE = 2,

  DelayCompetingLowPriorityRequestsDelayType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  DelayCompetingLowPriorityRequestsDelayType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DelayCompetingLowPriorityRequestsPriorityThreshold = {};
  DelayCompetingLowPriorityRequestsPriorityThreshold.kUnknown = 0;
  DelayCompetingLowPriorityRequestsPriorityThreshold.kMedium = 1;
  DelayCompetingLowPriorityRequestsPriorityThreshold.kHigh = 2;
  DelayCompetingLowPriorityRequestsPriorityThreshold.MIN_VALUE = 0,
  DelayCompetingLowPriorityRequestsPriorityThreshold.MAX_VALUE = 2,

  DelayCompetingLowPriorityRequestsPriorityThreshold.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  DelayCompetingLowPriorityRequestsPriorityThreshold.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function DelayAsyncScriptExecutionHints(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DelayAsyncScriptExecutionHints.prototype.initDefaults_ = function() {
    this.delayType = 0;
  };
  DelayAsyncScriptExecutionHints.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DelayAsyncScriptExecutionHints.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DelayAsyncScriptExecutionHints.delayType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, DelayAsyncScriptExecutionDelayType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DelayAsyncScriptExecutionHints.encodedSize = codec.kStructHeaderSize + 8;

  DelayAsyncScriptExecutionHints.decode = function(decoder) {
    var packed;
    var val = new DelayAsyncScriptExecutionHints();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.delayType =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DelayAsyncScriptExecutionHints.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DelayAsyncScriptExecutionHints.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.delayType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DelayCompetingLowPriorityRequestsHints(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DelayCompetingLowPriorityRequestsHints.prototype.initDefaults_ = function() {
    this.delayType = 0;
    this.priorityThreshold = 0;
  };
  DelayCompetingLowPriorityRequestsHints.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DelayCompetingLowPriorityRequestsHints.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DelayCompetingLowPriorityRequestsHints.delayType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, DelayCompetingLowPriorityRequestsDelayType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DelayCompetingLowPriorityRequestsHints.priorityThreshold
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, DelayCompetingLowPriorityRequestsPriorityThreshold);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DelayCompetingLowPriorityRequestsHints.encodedSize = codec.kStructHeaderSize + 8;

  DelayCompetingLowPriorityRequestsHints.decode = function(decoder) {
    var packed;
    var val = new DelayCompetingLowPriorityRequestsHints();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.delayType =
        decoder.decodeStruct(codec.Int32);
    val.priorityThreshold =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  DelayCompetingLowPriorityRequestsHints.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DelayCompetingLowPriorityRequestsHints.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.delayType);
    encoder.encodeStruct(codec.Int32, val.priorityThreshold);
  };
  function BlinkOptimizationGuideHints(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BlinkOptimizationGuideHints.prototype.initDefaults_ = function() {
    this.delayAsyncScriptExecutionHints = null;
    this.delayCompetingLowPriorityRequestsHints = null;
  };
  BlinkOptimizationGuideHints.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BlinkOptimizationGuideHints.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BlinkOptimizationGuideHints.delayAsyncScriptExecutionHints
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DelayAsyncScriptExecutionHints, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BlinkOptimizationGuideHints.delayCompetingLowPriorityRequestsHints
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, DelayCompetingLowPriorityRequestsHints, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BlinkOptimizationGuideHints.encodedSize = codec.kStructHeaderSize + 16;

  BlinkOptimizationGuideHints.decode = function(decoder) {
    var packed;
    var val = new BlinkOptimizationGuideHints();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.delayAsyncScriptExecutionHints =
        decoder.decodeStructPointer(DelayAsyncScriptExecutionHints);
    val.delayCompetingLowPriorityRequestsHints =
        decoder.decodeStructPointer(DelayCompetingLowPriorityRequestsHints);
    return val;
  };

  BlinkOptimizationGuideHints.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BlinkOptimizationGuideHints.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DelayAsyncScriptExecutionHints, val.delayAsyncScriptExecutionHints);
    encoder.encodeStructPointer(DelayCompetingLowPriorityRequestsHints, val.delayCompetingLowPriorityRequestsHints);
  };
  exports.DelayAsyncScriptExecutionDelayType = DelayAsyncScriptExecutionDelayType;
  exports.DelayCompetingLowPriorityRequestsDelayType = DelayCompetingLowPriorityRequestsDelayType;
  exports.DelayCompetingLowPriorityRequestsPriorityThreshold = DelayCompetingLowPriorityRequestsPriorityThreshold;
  exports.DelayAsyncScriptExecutionHints = DelayAsyncScriptExecutionHints;
  exports.DelayCompetingLowPriorityRequestsHints = DelayCompetingLowPriorityRequestsHints;
  exports.BlinkOptimizationGuideHints = BlinkOptimizationGuideHints;
})();